
stm-can-source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003964  08003964  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003964  08003964  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003964  08003964  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800396c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c10a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ace  00000000  00000000  0002c146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a50  00000000  00000000  0002e730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f98f  00000000  00000000  0002f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce3d  00000000  00000000  0004eb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b8f  00000000  00000000  0005b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f4db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e54  00000000  00000000  0011f52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800391c 	.word	0x0800391c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800391c 	.word	0x0800391c

080001d4 <ucHeartbeat_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t ucHeartbeat_message(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	heartbeat[0] = 0;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <ucHeartbeat_message+0x1c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	701a      	strb	r2, [r3, #0]
	return HAL_CAN_AddTxMessage(&hcan, &heartbeat_msgTxHeader, heartbeat, &TxMailbox);
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <ucHeartbeat_message+0x20>)
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <ucHeartbeat_message+0x1c>)
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <ucHeartbeat_message+0x24>)
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <ucHeartbeat_message+0x28>)
 80001e6:	f000 fd4e 	bl	8000c86 <HAL_CAN_AddTxMessage>
 80001ea:	4603      	mov	r3, r0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	200000d0 	.word	0x200000d0
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	20000028 	.word	0x20000028

08000200 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4a08      	ldr	r2, [pc, #32]	; (800022c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800020c:	4293      	cmp	r3, r2
 800020e:	d109      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x24>
	  can_status += ucHeartbeat_message();
 8000210:	f7ff ffe0 	bl	80001d4 <ucHeartbeat_message>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4413      	add	r3, r2
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000222:	701a      	strb	r2, [r3, #0]
  }
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000050 	.word	0x20000050
 8000230:	200000dc 	.word	0x200000dc

08000234 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	can_status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800023e:	4a10      	ldr	r2, [pc, #64]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000240:	2100      	movs	r1, #0
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f000 fdef 	bl	8000e26 <HAL_CAN_GetRxMessage>
 8000248:	4603      	mov	r3, r0
 800024a:	461a      	mov	r2, r3
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800024e:	701a      	strb	r2, [r3, #0]
	if(RxHeader.StdId == 0x400){
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000258:	d00c      	beq.n	8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		;
	}
	else if(RxHeader.StdId == 0x350){
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8000262:	d107      	bne.n	8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>

		HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, RxData[0]);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	2120      	movs	r1, #32
 800026c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000270:	f001 fbec 	bl	8001a4c <HAL_GPIO_WritePin>


	}

}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	200000d4 	.word	0x200000d4
 8000280:	2000009c 	.word	0x2000009c
 8000284:	200000dc 	.word	0x200000dc

08000288 <vCan_messages_init>:

void vCan_messages_init(){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

	heartbeat_msgTxHeader.DLC = 0x00;
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <vCan_messages_init+0x34>)
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
	heartbeat_msgTxHeader.ExtId = 0;
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <vCan_messages_init+0x34>)
 8000294:	2200      	movs	r2, #0
 8000296:	605a      	str	r2, [r3, #4]
	heartbeat_msgTxHeader.IDE = CAN_ID_STD;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <vCan_messages_init+0x34>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
	heartbeat_msgTxHeader.RTR = CAN_RTR_DATA;
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <vCan_messages_init+0x34>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
	heartbeat_msgTxHeader.StdId = 0x400;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <vCan_messages_init+0x34>)
 80002a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002aa:	601a      	str	r2, [r3, #0]
	heartbeat_msgTxHeader.TransmitGlobalTime = DISABLE;
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <vCan_messages_init+0x34>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	751a      	strb	r2, [r3, #20]
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	200000b8 	.word	0x200000b8

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 fa70 	bl	80007a8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f82a 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f902 	bl	80004d4 <MX_GPIO_Init>
  MX_CAN_Init();
 80002d0:	f000 f886 	bl	80003e0 <MX_CAN_Init>
  MX_TIM16_Init();
 80002d4:	f000 f8d6 	bl	8000484 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  can_status += HAL_CAN_Start(&hcan);
 80002d8:	480e      	ldr	r0, [pc, #56]	; (8000314 <main+0x54>)
 80002da:	f000 fc90 	bl	8000bfe <HAL_CAN_Start>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <main+0x58>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <main+0x58>)
 80002ec:	701a      	strb	r2, [r3, #0]
  can_status += HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002ee:	2102      	movs	r1, #2
 80002f0:	4808      	ldr	r0, [pc, #32]	; (8000314 <main+0x54>)
 80002f2:	f000 feba 	bl	800106a <HAL_CAN_ActivateNotification>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0x58>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4413      	add	r3, r2
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <main+0x58>)
 8000304:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <main+0x5c>)
 8000308:	f003 f868 	bl	80033dc <HAL_TIM_Base_Start_IT>

  vCan_messages_init();
 800030c:	f7ff ffbc 	bl	8000288 <vCan_messages_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000310:	e7fe      	b.n	8000310 <main+0x50>
 8000312:	bf00      	nop
 8000314:	20000028 	.word	0x20000028
 8000318:	200000dc 	.word	0x200000dc
 800031c:	20000050 	.word	0x20000050

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b0a6      	sub	sp, #152	; 0x98
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800032a:	2228      	movs	r2, #40	; 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f003 faec 	bl	800390c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2258      	movs	r2, #88	; 0x58
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fade 	bl	800390c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000350:	2302      	movs	r3, #2
 8000352:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	2301      	movs	r3, #1
 8000356:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000358:	2310      	movs	r3, #16
 800035a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fb7c 	bl	8001a7c <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800038a:	f000 f8d3 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fbba 	bl	8002b24 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003b6:	f000 f8bd 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 80003ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80003be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003c0:	2300      	movs	r3, #0
 80003c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fd92 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003d2:	f000 f8af 	bl	8000534 <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3798      	adds	r7, #152	; 0x98
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <MX_CAN_Init+0x9c>)
 80003e8:	4a25      	ldr	r2, [pc, #148]	; (8000480 <MX_CAN_Init+0xa0>)
 80003ea:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80003ec:	4b23      	ldr	r3, [pc, #140]	; (800047c <MX_CAN_Init+0x9c>)
 80003ee:	2212      	movs	r2, #18
 80003f0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003f2:	4b22      	ldr	r3, [pc, #136]	; (800047c <MX_CAN_Init+0x9c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <MX_CAN_Init+0x9c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003fe:	4b1f      	ldr	r3, [pc, #124]	; (800047c <MX_CAN_Init+0x9c>)
 8000400:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000404:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_CAN_Init+0x9c>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_CAN_Init+0x9c>)
 800040e:	2200      	movs	r2, #0
 8000410:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_CAN_Init+0x9c>)
 8000414:	2200      	movs	r2, #0
 8000416:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_CAN_Init+0x9c>)
 800041a:	2200      	movs	r2, #0
 800041c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_CAN_Init+0x9c>)
 8000420:	2200      	movs	r2, #0
 8000422:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_CAN_Init+0x9c>)
 8000426:	2200      	movs	r2, #0
 8000428:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_CAN_Init+0x9c>)
 800042c:	2200      	movs	r2, #0
 800042e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000430:	4812      	ldr	r0, [pc, #72]	; (800047c <MX_CAN_Init+0x9c>)
 8000432:	f000 fa1f 	bl	8000874 <HAL_CAN_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800043c:	f000 f87a 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef can_filter_config;

  can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000440:	2301      	movs	r3, #1
 8000442:	623b      	str	r3, [r7, #32]
  can_filter_config.FilterBank = 10;
 8000444:	230a      	movs	r3, #10
 8000446:	617b      	str	r3, [r7, #20]
  can_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000448:	2300      	movs	r3, #0
 800044a:	613b      	str	r3, [r7, #16]
  can_filter_config.FilterIdHigh = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	603b      	str	r3, [r7, #0]
  can_filter_config.FilterIdLow = 0x0000;
 8000450:	2300      	movs	r3, #0
 8000452:	607b      	str	r3, [r7, #4]
  can_filter_config.FilterMaskIdHigh = 0;			// decides which bits in id should be compared
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  can_filter_config.FilterMaskIdLow = 0x0000;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000460:	2301      	movs	r3, #1
 8000462:	61fb      	str	r3, [r7, #28]
  can_filter_config.SlaveStartFilterBank = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &can_filter_config);
 8000468:	463b      	mov	r3, r7
 800046a:	4619      	mov	r1, r3
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <MX_CAN_Init+0x9c>)
 800046e:	f000 fafc 	bl	8000a6a <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000028 	.word	0x20000028
 8000480:	40006400 	.word	0x40006400

08000484 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_TIM16_Init+0x48>)
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <MX_TIM16_Init+0x4c>)
 800048c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6000-1;
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_TIM16_Init+0x48>)
 8000490:	f241 726f 	movw	r2, #5999	; 0x176f
 8000494:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <MX_TIM16_Init+0x48>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6000-1;
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_TIM16_Init+0x48>)
 800049e:	f241 726f 	movw	r2, #5999	; 0x176f
 80004a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_TIM16_Init+0x48>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_TIM16_Init+0x48>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_TIM16_Init+0x48>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_TIM16_Init+0x48>)
 80004b8:	f002 ff38 	bl	800332c <HAL_TIM_Base_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80004c2:	f000 f837 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000050 	.word	0x20000050
 80004d0:	40014400 	.word	0x40014400

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_GPIO_Init+0x5c>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_GPIO_Init+0x5c>)
 80004ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f2:	6153      	str	r3, [r2, #20]
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_GPIO_Init+0x5c>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2120      	movs	r1, #32
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f001 faa0 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTERNAL_LED_Pin */
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 800050c:	2320      	movs	r3, #32
 800050e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f001 f908 	bl	8001738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x44>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x44>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_MspInit+0x44>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <HAL_MspInit+0x44>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_MspInit+0x44>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a24      	ldr	r2, [pc, #144]	; (8000638 <HAL_CAN_MspInit+0xb0>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d141      	bne.n	800062e <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <HAL_CAN_MspInit+0xb4>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a23      	ldr	r2, [pc, #140]	; (800063c <HAL_CAN_MspInit+0xb4>)
 80005b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b4:	61d3      	str	r3, [r2, #28]
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <HAL_CAN_MspInit+0xb4>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_CAN_MspInit+0xb4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a1d      	ldr	r2, [pc, #116]	; (800063c <HAL_CAN_MspInit+0xb4>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_CAN_MspInit+0xb4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e8:	2303      	movs	r3, #3
 80005ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005ec:	2309      	movs	r3, #9
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f001 f89d 	bl	8001738 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2014      	movs	r0, #20
 8000604:	f001 f861 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000608:	2014      	movs	r0, #20
 800060a:	f001 f87a 	bl	8001702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2015      	movs	r0, #21
 8000614:	f001 f859 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000618:	2015      	movs	r0, #21
 800061a:	f001 f872 	bl	8001702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2016      	movs	r0, #22
 8000624:	f001 f851 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000628:	2016      	movs	r0, #22
 800062a:	f001 f86a 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <HAL_TIM_Base_MspInit+0x44>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d113      	bne.n	800067a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_TIM_Base_MspInit+0x48>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <HAL_TIM_Base_MspInit+0x48>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_TIM_Base_MspInit+0x48>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2019      	movs	r0, #25
 8000670:	f001 f82b 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000674:	2019      	movs	r0, #25
 8000676:	f001 f844 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40014400 	.word	0x40014400
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>

0800069e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>

080006aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f8ac 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006e6:	f000 fce6 	bl	80010b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028

080006f4 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <CAN_RX1_IRQHandler+0x10>)
 80006fa:	f000 fcdc 	bl	80010b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000028 	.word	0x20000028

08000708 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <CAN_SCE_IRQHandler+0x10>)
 800070e:	f000 fcd2 	bl	80010b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000028 	.word	0x20000028

0800071c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000722:	f002 fecb 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000050 	.word	0x20000050

08000730 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <SystemInit+0x20>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <SystemInit+0x20>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff ffea 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f003 f89f 	bl	80038c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff fd9b 	bl	80002c0 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800078c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000798:	0800396c 	.word	0x0800396c
  ldr r2, =_sbss
 800079c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a0:	200000ec 	.word	0x200000ec

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 ff7b 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 f808 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff febc 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x54>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 ff93 	bl	800171e <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 ff5b 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_InitTick+0x5c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008
 8000858:	200000e8 	.word	0x200000e8

0800085c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	200000e8 	.word	0x200000e8

08000874 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e0ed      	b.n	8000a62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fe78 	bl	8000588 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0201 	orr.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008a8:	f7ff ffd8 	bl	800085c <HAL_GetTick>
 80008ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008ae:	e012      	b.n	80008d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008b0:	f7ff ffd4 	bl	800085c <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	2b0a      	cmp	r3, #10
 80008bc:	d90b      	bls.n	80008d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2205      	movs	r2, #5
 80008ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e0c5      	b.n	8000a62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0e5      	beq.n	80008b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 0202 	bic.w	r2, r2, #2
 80008f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008f4:	f7ff ffb2 	bl	800085c <HAL_GetTick>
 80008f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008fa:	e012      	b.n	8000922 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008fc:	f7ff ffae 	bl	800085c <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b0a      	cmp	r3, #10
 8000908:	d90b      	bls.n	8000922 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2205      	movs	r2, #5
 800091a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e09f      	b.n	8000a62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1e5      	bne.n	80008fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7e1b      	ldrb	r3, [r3, #24]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d108      	bne.n	800094a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e007      	b.n	800095a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7e5b      	ldrb	r3, [r3, #25]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d108      	bne.n	8000974 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	e007      	b.n	8000984 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000982:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7e9b      	ldrb	r3, [r3, #26]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d108      	bne.n	800099e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0220 	orr.w	r2, r2, #32
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e007      	b.n	80009ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 0220 	bic.w	r2, r2, #32
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7edb      	ldrb	r3, [r3, #27]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d108      	bne.n	80009c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 0210 	bic.w	r2, r2, #16
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	e007      	b.n	80009d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f042 0210 	orr.w	r2, r2, #16
 80009d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7f1b      	ldrb	r3, [r3, #28]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d108      	bne.n	80009f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0208 	orr.w	r2, r2, #8
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	e007      	b.n	8000a02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 0208 	bic.w	r2, r2, #8
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7f5b      	ldrb	r3, [r3, #29]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d108      	bne.n	8000a1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f042 0204 	orr.w	r2, r2, #4
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e007      	b.n	8000a2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f022 0204 	bic.w	r2, r2, #4
 8000a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	ea42 0103 	orr.w	r1, r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b087      	sub	sp, #28
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a80:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a82:	7cfb      	ldrb	r3, [r7, #19]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d003      	beq.n	8000a90 <HAL_CAN_ConfigFilter+0x26>
 8000a88:	7cfb      	ldrb	r3, [r7, #19]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	f040 80aa 	bne.w	8000be4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a96:	f043 0201 	orr.w	r2, r3, #1
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f003 031f 	and.w	r3, r3, #31
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d123      	bne.n	8000b12 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000aec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3248      	adds	r2, #72	; 0x48
 8000af2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b08:	6979      	ldr	r1, [r7, #20]
 8000b0a:	3348      	adds	r3, #72	; 0x48
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	440b      	add	r3, r1
 8000b10:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d122      	bne.n	8000b60 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	431a      	orrs	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3248      	adds	r2, #72	; 0x48
 8000b40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b56:	6979      	ldr	r1, [r7, #20]
 8000b58:	3348      	adds	r3, #72	; 0x48
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d109      	bne.n	8000b7c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b7a:	e007      	b.n	8000b8c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ba6:	e007      	b.n	8000bb8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	6a1b      	ldr	r3, [r3, #32]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d107      	bne.n	8000bd0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bd6:	f023 0201 	bic.w	r2, r3, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e006      	b.n	8000bf2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
  }
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d12e      	bne.n	8000c70 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2202      	movs	r2, #2
 8000c16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0201 	bic.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c2a:	f7ff fe17 	bl	800085c <HAL_GetTick>
 8000c2e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c30:	e012      	b.n	8000c58 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c32:	f7ff fe13 	bl	800085c <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b0a      	cmp	r3, #10
 8000c3e:	d90b      	bls.n	8000c58 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2205      	movs	r2, #5
 8000c50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e012      	b.n	8000c7e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1e5      	bne.n	8000c32 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e006      	b.n	8000c7e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
  }
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b089      	sub	sp, #36	; 0x24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca4:	7ffb      	ldrb	r3, [r7, #31]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d003      	beq.n	8000cb2 <HAL_CAN_AddTxMessage+0x2c>
 8000caa:	7ffb      	ldrb	r3, [r7, #31]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	f040 80ad 	bne.w	8000e0c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10a      	bne.n	8000cd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d105      	bne.n	8000cd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f000 8095 	beq.w	8000dfc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	0e1b      	lsrs	r3, r3, #24
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	409a      	lsls	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10d      	bne.n	8000d0a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cf8:	68f9      	ldr	r1, [r7, #12]
 8000cfa:	6809      	ldr	r1, [r1, #0]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3318      	adds	r3, #24
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	440b      	add	r3, r1
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e00f      	b.n	8000d2a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d14:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d1e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3318      	adds	r3, #24
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	440b      	add	r3, r1
 8000d28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6819      	ldr	r1, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3318      	adds	r3, #24
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	440b      	add	r3, r1
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	7d1b      	ldrb	r3, [r3, #20]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d111      	bne.n	8000d6a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3318      	adds	r3, #24
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	4413      	add	r3, r2
 8000d52:	3304      	adds	r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	6811      	ldr	r1, [r2, #0]
 8000d5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3318      	adds	r3, #24
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	440b      	add	r3, r1
 8000d66:	3304      	adds	r3, #4
 8000d68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3307      	adds	r3, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	061a      	lsls	r2, r3, #24
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3306      	adds	r3, #6
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	041b      	lsls	r3, r3, #16
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3305      	adds	r3, #5
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	4313      	orrs	r3, r2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	3204      	adds	r2, #4
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	6811      	ldr	r1, [r2, #0]
 8000d92:	ea43 0200 	orr.w	r2, r3, r0
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000da0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3303      	adds	r3, #3
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	061a      	lsls	r2, r3, #24
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3302      	adds	r3, #2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	041b      	lsls	r3, r3, #16
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	6811      	ldr	r1, [r2, #0]
 8000dc8:	ea43 0200 	orr.w	r2, r3, r0
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	440b      	add	r3, r1
 8000dd2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000dd6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3318      	adds	r3, #24
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	4413      	add	r3, r2
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	f043 0201 	orr.w	r2, r3, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3318      	adds	r3, #24
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	440b      	add	r3, r1
 8000df6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e00e      	b.n	8000e1a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e006      	b.n	8000e1a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
  }
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e26:	b480      	push	{r7}
 8000e28:	b087      	sub	sp, #28
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d003      	beq.n	8000e4a <HAL_CAN_GetRxMessage+0x24>
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	f040 8103 	bne.w	8001050 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10e      	bne.n	8000e6e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d116      	bne.n	8000e8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e0f7      	b.n	800105e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d107      	bne.n	8000e8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e0e8      	b.n	800105e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	331b      	adds	r3, #27
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	4413      	add	r3, r2
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0204 	and.w	r2, r3, #4
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	331b      	adds	r3, #27
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	4413      	add	r3, r2
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0d5b      	lsrs	r3, r3, #21
 8000eba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	331b      	adds	r3, #27
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4413      	add	r3, r2
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	331b      	adds	r3, #27
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	4413      	add	r3, r2
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0202 	and.w	r2, r3, #2
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	331b      	adds	r3, #27
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4413      	add	r3, r2
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	e00b      	b.n	8000f2a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	331b      	adds	r3, #27
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 020f 	and.w	r2, r3, #15
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	331b      	adds	r3, #27
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4413      	add	r3, r2
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	331b      	adds	r3, #27
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4413      	add	r3, r2
 8000f64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	4413      	add	r3, r2
 8000f7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0a1a      	lsrs	r2, r3, #8
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4413      	add	r3, r2
 8000f94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	0c1a      	lsrs	r2, r3, #16
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4413      	add	r3, r2
 8000fae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0e1a      	lsrs	r2, r3, #24
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3303      	adds	r3, #3
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4413      	add	r3, r2
 8000fc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0a1a      	lsrs	r2, r3, #8
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3305      	adds	r3, #5
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0c1a      	lsrs	r2, r3, #16
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3306      	adds	r3, #6
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0e1a      	lsrs	r2, r3, #24
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3307      	adds	r3, #7
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	e007      	b.n	800104c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0220 	orr.w	r2, r2, #32
 800104a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	e006      	b.n	800105e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
  }
}
 800105e:	4618      	mov	r0, r3
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d002      	beq.n	8001088 <HAL_CAN_ActivateNotification+0x1e>
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d109      	bne.n	800109c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6959      	ldr	r1, [r3, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	e006      	b.n	80010aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
  }
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b08a      	sub	sp, #40	; 0x28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d07c      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d023      	beq.n	800114e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f983 	bl	8001424 <HAL_CAN_TxMailbox0CompleteCallback>
 800111e:	e016      	b.n	800114e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	e00c      	b.n	800114e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e002      	b.n	800114e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f989 	bl	8001460 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001154:	2b00      	cmp	r3, #0
 8001156:	d024      	beq.n	80011a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001160:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f963 	bl	8001438 <HAL_CAN_TxMailbox1CompleteCallback>
 8001172:	e016      	b.n	80011a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
 8001186:	e00c      	b.n	80011a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
 800119a:	e002      	b.n	80011a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f969 	bl	8001474 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d024      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f943 	bl	800144c <HAL_CAN_TxMailbox2CompleteCallback>
 80011c6:	e016      	b.n	80011f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
 80011da:	e00c      	b.n	80011f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	e002      	b.n	80011f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f949 	bl	8001488 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00c      	beq.n	800121a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001210:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2210      	movs	r2, #16
 8001218:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2208      	movs	r2, #8
 8001234:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f930 	bl	800149c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7fe ffed 	bl	8000234 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00c      	beq.n	800127e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001274:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2210      	movs	r2, #16
 800127c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2208      	movs	r2, #8
 8001298:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f912 	bl	80014c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f8f9 	bl	80014b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2210      	movs	r2, #16
 80012d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f8fc 	bl	80014d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2208      	movs	r2, #8
 80012fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f8f5 	bl	80014ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d07b      	beq.n	8001404 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d072      	beq.n	80013fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001370:	2b00      	cmp	r3, #0
 8001372:	d043      	beq.n	80013fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03e      	beq.n	80013fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001384:	2b60      	cmp	r3, #96	; 0x60
 8001386:	d02b      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x32a>
 8001388:	2b60      	cmp	r3, #96	; 0x60
 800138a:	d82e      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 800138c:	2b50      	cmp	r3, #80	; 0x50
 800138e:	d022      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x320>
 8001390:	2b50      	cmp	r3, #80	; 0x50
 8001392:	d82a      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 8001394:	2b40      	cmp	r3, #64	; 0x40
 8001396:	d019      	beq.n	80013cc <HAL_CAN_IRQHandler+0x316>
 8001398:	2b40      	cmp	r3, #64	; 0x40
 800139a:	d826      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 800139c:	2b30      	cmp	r3, #48	; 0x30
 800139e:	d010      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x30c>
 80013a0:	2b30      	cmp	r3, #48	; 0x30
 80013a2:	d822      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d002      	beq.n	80013ae <HAL_CAN_IRQHandler+0x2f8>
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d005      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013ac:	e01d      	b.n	80013ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013b6:	e019      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013c0:	e014      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013ca:	e00f      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013d4:	e00a      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013de:	e005      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013e8:	e000      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            break;
 80013ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2204      	movs	r2, #4
 8001402:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f872 	bl	8001500 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff29 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff3e 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff31 	bl	8001578 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	e160      	b.n	8001a0a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8152 	beq.w	8001a04 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d005      	beq.n	8001778 <HAL_GPIO_Init+0x40>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d017      	beq.n	8001816 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d123      	bne.n	800186a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	6939      	ldr	r1, [r7, #16]
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80ac 	beq.w	8001a04 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a5d      	ldr	r2, [pc, #372]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b5b      	ldr	r3, [pc, #364]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c4:	4a59      	ldr	r2, [pc, #356]	; (8001a2c <HAL_GPIO_Init+0x2f4>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ee:	d025      	beq.n	800193c <HAL_GPIO_Init+0x204>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x2f8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d01f      	beq.n	8001938 <HAL_GPIO_Init+0x200>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_GPIO_Init+0x2fc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d019      	beq.n	8001934 <HAL_GPIO_Init+0x1fc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_GPIO_Init+0x300>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_GPIO_Init+0x1f8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x304>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00d      	beq.n	800192c <HAL_GPIO_Init+0x1f4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_GPIO_Init+0x308>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d007      	beq.n	8001928 <HAL_GPIO_Init+0x1f0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_GPIO_Init+0x30c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_GPIO_Init+0x1ec>
 8001920:	2306      	movs	r3, #6
 8001922:	e00c      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001924:	2307      	movs	r3, #7
 8001926:	e00a      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001928:	2305      	movs	r3, #5
 800192a:	e008      	b.n	800193e <HAL_GPIO_Init+0x206>
 800192c:	2304      	movs	r3, #4
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001930:	2303      	movs	r3, #3
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x206>
 800193c:	2300      	movs	r3, #0
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194e:	4937      	ldr	r1, [pc, #220]	; (8001a2c <HAL_GPIO_Init+0x2f4>)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195c:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_GPIO_Init+0x310>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_GPIO_Init+0x310>)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_GPIO_Init+0x310>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d4:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_GPIO_Init+0x310>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f47f ae97 	bne.w	8001748 <HAL_GPIO_Init+0x10>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000800 	.word	0x48000800
 8001a38:	48000c00 	.word	0x48000c00
 8001a3c:	48001000 	.word	0x48001000
 8001a40:	48001400 	.word	0x48001400
 8001a44:	48001800 	.word	0x48001800
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f001 b83a 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 816f 	beq.w	8001d96 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ab8:	4bb5      	ldr	r3, [pc, #724]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac4:	4bb2      	ldr	r3, [pc, #712]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d15c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x10e>
 8001ad0:	4baf      	ldr	r3, [pc, #700]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d155      	bne.n	8001b8a <HAL_RCC_OscConfig+0x10e>
 8001ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0x94>
 8001b0a:	4ba1      	ldr	r3, [pc, #644]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e015      	b.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b2c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b38:	4b95      	ldr	r3, [pc, #596]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b40:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b44:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 8111 	beq.w	8001d94 <HAL_RCC_OscConfig+0x318>
 8001b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 8108 	bne.w	8001d94 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f000 bfc6 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x12e>
 8001b9c:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a7b      	ldr	r2, [pc, #492]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e036      	b.n	8001c18 <HAL_RCC_OscConfig+0x19c>
 8001baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x158>
 8001bba:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a74      	ldr	r2, [pc, #464]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a71      	ldr	r2, [pc, #452]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e021      	b.n	8001c18 <HAL_RCC_OscConfig+0x19c>
 8001bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x184>
 8001be6:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a69      	ldr	r2, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a66      	ldr	r2, [pc, #408]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0x19c>
 8001c00:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a62      	ldr	r2, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5f      	ldr	r2, [pc, #380]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d059      	beq.n	8001cdc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fe18 	bl	800085c <HAL_GetTick>
 8001c2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c32:	f7fe fe13 	bl	800085c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d902      	bls.n	8001c48 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	f000 bf67 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
 8001c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_OscConfig+0x1fe>
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x22a>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c96:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001caa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001cae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001cba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ab      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1b6>
 8001cda:	e05c      	b.n	8001d96 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fdbe 	bl	800085c <HAL_GetTick>
 8001ce0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce6:	f7fe fdb9 	bl	800085c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d902      	bls.n	8001cfc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f000 bf0d 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d00:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2b2>
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x2de>
 8001d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_RCC_OscConfig+0x314>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ab      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x26a>
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_OscConfig+0x31a>
 8001d90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 817f 	beq.w	80020aa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dac:	4ba7      	ldr	r3, [pc, #668]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001db8:	4ba4      	ldr	r3, [pc, #656]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d173      	bne.n	8001eac <HAL_RCC_OscConfig+0x430>
 8001dc4:	4ba1      	ldr	r3, [pc, #644]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd0:	d16c      	bne.n	8001eac <HAL_RCC_OscConfig+0x430>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001de4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d102      	bne.n	8001e02 <HAL_RCC_OscConfig+0x386>
 8001dfc:	4b93      	ldr	r3, [pc, #588]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	e013      	b.n	8001e2a <HAL_RCC_OscConfig+0x3ae>
 8001e02:	2302      	movs	r3, #2
 8001e04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e30:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3f6>
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d002      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f000 be52 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	21f8      	movs	r1, #248	; 0xf8
 8001e88:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e90:	fa91 f1a1 	rbit	r1, r1
 8001e94:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e98:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e9c:	fab1 f181 	clz	r1, r1
 8001ea0:	b2c9      	uxtb	r1, r1
 8001ea2:	408b      	lsls	r3, r1
 8001ea4:	4969      	ldr	r1, [pc, #420]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e0fe      	b.n	80020aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8088 	beq.w	8001fce <HAL_RCC_OscConfig+0x552>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ed0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fcb7 	bl	800085c <HAL_GetTick>
 8001eee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fcb2 	bl	800085c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d902      	bls.n	8001f0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	f000 be06 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4be>
 8001f34:	4b45      	ldr	r3, [pc, #276]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	e013      	b.n	8001f62 <HAL_RCC_OscConfig+0x4e6>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f52:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2202      	movs	r2, #2
 8001f64:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f6c:	fa92 f2a2 	rbit	r2, r2
 8001f70:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f002 021f 	and.w	r2, r2, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0af      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	21f8      	movs	r1, #248	; 0xf8
 8001faa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001fb2:	fa91 f1a1 	rbit	r1, r1
 8001fb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001fba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fbe:	fab1 f181 	clz	r1, r1
 8001fc2:	b2c9      	uxtb	r1, r1
 8001fc4:	408b      	lsls	r3, r1
 8001fc6:	4921      	ldr	r1, [pc, #132]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e06d      	b.n	80020aa <HAL_RCC_OscConfig+0x62e>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fc2f 	bl	800085c <HAL_GetTick>
 8001ffe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002004:	f7fe fc2a 	bl	800085c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d902      	bls.n	800201a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	f000 bd7e 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800202c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0x5d4>
 8002044:	4b01      	ldr	r3, [pc, #4]	; (800204c <HAL_RCC_OscConfig+0x5d0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	e016      	b.n	8002078 <HAL_RCC_OscConfig+0x5fc>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002062:	2302      	movs	r3, #2
 8002064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002068:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002074:	4bbf      	ldr	r3, [pc, #764]	; (8002374 <HAL_RCC_OscConfig+0x8f8>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2202      	movs	r2, #2
 800207a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800207e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800208a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800208e:	fab2 f282 	clz	r2, r2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	f042 0220 	orr.w	r2, r2, #32
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ac      	bne.n	8002004 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8113 	beq.w	80022e6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d07c      	beq.n	80021ca <HAL_RCC_OscConfig+0x74e>
 80020d0:	2301      	movs	r3, #1
 80020d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80020e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	4ba2      	ldr	r3, [pc, #648]	; (8002378 <HAL_RCC_OscConfig+0x8fc>)
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7fe fbaf 	bl	800085c <HAL_GetTick>
 80020fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002104:	f7fe fbaa 	bl	800085c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d902      	bls.n	800211a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	f000 bcfe 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800213a:	2202      	movs	r2, #2
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa93 f2a3 	rbit	r2, r3
 800214c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002178:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	4b7e      	ldr	r3, [pc, #504]	; (8002374 <HAL_RCC_OscConfig+0x8f8>)
 800217c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002186:	2102      	movs	r1, #2
 8002188:	6019      	str	r1, [r3, #0]
 800218a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f1a3 	rbit	r1, r3
 8002198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021a0:	6019      	str	r1, [r3, #0]
  return result;
 80021a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d09d      	beq.n	8002104 <HAL_RCC_OscConfig+0x688>
 80021c8:	e08d      	b.n	80022e6 <HAL_RCC_OscConfig+0x86a>
 80021ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021ec:	601a      	str	r2, [r3, #0]
  return result;
 80021ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x8fc>)
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	461a      	mov	r2, r3
 8002208:	2300      	movs	r3, #0
 800220a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7fe fb26 	bl	800085c <HAL_GetTick>
 8002210:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe fb21 	bl	800085c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d902      	bls.n	800222c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	f000 bc75 	b.w	8002b16 <HAL_RCC_OscConfig+0x109a>
 800222c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002230:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002258:	2202      	movs	r2, #2
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	fa93 f2a3 	rbit	r2, r3
 800226a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002278:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002284:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f2a3 	rbit	r2, r3
 800228e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002292:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002296:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x8f8>)
 800229a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800229c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022a4:	2102      	movs	r1, #2
 80022a6:	6019      	str	r1, [r3, #0]
 80022a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f1a3 	rbit	r1, r3
 80022b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022be:	6019      	str	r1, [r3, #0]
  return result;
 80022c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d197      	bne.n	8002216 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 81a5 	beq.w	8002646 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_RCC_OscConfig+0x8f8>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d116      	bne.n	800233c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_OscConfig+0x8f8>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <HAL_RCC_OscConfig+0x8f8>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_RCC_OscConfig+0x8f8>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002334:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCC_OscConfig+0x900>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d121      	bne.n	800238c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_RCC_OscConfig+0x900>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x900>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002352:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002354:	f7fe fa82 	bl	800085c <HAL_GetTick>
 8002358:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	e010      	b.n	8002380 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7fe fa7d 	bl	800085c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d908      	bls.n	8002380 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e3d1      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	10908120 	.word	0x10908120
 800237c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_RCC_OscConfig+0xb3c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0e8      	beq.n	800235e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002390:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x92e>
 800239c:	4b87      	ldr	r3, [pc, #540]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a86      	ldr	r2, [pc, #536]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	e035      	b.n	8002416 <HAL_RCC_OscConfig+0x99a>
 80023aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x958>
 80023ba:	4b80      	ldr	r3, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a7f      	ldr	r2, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a7c      	ldr	r2, [pc, #496]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e020      	b.n	8002416 <HAL_RCC_OscConfig+0x99a>
 80023d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x982>
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a71      	ldr	r2, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x99a>
 80023fe:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b6c      	ldr	r3, [pc, #432]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a6b      	ldr	r2, [pc, #428]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8081 	beq.w	800252a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe fa18 	bl	800085c <HAL_GetTick>
 800242c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00b      	b.n	800244a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fa13 	bl	800085c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e365      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
 800244a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002468:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002490:	601a      	str	r2, [r3, #0]
  return result;
 8002492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002496:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800249a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d102      	bne.n	80024b6 <HAL_RCC_OscConfig+0xa3a>
 80024b0:	4b42      	ldr	r3, [pc, #264]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	e013      	b.n	80024de <HAL_RCC_OscConfig+0xa62>
 80024b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024be:	2202      	movs	r2, #2
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024e6:	2102      	movs	r1, #2
 80024e8:	6011      	str	r1, [r2, #0]
 80024ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024fc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002500:	6011      	str	r1, [r2, #0]
  return result;
 8002502:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002506:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d084      	beq.n	8002432 <HAL_RCC_OscConfig+0x9b6>
 8002528:	e083      	b.n	8002632 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe f997 	bl	800085c <HAL_GetTick>
 800252e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe f992 	bl	800085c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e2e4      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
 800254c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002550:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002554:	2202      	movs	r2, #2
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002574:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002578:	2202      	movs	r2, #2
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002580:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	fa93 f2a3 	rbit	r2, r3
 800258a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002592:	601a      	str	r2, [r3, #0]
  return result;
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800259c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0xb44>
 80025b2:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_RCC_OscConfig+0xb40>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	e017      	b.n	80025e8 <HAL_RCC_OscConfig+0xb6c>
 80025b8:	40007000 	.word	0x40007000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	4bb3      	ldr	r3, [pc, #716]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025f0:	2102      	movs	r1, #2
 80025f2:	6011      	str	r1, [r2, #0]
 80025f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	fa92 f1a2 	rbit	r1, r2
 8002602:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002606:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800260a:	6011      	str	r1, [r2, #0]
  return result;
 800260c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002610:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	fab2 f282 	clz	r2, r2
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f002 021f 	and.w	r2, r2, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f202 	lsl.w	r2, r1, r2
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d180      	bne.n	8002534 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002632:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b9e      	ldr	r3, [pc, #632]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a9d      	ldr	r2, [pc, #628]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 825e 	beq.w	8002b14 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002658:	4b96      	ldr	r3, [pc, #600]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	f000 821f 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b02      	cmp	r3, #2
 8002674:	f040 8170 	bne.w	8002958 <HAL_RCC_OscConfig+0xedc>
 8002678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002698:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800269c:	601a      	str	r2, [r3, #0]
  return result;
 800269e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026a6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe f8cd 	bl	800085c <HAL_GetTick>
 80026c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c6:	e009      	b.n	80026dc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe f8c8 	bl	800085c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e21c      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
 80026dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002700:	601a      	str	r2, [r3, #0]
  return result;
 8002702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002706:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800270a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d102      	bne.n	8002726 <HAL_RCC_OscConfig+0xcaa>
 8002720:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e027      	b.n	8002776 <HAL_RCC_OscConfig+0xcfa>
 8002726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800272e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002738:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002746:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800277a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800277e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002782:	6011      	str	r1, [r2, #0]
 8002784:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002788:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	fa92 f1a2 	rbit	r1, r2
 8002792:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002796:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800279a:	6011      	str	r1, [r2, #0]
  return result;
 800279c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027a0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	fab2 f282 	clz	r2, r2
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	f042 0220 	orr.w	r2, r2, #32
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	f002 021f 	and.w	r2, r2, #31
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d182      	bne.n	80026c8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f023 020f 	bic.w	r2, r3, #15
 80027ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	4937      	ldr	r1, [pc, #220]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80027e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a19      	ldr	r1, [r3, #32]
 80027f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	492d      	ldr	r1, [pc, #180]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002808:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800280c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002816:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002824:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002828:	601a      	str	r2, [r3, #0]
  return result;
 800282a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002832:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	461a      	mov	r2, r3
 8002846:	2301      	movs	r3, #1
 8002848:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe f807 	bl	800085c <HAL_GetTick>
 800284e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002852:	e009      	b.n	8002868 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe f802 	bl	800085c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e156      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
 8002868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002888:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800288c:	601a      	str	r2, [r3, #0]
  return result;
 800288e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002892:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0xe3c>
 80028ac:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <HAL_RCC_OscConfig+0xe38>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e02a      	b.n	8002908 <HAL_RCC_OscConfig+0xe8c>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fa93 f2a3 	rbit	r2, r3
 80028d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <HAL_RCC_OscConfig+0x10a4>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800290c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800291a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	fa92 f1a2 	rbit	r1, r2
 8002924:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002928:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800292c:	6011      	str	r1, [r2, #0]
  return result;
 800292e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002932:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0220 	orr.w	r2, r2, #32
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	f43f af7f 	beq.w	8002854 <HAL_RCC_OscConfig+0xdd8>
 8002956:	e0dd      	b.n	8002b14 <HAL_RCC_OscConfig+0x1098>
 8002958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002978:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800297c:	601a      	str	r2, [r3, #0]
  return result;
 800297e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002982:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002986:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002992:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	2300      	movs	r3, #0
 800299c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fd ff5d 	bl	800085c <HAL_GetTick>
 80029a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a6:	e009      	b.n	80029bc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fd ff58 	bl	800085c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0ac      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
 80029bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029e0:	601a      	str	r2, [r3, #0]
  return result;
 80029e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_OscConfig+0xf8a>
 8002a00:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_OscConfig+0x10a4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	e027      	b.n	8002a56 <HAL_RCC_OscConfig+0xfda>
 8002a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a26:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f2a3 	rbit	r2, r3
 8002a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <HAL_RCC_OscConfig+0x10a4>)
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a62:	6011      	str	r1, [r2, #0]
 8002a64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	fa92 f1a2 	rbit	r1, r2
 8002a72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a76:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a7a:	6011      	str	r1, [r2, #0]
  return result;
 8002a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a80:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d182      	bne.n	80029a8 <HAL_RCC_OscConfig+0xf2c>
 8002aa2:	e037      	b.n	8002b14 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e02e      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x10a4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_RCC_OscConfig+0x10a4>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ac8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002acc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d117      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ae0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ae4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afc:	f003 020f 	and.w	r2, r3, #15
 8002b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b09e      	sub	sp, #120	; 0x78
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e162      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b90      	ldr	r3, [pc, #576]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	498b      	ldr	r1, [pc, #556]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e14a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b82      	ldr	r3, [pc, #520]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	497f      	ldr	r1, [pc, #508]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80dc 	beq.w	8002d50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d13c      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xf6>
 8002ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_ClockConfig+0xa6>
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e00f      	b.n	8002bea <HAL_RCC_ClockConfig+0xc6>
 8002bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bee:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bf2:	fa92 f2a2 	rbit	r2, r2
 8002bf6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f042 0220 	orr.w	r2, r2, #32
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d17b      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0f3      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d13c      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x178>
 8002c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x128>
 8002c46:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e00f      	b.n	8002c6c <HAL_RCC_ClockConfig+0x148>
 8002c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c68:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c70:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c74:	fa92 f2a2 	rbit	r2, r2
 8002c78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c7c:	fab2 f282 	clz	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d13a      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b2      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2de>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x1a0>
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e00d      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x1bc>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	61ba      	str	r2, [r7, #24]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	fa92 f2a2 	rbit	r2, r2
 8002cea:	617a      	str	r2, [r7, #20]
  return result;
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	fab2 f282 	clz	r2, r2
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f042 0220 	orr.w	r2, r2, #32
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f002 021f 	and.w	r2, r2, #31
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e079      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	491a      	ldr	r1, [pc, #104]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d20:	f7fd fd9c 	bl	800085c <HAL_GetTick>
 8002d24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fd fd98 	bl	800085c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e061      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_ClockConfig+0x260>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d214      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	4906      	ldr	r1, [pc, #24]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <HAL_RCC_ClockConfig+0x25c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e040      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2de>
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d94:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCC_ClockConfig+0x2e8>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	491a      	ldr	r1, [pc, #104]	; (8002e0c <HAL_RCC_ClockConfig+0x2e8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HAL_RCC_ClockConfig+0x2e8>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4912      	ldr	r1, [pc, #72]	; (8002e0c <HAL_RCC_ClockConfig+0x2e8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dc6:	f000 f829 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dca:	4601      	mov	r1, r0
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <HAL_RCC_ClockConfig+0x2e8>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd4:	22f0      	movs	r2, #240	; 0xf0
 8002dd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	fa92 f2a2 	rbit	r2, r2
 8002dde:	60fa      	str	r2, [r7, #12]
  return result;
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	fab2 f282 	clz	r2, r2
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	40d3      	lsrs	r3, r2
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x2ec>)
 8002dec:	5cd3      	ldrb	r3, [r2, r3]
 8002dee:	fa21 f303 	lsr.w	r3, r1, r3
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_RCC_ClockConfig+0x2f0>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_RCC_ClockConfig+0x2f4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fcea 	bl	80007d4 <HAL_InitTick>
  
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3778      	adds	r7, #120	; 0x78
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08003934 	.word	0x08003934
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b08b      	sub	sp, #44	; 0x2c
 8002e20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e36:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x30>
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x36>
 8002e4a:	e03f      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e4e:	623b      	str	r3, [r7, #32]
      break;
 8002e50:	e03f      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	607a      	str	r2, [r7, #4]
  return result;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	40d3      	lsrs	r3, r2
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	220f      	movs	r2, #15
 8002e80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	fa92 f2a2 	rbit	r2, r2
 8002e88:	60fa      	str	r2, [r7, #12]
  return result;
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	40d3      	lsrs	r3, r2
 8002e94:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ea4:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	e007      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fb02 f303 	mul.w	r3, r2, r3
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	623b      	str	r3, [r7, #32]
      break;
 8002eca:	e002      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ece:	623b      	str	r3, [r7, #32]
      break;
 8002ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	372c      	adds	r7, #44	; 0x2c
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	007a1200 	.word	0x007a1200
 8002ee8:	08003944 	.word	0x08003944
 8002eec:	08003954 	.word	0x08003954

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b092      	sub	sp, #72	; 0x48
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80d4 	beq.w	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f14:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10e      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	61d3      	str	r3, [r2, #28]
 8002f2c:	4b48      	ldr	r3, [pc, #288]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b45      	ldr	r3, [pc, #276]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a41      	ldr	r2, [pc, #260]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fd fc81 	bl	800085c <HAL_GetTick>
 8002f5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fd fc7d 	bl	800085c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1d6      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8084 	beq.w	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d07c      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2300      	movs	r3, #0
 8002fec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04b      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fd fc2d 	bl	800085c <HAL_GetTick>
 8003002:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fd fc29 	bl	800085c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e180      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800301c:	2302      	movs	r3, #2
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	2302      	movs	r3, #2
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	61fb      	str	r3, [r7, #28]
  return result;
 8003034:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d108      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800304a:	4b01      	ldr	r3, [pc, #4]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	e00d      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
 8003058:	10908100 	.word	0x10908100
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	4b9a      	ldr	r3, [pc, #616]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2202      	movs	r2, #2
 800306e:	613a      	str	r2, [r7, #16]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	fa92 f2a2 	rbit	r2, r2
 8003076:	60fa      	str	r2, [r7, #12]
  return result;
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	fab2 f282 	clz	r2, r2
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f002 021f 	and.w	r2, r2, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0b7      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003096:	4b8f      	ldr	r3, [pc, #572]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	498c      	ldr	r1, [pc, #560]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4a87      	ldr	r2, [pc, #540]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c8:	4b82      	ldr	r3, [pc, #520]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f023 0203 	bic.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	497f      	ldr	r1, [pc, #508]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030e6:	4b7b      	ldr	r3, [pc, #492]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4978      	ldr	r1, [pc, #480]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003104:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	4970      	ldr	r1, [pc, #448]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003122:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f023 0210 	bic.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4969      	ldr	r1, [pc, #420]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003140:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	4961      	ldr	r1, [pc, #388]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800315e:	4b5d      	ldr	r3, [pc, #372]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f023 0220 	bic.w	r2, r3, #32
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	495a      	ldr	r1, [pc, #360]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800317c:	4b55      	ldr	r3, [pc, #340]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	4952      	ldr	r1, [pc, #328]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800319a:	4b4e      	ldr	r3, [pc, #312]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	494b      	ldr	r1, [pc, #300]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b8:	4b46      	ldr	r3, [pc, #280]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	4943      	ldr	r1, [pc, #268]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031d6:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	493c      	ldr	r1, [pc, #240]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031f4:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	4934      	ldr	r1, [pc, #208]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003212:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	492d      	ldr	r1, [pc, #180]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	4925      	ldr	r1, [pc, #148]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800324e:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	491e      	ldr	r1, [pc, #120]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	490f      	ldr	r1, [pc, #60]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80032c6:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	e002      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032da:	4913      	ldr	r1, [pc, #76]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	490b      	ldr	r1, [pc, #44]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	4904      	ldr	r1, [pc, #16]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3748      	adds	r7, #72	; 0x48
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e049      	b.n	80033d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd f974 	bl	8000640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 f9ee 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04f      	b.n	8003494 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x76>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d018      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x76>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x76>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x76>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_TIM_Base_Start_IT+0xd0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x76>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_Base_Start_IT+0x76>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d115      	bne.n	800347e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800345a:	4013      	ands	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d015      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0xb4>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346a:	d011      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	e008      	b.n	8003490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e000      	b.n	8003492 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003490:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40013400 	.word	0x40013400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40015000 	.word	0x40015000
 80034b8:	00010007 	.word	0x00010007

080034bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0202 	mvn.w	r2, #2
 80034e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f905 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8f7 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f908 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0204 	mvn.w	r2, #4
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8db 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8cd 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8de 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0208 	mvn.w	r2, #8
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2204      	movs	r2, #4
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8b1 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8a3 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f8b4 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2208      	movs	r2, #8
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f887 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f879 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f88a 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fc fde0 	bl	8000200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f918 	bl	800389c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367a:	d10e      	bne.n	800369a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d107      	bne.n	800369a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f90b 	bl	80038b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d10e      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f838 	bl	8003736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d10e      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f06f 0220 	mvn.w	r2, #32
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8cb 	bl	8003888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a42      	ldr	r2, [pc, #264]	; (8003868 <TIM_Base_SetConfig+0x11c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d00f      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3f      	ldr	r2, [pc, #252]	; (800386c <TIM_Base_SetConfig+0x120>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00b      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a3e      	ldr	r2, [pc, #248]	; (8003870 <TIM_Base_SetConfig+0x124>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a3d      	ldr	r2, [pc, #244]	; (8003874 <TIM_Base_SetConfig+0x128>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3c      	ldr	r2, [pc, #240]	; (8003878 <TIM_Base_SetConfig+0x12c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a31      	ldr	r2, [pc, #196]	; (8003868 <TIM_Base_SetConfig+0x11c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01f      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d01b      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2e      	ldr	r2, [pc, #184]	; (800386c <TIM_Base_SetConfig+0x120>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d017      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <TIM_Base_SetConfig+0x124>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2c      	ldr	r2, [pc, #176]	; (8003874 <TIM_Base_SetConfig+0x128>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00f      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <TIM_Base_SetConfig+0x130>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <TIM_Base_SetConfig+0x134>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <TIM_Base_SetConfig+0x138>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_Base_SetConfig+0x9a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a25      	ldr	r2, [pc, #148]	; (8003878 <TIM_Base_SetConfig+0x12c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d108      	bne.n	80037f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <TIM_Base_SetConfig+0x11c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <TIM_Base_SetConfig+0x100>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <TIM_Base_SetConfig+0x128>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00f      	beq.n	800384c <TIM_Base_SetConfig+0x100>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <TIM_Base_SetConfig+0x130>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0x100>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <TIM_Base_SetConfig+0x134>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0x100>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a11      	ldr	r2, [pc, #68]	; (8003884 <TIM_Base_SetConfig+0x138>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0x100>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <TIM_Base_SetConfig+0x12c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d103      	bne.n	8003854 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	615a      	str	r2, [r3, #20]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40013400 	.word	0x40013400
 8003878:	40015000 	.word	0x40015000
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800

08003888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <__libc_init_array>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4d0d      	ldr	r5, [pc, #52]	; (80038fc <__libc_init_array+0x38>)
 80038c8:	4c0d      	ldr	r4, [pc, #52]	; (8003900 <__libc_init_array+0x3c>)
 80038ca:	1b64      	subs	r4, r4, r5
 80038cc:	10a4      	asrs	r4, r4, #2
 80038ce:	2600      	movs	r6, #0
 80038d0:	42a6      	cmp	r6, r4
 80038d2:	d109      	bne.n	80038e8 <__libc_init_array+0x24>
 80038d4:	4d0b      	ldr	r5, [pc, #44]	; (8003904 <__libc_init_array+0x40>)
 80038d6:	4c0c      	ldr	r4, [pc, #48]	; (8003908 <__libc_init_array+0x44>)
 80038d8:	f000 f820 	bl	800391c <_init>
 80038dc:	1b64      	subs	r4, r4, r5
 80038de:	10a4      	asrs	r4, r4, #2
 80038e0:	2600      	movs	r6, #0
 80038e2:	42a6      	cmp	r6, r4
 80038e4:	d105      	bne.n	80038f2 <__libc_init_array+0x2e>
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ec:	4798      	blx	r3
 80038ee:	3601      	adds	r6, #1
 80038f0:	e7ee      	b.n	80038d0 <__libc_init_array+0xc>
 80038f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f6:	4798      	blx	r3
 80038f8:	3601      	adds	r6, #1
 80038fa:	e7f2      	b.n	80038e2 <__libc_init_array+0x1e>
 80038fc:	08003964 	.word	0x08003964
 8003900:	08003964 	.word	0x08003964
 8003904:	08003964 	.word	0x08003964
 8003908:	08003968 	.word	0x08003968

0800390c <memset>:
 800390c:	4402      	add	r2, r0
 800390e:	4603      	mov	r3, r0
 8003910:	4293      	cmp	r3, r2
 8003912:	d100      	bne.n	8003916 <memset+0xa>
 8003914:	4770      	bx	lr
 8003916:	f803 1b01 	strb.w	r1, [r3], #1
 800391a:	e7f9      	b.n	8003910 <memset+0x4>

0800391c <_init>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr

08003928 <_fini>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	bf00      	nop
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr
