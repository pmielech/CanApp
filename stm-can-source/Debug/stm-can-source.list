
stm-can-source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da8  08002da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002da8  08002da8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002da8  08002da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000094  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000614a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012d6  00000000  00000000  00026186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00027460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004b8  00000000  00000000  000279b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e83b  00000000  00000000  00027e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000063b6  00000000  00000000  000466a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9693  00000000  00000000  0004ca59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001060ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001420  00000000  00000000  0010613c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002d60 	.word	0x08002d60

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002d60 	.word	0x08002d60

080001d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t count = 0;
uint8_t can_status = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	can_status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001dc:	4b09      	ldr	r3, [pc, #36]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80001de:	4a0a      	ldr	r2, [pc, #40]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 fd43 	bl	8000c6e <HAL_CAN_GetRxMessage>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80001ee:	701a      	strb	r2, [r3, #0]
	count++;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80001fa:	701a      	strb	r2, [r3, #0]


}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000090 	.word	0x20000090
 8000208:	20000068 	.word	0x20000068
 800020c:	20000099 	.word	0x20000099
 8000210:	20000098 	.word	0x20000098

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 f9ea 	bl	80005f0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f830 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f8c4 	bl	80003ac <MX_GPIO_Init>
  MX_CAN_Init();
 8000224:	f000 f870 	bl	8000308 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000228:	4811      	ldr	r0, [pc, #68]	; (8000270 <main+0x5c>)
 800022a:	f000 fc0c 	bl	8000a46 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800022e:	2102      	movs	r1, #2
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <main+0x5c>)
 8000232:	f000 fe3e 	bl	8000eb2 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 0x1;
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <main+0x60>)
 8000238:	2201      	movs	r2, #1
 800023a:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <main+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <main+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <main+0x60>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x60>)
 8000250:	f240 1203 	movw	r2, #259	; 0x103
 8000254:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <main+0x60>)
 8000258:	2200      	movs	r2, #0
 800025a:	751a      	strb	r2, [r3, #20]


  TxData[0] = 0xf3;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <main+0x64>)
 800025e:	22f3      	movs	r2, #243	; 0xf3
 8000260:	701a      	strb	r2, [r3, #0]
  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0x68>)
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <main+0x64>)
 8000266:	4903      	ldr	r1, [pc, #12]	; (8000274 <main+0x60>)
 8000268:	4801      	ldr	r0, [pc, #4]	; (8000270 <main+0x5c>)
 800026a:	f000 fc30 	bl	8000ace <HAL_CAN_AddTxMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	e7fe      	b.n	800026e <main+0x5a>
 8000270:	20000028 	.word	0x20000028
 8000274:	20000050 	.word	0x20000050
 8000278:	20000088 	.word	0x20000088
 800027c:	20000084 	.word	0x20000084

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fd5e 	bl	8002d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2310      	movs	r3, #16
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fae4 	bl	8001894 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002d2:	f000 f883 	bl	80003dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2302      	movs	r3, #2
 80002dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2102      	movs	r1, #2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f002 fb23 	bl	800293c <HAL_RCC_ClockConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002fc:	f000 f86e 	bl	80003dc <Error_Handler>
  }
}
 8000300:	bf00      	nop
 8000302:	3740      	adds	r7, #64	; 0x40
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000310:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <MX_CAN_Init+0xa0>)
 8000312:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000314:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000316:	2212      	movs	r2, #18
 8000318:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <MX_CAN_Init+0x9c>)
 800031c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000320:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <MX_CAN_Init+0x9c>)
 800032a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800032e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000336:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_CAN_Init+0x9c>)
 800033e:	2200      	movs	r2, #0
 8000340:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000344:	2200      	movs	r2, #0
 8000346:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_CAN_Init+0x9c>)
 800034a:	2200      	movs	r2, #0
 800034c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000350:	2200      	movs	r2, #0
 8000352:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000356:	2200      	movs	r2, #0
 8000358:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800035a:	4812      	ldr	r0, [pc, #72]	; (80003a4 <MX_CAN_Init+0x9c>)
 800035c:	f000 f9ae 	bl	80006bc <HAL_CAN_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000366:	f000 f839 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef can_filter_config;

  can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800036a:	2301      	movs	r3, #1
 800036c:	623b      	str	r3, [r7, #32]
  can_filter_config.FilterBank = 10;
 800036e:	230a      	movs	r3, #10
 8000370:	617b      	str	r3, [r7, #20]
  can_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
  can_filter_config.FilterIdHigh = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
  can_filter_config.FilterIdLow = 0x0000;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
  can_filter_config.FilterMaskIdHigh = 0;			// decides which bits in id should be compared
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  can_filter_config.FilterMaskIdLow = 0x0000;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800038a:	2301      	movs	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
  can_filter_config.SlaveStartFilterBank = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &can_filter_config);
 8000392:	463b      	mov	r3, r7
 8000394:	4619      	mov	r1, r3
 8000396:	4803      	ldr	r0, [pc, #12]	; (80003a4 <MX_CAN_Init+0x9c>)
 8000398:	f000 fa8b 	bl	80008b2 <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3728      	adds	r7, #40	; 0x28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000028 	.word	0x20000028
 80003a8:	40006400 	.word	0x40006400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_GPIO_Init+0x2c>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <MX_GPIO_Init+0x2c>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_GPIO_Init+0x2c>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x44>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <HAL_MspInit+0x44>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <HAL_MspInit+0x44>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <HAL_CAN_MspInit+0xb0>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d141      	bne.n	80004d6 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <HAL_CAN_MspInit+0xb4>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a23      	ldr	r2, [pc, #140]	; (80004e4 <HAL_CAN_MspInit+0xb4>)
 8000458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <HAL_CAN_MspInit+0xb4>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <HAL_CAN_MspInit+0xb4>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a1d      	ldr	r2, [pc, #116]	; (80004e4 <HAL_CAN_MspInit+0xb4>)
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <HAL_CAN_MspInit+0xb4>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000482:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000488:	2302      	movs	r3, #2
 800048a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000490:	2303      	movs	r3, #3
 8000492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000494:	2309      	movs	r3, #9
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4619      	mov	r1, r3
 800049e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a2:	f001 f86d 	bl	8001580 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2014      	movs	r0, #20
 80004ac:	f001 f831 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80004b0:	2014      	movs	r0, #20
 80004b2:	f001 f84a 	bl	800154a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	2015      	movs	r0, #21
 80004bc:	f001 f829 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80004c0:	2015      	movs	r0, #21
 80004c2:	f001 f842 	bl	800154a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	2016      	movs	r0, #22
 80004cc:	f001 f821 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80004d0:	2016      	movs	r0, #22
 80004d2:	f001 f83a 	bl	800154a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80004d6:	bf00      	nop
 80004d8:	3728      	adds	r7, #40	; 0x28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40006400 	.word	0x40006400
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000534:	f000 f8a2 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000542:	f000 fcdc 	bl	8000efe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <CAN_RX1_IRQHandler+0x10>)
 8000556:	f000 fcd2 	bl	8000efe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <CAN_SCE_IRQHandler+0x10>)
 800056a:	f000 fcc8 	bl	8000efe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f7ff ffea 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f002 fb9d 	bl	8002d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fe21 	bl	8000214 <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e0:	08002db0 	.word	0x08002db0
  ldr r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e8:	200000a0 	.word	0x200000a0

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_Init+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_Init+0x28>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 ff7b 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000606:	200f      	movs	r0, #15
 8000608:	f000 f808 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060c:	f7ff feec 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x54>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	fbb3 f3f1 	udiv	r3, r3, r1
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 ff93 	bl	8001566 <HAL_SYSTICK_Config>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e00e      	b.n	8000668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d80a      	bhi.n	8000666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000658:	f000 ff5b 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_InitTick+0x5c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_IncTick+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_IncTick+0x24>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000008 	.word	0x20000008
 80006a0:	2000009c 	.word	0x2000009c

080006a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_GetTick+0x14>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000009c 	.word	0x2000009c

080006bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e0ed      	b.n	80008aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff fea8 	bl	8000430 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f042 0201 	orr.w	r2, r2, #1
 80006ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006f0:	f7ff ffd8 	bl	80006a4 <HAL_GetTick>
 80006f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006f6:	e012      	b.n	800071e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006f8:	f7ff ffd4 	bl	80006a4 <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b0a      	cmp	r3, #10
 8000704:	d90b      	bls.n	800071e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2205      	movs	r2, #5
 8000716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e0c5      	b.n	80008aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0e5      	beq.n	80006f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0202 	bic.w	r2, r2, #2
 800073a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800073c:	f7ff ffb2 	bl	80006a4 <HAL_GetTick>
 8000740:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000742:	e012      	b.n	800076a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000744:	f7ff ffae 	bl	80006a4 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	2b0a      	cmp	r3, #10
 8000750:	d90b      	bls.n	800076a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2205      	movs	r2, #5
 8000762:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e09f      	b.n	80008aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1e5      	bne.n	8000744 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7e1b      	ldrb	r3, [r3, #24]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d108      	bne.n	8000792 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e007      	b.n	80007a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7e5b      	ldrb	r3, [r3, #25]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d108      	bne.n	80007bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	e007      	b.n	80007cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7e9b      	ldrb	r3, [r3, #26]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d108      	bne.n	80007e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f042 0220 	orr.w	r2, r2, #32
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	e007      	b.n	80007f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f022 0220 	bic.w	r2, r2, #32
 80007f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7edb      	ldrb	r3, [r3, #27]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d108      	bne.n	8000810 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f022 0210 	bic.w	r2, r2, #16
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	e007      	b.n	8000820 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f042 0210 	orr.w	r2, r2, #16
 800081e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7f1b      	ldrb	r3, [r3, #28]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d108      	bne.n	800083a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 0208 	orr.w	r2, r2, #8
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	e007      	b.n	800084a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f022 0208 	bic.w	r2, r2, #8
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7f5b      	ldrb	r3, [r3, #29]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d108      	bne.n	8000864 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0204 	orr.w	r2, r2, #4
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e007      	b.n	8000874 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0204 	bic.w	r2, r2, #4
 8000872:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	431a      	orrs	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	ea42 0103 	orr.w	r1, r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	430a      	orrs	r2, r1
 8000898:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b087      	sub	sp, #28
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80008ca:	7cfb      	ldrb	r3, [r7, #19]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d003      	beq.n	80008d8 <HAL_CAN_ConfigFilter+0x26>
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	f040 80aa 	bne.w	8000a2c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80008de:	f043 0201 	orr.w	r2, r3, #1
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	2201      	movs	r2, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	43db      	mvns	r3, r3
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d123      	bne.n	800095a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	43db      	mvns	r3, r3
 800091c:	401a      	ands	r2, r3
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000934:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3248      	adds	r2, #72	; 0x48
 800093a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800094e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000950:	6979      	ldr	r1, [r7, #20]
 8000952:	3348      	adds	r3, #72	; 0x48
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d122      	bne.n	80009a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	431a      	orrs	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000982:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3248      	adds	r2, #72	; 0x48
 8000988:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800099c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800099e:	6979      	ldr	r1, [r7, #20]
 80009a0:	3348      	adds	r3, #72	; 0x48
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	440b      	add	r3, r1
 80009a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d109      	bne.n	80009c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80009c2:	e007      	b.n	80009d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d109      	bne.n	80009f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009ee:	e007      	b.n	8000a00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	6a1b      	ldr	r3, [r3, #32]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d107      	bne.n	8000a18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a1e:	f023 0201 	bic.w	r2, r3, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e006      	b.n	8000a3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
  }
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	371c      	adds	r7, #28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d12e      	bne.n	8000ab8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0201 	bic.w	r2, r2, #1
 8000a70:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a72:	f7ff fe17 	bl	80006a4 <HAL_GetTick>
 8000a76:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a78:	e012      	b.n	8000aa0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a7a:	f7ff fe13 	bl	80006a4 <HAL_GetTick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	2b0a      	cmp	r3, #10
 8000a86:	d90b      	bls.n	8000aa0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2205      	movs	r2, #5
 8000a98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e012      	b.n	8000ac6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1e5      	bne.n	8000a7a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e006      	b.n	8000ac6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
  }
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b089      	sub	sp, #36	; 0x24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000aec:	7ffb      	ldrb	r3, [r7, #31]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d003      	beq.n	8000afa <HAL_CAN_AddTxMessage+0x2c>
 8000af2:	7ffb      	ldrb	r3, [r7, #31]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	f040 80ad 	bne.w	8000c54 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10a      	bne.n	8000b1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d105      	bne.n	8000b1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 8095 	beq.w	8000c44 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	0e1b      	lsrs	r3, r3, #24
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b24:	2201      	movs	r2, #1
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10d      	bne.n	8000b52 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b40:	68f9      	ldr	r1, [r7, #12]
 8000b42:	6809      	ldr	r1, [r1, #0]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3318      	adds	r3, #24
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	440b      	add	r3, r1
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	e00f      	b.n	8000b72 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3318      	adds	r3, #24
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	440b      	add	r3, r1
 8000b70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6819      	ldr	r1, [r3, #0]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3318      	adds	r3, #24
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	440b      	add	r3, r1
 8000b82:	3304      	adds	r3, #4
 8000b84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	7d1b      	ldrb	r3, [r3, #20]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d111      	bne.n	8000bb2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3318      	adds	r3, #24
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	4413      	add	r3, r2
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	6811      	ldr	r1, [r2, #0]
 8000ba2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3318      	adds	r3, #24
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	440b      	add	r3, r1
 8000bae:	3304      	adds	r3, #4
 8000bb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	061a      	lsls	r2, r3, #24
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3306      	adds	r3, #6
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3305      	adds	r3, #5
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	3204      	adds	r2, #4
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	6811      	ldr	r1, [r2, #0]
 8000bda:	ea43 0200 	orr.w	r2, r3, r0
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	440b      	add	r3, r1
 8000be4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000be8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3303      	adds	r3, #3
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	061a      	lsls	r2, r3, #24
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	041b      	lsls	r3, r3, #16
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	4313      	orrs	r3, r2
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	6811      	ldr	r1, [r2, #0]
 8000c10:	ea43 0200 	orr.w	r2, r3, r0
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	440b      	add	r3, r1
 8000c1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000c1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3318      	adds	r3, #24
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	6811      	ldr	r1, [r2, #0]
 8000c32:	f043 0201 	orr.w	r2, r3, #1
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3318      	adds	r3, #24
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	440b      	add	r3, r1
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e00e      	b.n	8000c62 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e006      	b.n	8000c62 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
  }
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b087      	sub	sp, #28
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d003      	beq.n	8000c92 <HAL_CAN_GetRxMessage+0x24>
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	f040 8103 	bne.w	8000e98 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10e      	bne.n	8000cb6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d116      	bne.n	8000cd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0f7      	b.n	8000ea6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0e8      	b.n	8000ea6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	331b      	adds	r3, #27
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0204 	and.w	r2, r3, #4
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	331b      	adds	r3, #27
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0d5b      	lsrs	r3, r3, #21
 8000d02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e00b      	b.n	8000d24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	331b      	adds	r3, #27
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4413      	add	r3, r2
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	331b      	adds	r3, #27
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	4413      	add	r3, r2
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0202 	and.w	r2, r3, #2
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	331b      	adds	r3, #27
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	4413      	add	r3, r2
 8000d46:	3304      	adds	r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2208      	movs	r2, #8
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	e00b      	b.n	8000d72 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	331b      	adds	r3, #27
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3304      	adds	r3, #4
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 020f 	and.w	r2, r3, #15
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	331b      	adds	r3, #27
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3304      	adds	r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0a1b      	lsrs	r3, r3, #8
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	331b      	adds	r3, #27
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4413      	add	r3, r2
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0c1b      	lsrs	r3, r3, #16
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	4413      	add	r3, r2
 8000dac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	0a1a      	lsrs	r2, r3, #8
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	4413      	add	r3, r2
 8000ddc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	0c1a      	lsrs	r2, r3, #16
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3302      	adds	r3, #2
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4413      	add	r3, r2
 8000df6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	0e1a      	lsrs	r2, r3, #24
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	3303      	adds	r3, #3
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	4413      	add	r3, r2
 8000e10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0a1a      	lsrs	r2, r3, #8
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	3305      	adds	r3, #5
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	4413      	add	r3, r2
 8000e42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0c1a      	lsrs	r2, r3, #16
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0e1a      	lsrs	r2, r3, #24
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3307      	adds	r3, #7
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d108      	bne.n	8000e84 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0220 	orr.w	r2, r2, #32
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	e007      	b.n	8000e94 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0220 	orr.w	r2, r2, #32
 8000e92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e006      	b.n	8000ea6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
  }
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b085      	sub	sp, #20
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d002      	beq.n	8000ed0 <HAL_CAN_ActivateNotification+0x1e>
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d109      	bne.n	8000ee4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6959      	ldr	r1, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e006      	b.n	8000ef2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
  }
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b08a      	sub	sp, #40	; 0x28
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d07c      	beq.n	800103e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d023      	beq.n	8000f96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f983 	bl	800126c <HAL_CAN_TxMailbox0CompleteCallback>
 8000f66:	e016      	b.n	8000f96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	e00c      	b.n	8000f96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d004      	beq.n	8000f90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8e:	e002      	b.n	8000f96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f989 	bl	80012a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d024      	beq.n	8000fea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f963 	bl	8001280 <HAL_CAN_TxMailbox1CompleteCallback>
 8000fba:	e016      	b.n	8000fea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fce:	e00c      	b.n	8000fea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe2:	e002      	b.n	8000fea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f969 	bl	80012bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d024      	beq.n	800103e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ffc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f943 	bl	8001294 <HAL_CAN_TxMailbox2CompleteCallback>
 800100e:	e016      	b.n	800103e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
 8001022:	e00c      	b.n	800103e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
 8001036:	e002      	b.n	800103e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f949 	bl	80012d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00c      	beq.n	8001062 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001058:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2210      	movs	r2, #16
 8001060:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00b      	beq.n	8001084 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2208      	movs	r2, #8
 800107c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f930 	bl	80012e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff f899 	bl	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00c      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2210      	movs	r2, #16
 80010c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00b      	beq.n	80010e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2208      	movs	r2, #8
 80010e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f912 	bl	800130c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f8f9 	bl	80012f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2210      	movs	r2, #16
 8001120:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f8fc 	bl	8001320 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f8f5 	bl	8001334 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d07b      	beq.n	800124c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	d072      	beq.n	8001244 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d043      	beq.n	8001244 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03e      	beq.n	8001244 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011cc:	2b60      	cmp	r3, #96	; 0x60
 80011ce:	d02b      	beq.n	8001228 <HAL_CAN_IRQHandler+0x32a>
 80011d0:	2b60      	cmp	r3, #96	; 0x60
 80011d2:	d82e      	bhi.n	8001232 <HAL_CAN_IRQHandler+0x334>
 80011d4:	2b50      	cmp	r3, #80	; 0x50
 80011d6:	d022      	beq.n	800121e <HAL_CAN_IRQHandler+0x320>
 80011d8:	2b50      	cmp	r3, #80	; 0x50
 80011da:	d82a      	bhi.n	8001232 <HAL_CAN_IRQHandler+0x334>
 80011dc:	2b40      	cmp	r3, #64	; 0x40
 80011de:	d019      	beq.n	8001214 <HAL_CAN_IRQHandler+0x316>
 80011e0:	2b40      	cmp	r3, #64	; 0x40
 80011e2:	d826      	bhi.n	8001232 <HAL_CAN_IRQHandler+0x334>
 80011e4:	2b30      	cmp	r3, #48	; 0x30
 80011e6:	d010      	beq.n	800120a <HAL_CAN_IRQHandler+0x30c>
 80011e8:	2b30      	cmp	r3, #48	; 0x30
 80011ea:	d822      	bhi.n	8001232 <HAL_CAN_IRQHandler+0x334>
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d002      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x2f8>
 80011f0:	2b20      	cmp	r3, #32
 80011f2:	d005      	beq.n	8001200 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011f4:	e01d      	b.n	8001232 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011fe:	e019      	b.n	8001234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001208:	e014      	b.n	8001234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001212:	e00f      	b.n	8001234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800121c:	e00a      	b.n	8001234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001226:	e005      	b.n	8001234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001230:	e000      	b.n	8001234 <HAL_CAN_IRQHandler+0x336>
            break;
 8001232:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001242:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2204      	movs	r2, #4
 800124a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f872 	bl	8001348 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <__NVIC_EnableIRQ+0x38>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014dc:	f7ff ff8e 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff29 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff3e 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff8e 	bl	8001450 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5d 	bl	80013fc <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff31 	bl	80013c0 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e160      	b.n	8001852 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8152 	beq.w	800184c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_GPIO_Init+0x40>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 0201 	and.w	r2, r3, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b03      	cmp	r3, #3
 800162c:	d017      	beq.n	800165e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d123      	bne.n	80016b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	6939      	ldr	r1, [r7, #16]
 80016ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0203 	and.w	r2, r3, #3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80ac 	beq.w	800184c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f4:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_GPIO_Init+0x2f0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	; (8001870 <HAL_GPIO_Init+0x2f0>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b5b      	ldr	r3, [pc, #364]	; (8001870 <HAL_GPIO_Init+0x2f0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800170c:	4a59      	ldr	r2, [pc, #356]	; (8001874 <HAL_GPIO_Init+0x2f4>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001736:	d025      	beq.n	8001784 <HAL_GPIO_Init+0x204>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <HAL_GPIO_Init+0x2f8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d01f      	beq.n	8001780 <HAL_GPIO_Init+0x200>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a4e      	ldr	r2, [pc, #312]	; (800187c <HAL_GPIO_Init+0x2fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d019      	beq.n	800177c <HAL_GPIO_Init+0x1fc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <HAL_GPIO_Init+0x300>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d013      	beq.n	8001778 <HAL_GPIO_Init+0x1f8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x304>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00d      	beq.n	8001774 <HAL_GPIO_Init+0x1f4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <HAL_GPIO_Init+0x308>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x1f0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a4a      	ldr	r2, [pc, #296]	; (800188c <HAL_GPIO_Init+0x30c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_GPIO_Init+0x1ec>
 8001768:	2306      	movs	r3, #6
 800176a:	e00c      	b.n	8001786 <HAL_GPIO_Init+0x206>
 800176c:	2307      	movs	r3, #7
 800176e:	e00a      	b.n	8001786 <HAL_GPIO_Init+0x206>
 8001770:	2305      	movs	r3, #5
 8001772:	e008      	b.n	8001786 <HAL_GPIO_Init+0x206>
 8001774:	2304      	movs	r3, #4
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x206>
 8001778:	2303      	movs	r3, #3
 800177a:	e004      	b.n	8001786 <HAL_GPIO_Init+0x206>
 800177c:	2302      	movs	r3, #2
 800177e:	e002      	b.n	8001786 <HAL_GPIO_Init+0x206>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_GPIO_Init+0x206>
 8001784:	2300      	movs	r3, #0
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	f002 0203 	and.w	r2, r2, #3
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	4093      	lsls	r3, r2
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001796:	4937      	ldr	r1, [pc, #220]	; (8001874 <HAL_GPIO_Init+0x2f4>)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a4:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <HAL_GPIO_Init+0x310>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c8:	4a31      	ldr	r2, [pc, #196]	; (8001890 <HAL_GPIO_Init+0x310>)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ce:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_GPIO_Init+0x310>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017f2:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_GPIO_Init+0x310>)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <HAL_GPIO_Init+0x310>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800181c:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <HAL_GPIO_Init+0x310>)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_GPIO_Init+0x310>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_GPIO_Init+0x310>)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	f47f ae97 	bne.w	8001590 <HAL_GPIO_Init+0x10>
  }
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000
 8001878:	48000400 	.word	0x48000400
 800187c:	48000800 	.word	0x48000800
 8001880:	48000c00 	.word	0x48000c00
 8001884:	48001000 	.word	0x48001000
 8001888:	48001400 	.word	0x48001400
 800188c:	48001800 	.word	0x48001800
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800189a:	af00      	add	r7, sp, #0
 800189c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	f001 b83a 	b.w	800292e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 816f 	beq.w	8001bae <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018d0:	4bb5      	ldr	r3, [pc, #724]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d00c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018dc:	4bb2      	ldr	r3, [pc, #712]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d15c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x10e>
 80018e8:	4baf      	ldr	r3, [pc, #700]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d155      	bne.n	80019a2 <HAL_RCC_OscConfig+0x10e>
 80018f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800190a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	095b      	lsrs	r3, r3, #5
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0x94>
 8001922:	4ba1      	ldr	r3, [pc, #644]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	e015      	b.n	8001954 <HAL_RCC_OscConfig+0xc0>
 8001928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800193c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001940:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001944:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001950:	4b95      	ldr	r3, [pc, #596]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001958:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800195c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001960:	fa92 f2a2 	rbit	r2, r2
 8001964:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001968:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800196c:	fab2 f282 	clz	r2, r2
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	f002 021f 	and.w	r2, r2, #31
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8111 	beq.w	8001bac <HAL_RCC_OscConfig+0x318>
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8108 	bne.w	8001bac <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	f000 bfc6 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12e>
 80019b4:	4b7c      	ldr	r3, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a7b      	ldr	r2, [pc, #492]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e036      	b.n	8001a30 <HAL_RCC_OscConfig+0x19c>
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x158>
 80019d2:	4b75      	ldr	r3, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a74      	ldr	r2, [pc, #464]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a71      	ldr	r2, [pc, #452]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e021      	b.n	8001a30 <HAL_RCC_OscConfig+0x19c>
 80019ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x184>
 80019fe:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a69      	ldr	r2, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x19c>
 8001a18:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a62      	ldr	r2, [pc, #392]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b60      	ldr	r3, [pc, #384]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a5f      	ldr	r2, [pc, #380]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d059      	beq.n	8001af4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7fe fe30 	bl	80006a4 <HAL_GetTick>
 8001a44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4a:	f7fe fe2b 	bl	80006a4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d902      	bls.n	8001a60 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	f000 bf67 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
 8001a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a64:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001a74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1fe>
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x22a>
 8001a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aaa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ac6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001aca:	fa92 f2a2 	rbit	r2, r2
 8001ace:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ad2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ad6:	fab2 f282 	clz	r2, r2
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f042 0220 	orr.w	r2, r2, #32
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f002 021f 	and.w	r2, r2, #31
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ab      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1b6>
 8001af2:	e05c      	b.n	8001bae <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7fe fdd6 	bl	80006a4 <HAL_GetTick>
 8001af8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afe:	f7fe fdd1 	bl	80006a4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d902      	bls.n	8001b14 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	f000 bf0d 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001b28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2b2>
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x2de>
 8001b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_RCC_OscConfig+0x314>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b76:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b7a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001b86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b8a:	fab2 f282 	clz	r2, r2
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f042 0220 	orr.w	r2, r2, #32
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f002 021f 	and.w	r2, r2, #31
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ab      	bne.n	8001afe <HAL_RCC_OscConfig+0x26a>
 8001ba6:	e002      	b.n	8001bae <HAL_RCC_OscConfig+0x31a>
 8001ba8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 817f 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc4:	4ba7      	ldr	r3, [pc, #668]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bd0:	4ba4      	ldr	r3, [pc, #656]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d173      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x430>
 8001bdc:	4ba1      	ldr	r3, [pc, #644]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be8:	d16c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x430>
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001bfc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_OscConfig+0x386>
 8001c14:	4b93      	ldr	r3, [pc, #588]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e013      	b.n	8001c42 <HAL_RCC_OscConfig+0x3ae>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c32:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c3e:	4b89      	ldr	r3, [pc, #548]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2202      	movs	r2, #2
 8001c44:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c48:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c4c:	fa92 f2a2 	rbit	r2, r2
 8001c50:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001c54:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c58:	fab2 f282 	clz	r2, r2
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f002 021f 	and.w	r2, r2, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3f6>
 8001c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d002      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f000 be52 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	21f8      	movs	r1, #248	; 0xf8
 8001ca0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ca8:	fa91 f1a1 	rbit	r1, r1
 8001cac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001cb0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cb4:	fab1 f181 	clz	r1, r1
 8001cb8:	b2c9      	uxtb	r1, r1
 8001cba:	408b      	lsls	r3, r1
 8001cbc:	4969      	ldr	r1, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e0fe      	b.n	8001ec2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8088 	beq.w	8001de6 <HAL_RCC_OscConfig+0x552>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ce8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2301      	movs	r3, #1
 8001d00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7fe fccf 	bl	80006a4 <HAL_GetTick>
 8001d06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7fe fcca 	bl	80006a4 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d902      	bls.n	8001d22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	f000 be06 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001d34:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4be>
 8001d4c:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	e013      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e6>
 8001d52:	2302      	movs	r3, #2
 8001d54:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d6a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d80:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d84:	fa92 f2a2 	rbit	r2, r2
 8001d88:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001d8c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f002 021f 	and.w	r2, r2, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0af      	beq.n	8001d0c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	21f8      	movs	r1, #248	; 0xf8
 8001dc2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001dca:	fa91 f1a1 	rbit	r1, r1
 8001dce:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001dd2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dd6:	fab1 f181 	clz	r1, r1
 8001dda:	b2c9      	uxtb	r1, r1
 8001ddc:	408b      	lsls	r3, r1
 8001dde:	4921      	ldr	r1, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e06d      	b.n	8001ec2 <HAL_RCC_OscConfig+0x62e>
 8001de6:	2301      	movs	r3, #1
 8001de8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001df8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe fc47 	bl	80006a4 <HAL_GetTick>
 8001e16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7fe fc42 	bl	80006a4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d902      	bls.n	8001e32 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f000 bd7e 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001e44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5d4>
 8001e5c:	4b01      	ldr	r3, [pc, #4]	; (8001e64 <HAL_RCC_OscConfig+0x5d0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e016      	b.n	8001e90 <HAL_RCC_OscConfig+0x5fc>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e8c:	4bbf      	ldr	r3, [pc, #764]	; (800218c <HAL_RCC_OscConfig+0x8f8>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2202      	movs	r2, #2
 8001e92:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e96:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e9a:	fa92 f2a2 	rbit	r2, r2
 8001e9e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ea2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f042 0220 	orr.w	r2, r2, #32
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f002 021f 	and.w	r2, r2, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ac      	bne.n	8001e1c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8113 	beq.w	80020fe <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d07c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x74e>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001efa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	4ba2      	ldr	r3, [pc, #648]	; (8002190 <HAL_RCC_OscConfig+0x8fc>)
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2301      	movs	r3, #1
 8001f10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fbc7 	bl	80006a4 <HAL_GetTick>
 8001f16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fbc2 	bl	80006a4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d902      	bls.n	8001f32 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f000 bcfe 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f52:	2202      	movs	r2, #2
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	4b7e      	ldr	r3, [pc, #504]	; (800218c <HAL_RCC_OscConfig+0x8f8>)
 8001f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	6019      	str	r1, [r3, #0]
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f1a3 	rbit	r1, r3
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fb8:	6019      	str	r1, [r3, #0]
  return result;
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d09d      	beq.n	8001f1c <HAL_RCC_OscConfig+0x688>
 8001fe0:	e08d      	b.n	80020fe <HAL_RCC_OscConfig+0x86a>
 8001fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002000:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002004:	601a      	str	r2, [r3, #0]
  return result;
 8002006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800200e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <HAL_RCC_OscConfig+0x8fc>)
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	461a      	mov	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7fe fb3e 	bl	80006a4 <HAL_GetTick>
 8002028:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202e:	f7fe fb39 	bl	80006a4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d902      	bls.n	8002044 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	f000 bc75 	b.w	800292e <HAL_RCC_OscConfig+0x109a>
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800204c:	2202      	movs	r2, #2
 800204e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002054:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002062:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x8f8>)
 80020b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020bc:	2102      	movs	r1, #2
 80020be:	6019      	str	r1, [r3, #0]
 80020c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f1a3 	rbit	r1, r3
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020d6:	6019      	str	r1, [r3, #0]
  return result;
 80020d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d197      	bne.n	800202e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002102:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 81a5 	beq.w	800245e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_RCC_OscConfig+0x8f8>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_OscConfig+0x8f8>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_RCC_OscConfig+0x8f8>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_RCC_OscConfig+0x8f8>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800214c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_RCC_OscConfig+0x900>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d121      	bne.n	80021a4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x900>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x900>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216c:	f7fe fa9a 	bl	80006a4 <HAL_GetTick>
 8002170:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e010      	b.n	8002198 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe fa95 	bl	80006a4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d908      	bls.n	8002198 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e3d1      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	10908120 	.word	0x10908120
 8002194:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b8d      	ldr	r3, [pc, #564]	; (80023d0 <HAL_RCC_OscConfig+0xb3c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0e8      	beq.n	8002176 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x92e>
 80021b4:	4b87      	ldr	r3, [pc, #540]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a86      	ldr	r2, [pc, #536]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e035      	b.n	800222e <HAL_RCC_OscConfig+0x99a>
 80021c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x958>
 80021d2:	4b80      	ldr	r3, [pc, #512]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a7f      	ldr	r2, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a7c      	ldr	r2, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e020      	b.n	800222e <HAL_RCC_OscConfig+0x99a>
 80021ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d10c      	bne.n	8002216 <HAL_RCC_OscConfig+0x982>
 80021fc:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a74      	ldr	r2, [pc, #464]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	4b72      	ldr	r3, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a71      	ldr	r2, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	e00b      	b.n	800222e <HAL_RCC_OscConfig+0x99a>
 8002216:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a6e      	ldr	r2, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002232:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8081 	beq.w	8002342 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe fa30 	bl	80006a4 <HAL_GetTick>
 8002244:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe fa2b 	bl	80006a4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e365      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
 8002262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002266:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800226a:	2202      	movs	r2, #2
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800228e:	2202      	movs	r2, #2
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002296:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022a8:	601a      	str	r2, [r3, #0]
  return result;
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d102      	bne.n	80022ce <HAL_RCC_OscConfig+0xa3a>
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	e013      	b.n	80022f6 <HAL_RCC_OscConfig+0xa62>
 80022ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022d6:	2202      	movs	r2, #2
 80022d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ec:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022fe:	2102      	movs	r1, #2
 8002300:	6011      	str	r1, [r2, #0]
 8002302:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002306:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	fa92 f1a2 	rbit	r1, r2
 8002310:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002314:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002318:	6011      	str	r1, [r2, #0]
  return result;
 800231a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800231e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f002 021f 	and.w	r2, r2, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d084      	beq.n	800224a <HAL_RCC_OscConfig+0x9b6>
 8002340:	e083      	b.n	800244a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe f9af 	bl	80006a4 <HAL_GetTick>
 8002346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe f9aa 	bl	80006a4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e2e4      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002382:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002398:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0xb44>
 80023ca:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_RCC_OscConfig+0xb40>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	e017      	b.n	8002400 <HAL_RCC_OscConfig+0xb6c>
 80023d0:	40007000 	.word	0x40007000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023e0:	2202      	movs	r2, #2
 80023e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	4bb3      	ldr	r3, [pc, #716]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002404:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002408:	2102      	movs	r1, #2
 800240a:	6011      	str	r1, [r2, #0]
 800240c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002410:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	fa92 f1a2 	rbit	r1, r2
 800241a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800241e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002422:	6011      	str	r1, [r2, #0]
  return result;
 8002424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002428:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	fab2 f282 	clz	r2, r2
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f002 021f 	and.w	r2, r2, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d180      	bne.n	800234c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800244a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b9e      	ldr	r3, [pc, #632]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a9d      	ldr	r2, [pc, #628]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002462:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 825e 	beq.w	800292c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002470:	4b96      	ldr	r3, [pc, #600]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	f000 821f 	beq.w	80028bc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002482:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b02      	cmp	r3, #2
 800248c:	f040 8170 	bne.w	8002770 <HAL_RCC_OscConfig+0xedc>
 8002490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002494:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024b4:	601a      	str	r2, [r3, #0]
  return result;
 80024b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024be:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	461a      	mov	r2, r3
 80024d2:	2300      	movs	r3, #0
 80024d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe f8e5 	bl	80006a4 <HAL_GetTick>
 80024da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024de:	e009      	b.n	80024f4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe f8e0 	bl	80006a4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e21c      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002506:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002514:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002518:	601a      	str	r2, [r3, #0]
  return result;
 800251a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002522:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0xcaa>
 8002538:	4b64      	ldr	r3, [pc, #400]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e027      	b.n	800258e <HAL_RCC_OscConfig+0xcfa>
 800253e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002542:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002550:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002568:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800256c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002576:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002584:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002592:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002596:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800259a:	6011      	str	r1, [r2, #0]
 800259c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	fa92 f1a2 	rbit	r1, r2
 80025aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ae:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80025b2:	6011      	str	r1, [r2, #0]
  return result;
 80025b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025b8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d182      	bne.n	80024e0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f023 020f 	bic.w	r2, r3, #15
 80025e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	4937      	ldr	r1, [pc, #220]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80025f4:	4b35      	ldr	r3, [pc, #212]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80025fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002600:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	430b      	orrs	r3, r1
 8002616:	492d      	ldr	r1, [pc, #180]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002624:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002640:	601a      	str	r2, [r3, #0]
  return result;
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800264a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002656:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	2301      	movs	r3, #1
 8002660:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe f81f 	bl	80006a4 <HAL_GetTick>
 8002666:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266a:	e009      	b.n	8002680 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe f81a 	bl	80006a4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e156      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
 8002680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002684:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002692:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026a4:	601a      	str	r2, [r3, #0]
  return result;
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe3c>
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <HAL_RCC_OscConfig+0xe38>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	e02a      	b.n	8002720 <HAL_RCC_OscConfig+0xe8c>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	4b86      	ldr	r3, [pc, #536]	; (8002938 <HAL_RCC_OscConfig+0x10a4>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002724:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002728:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800272c:	6011      	str	r1, [r2, #0]
 800272e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002732:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	fa92 f1a2 	rbit	r1, r2
 800273c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002740:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002744:	6011      	str	r1, [r2, #0]
  return result;
 8002746:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800274a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f042 0220 	orr.w	r2, r2, #32
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f002 021f 	and.w	r2, r2, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	f43f af7f 	beq.w	800266c <HAL_RCC_OscConfig+0xdd8>
 800276e:	e0dd      	b.n	800292c <HAL_RCC_OscConfig+0x1098>
 8002770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002774:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800277c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002782:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002790:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002794:	601a      	str	r2, [r3, #0]
  return result;
 8002796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800279a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800279e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	461a      	mov	r2, r3
 80027b2:	2300      	movs	r3, #0
 80027b4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fd ff75 	bl	80006a4 <HAL_GetTick>
 80027ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	e009      	b.n	80027d4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fd ff70 	bl	80006a4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0ac      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
 80027d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027f8:	601a      	str	r2, [r3, #0]
  return result;
 80027fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002802:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <HAL_RCC_OscConfig+0xf8a>
 8002818:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_OscConfig+0x10a4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e027      	b.n	800286e <HAL_RCC_OscConfig+0xfda>
 800281e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002822:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002830:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800283e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002848:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800284c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002856:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002864:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_RCC_OscConfig+0x10a4>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002872:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002876:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800287a:	6011      	str	r1, [r2, #0]
 800287c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002880:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	fa92 f1a2 	rbit	r1, r2
 800288a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800288e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002892:	6011      	str	r1, [r2, #0]
  return result;
 8002894:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002898:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	fab2 f282 	clz	r2, r2
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f002 021f 	and.w	r2, r2, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d182      	bne.n	80027c0 <HAL_RCC_OscConfig+0xf2c>
 80028ba:	e037      	b.n	800292c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e02e      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_OscConfig+0x10a4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_RCC_OscConfig+0x10a4>)
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028e4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80028e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d117      	bne.n	8002928 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028fc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002904:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800290c:	429a      	cmp	r2, r3
 800290e:	d10b      	bne.n	8002928 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b09e      	sub	sp, #120	; 0x78
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e162      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b8d      	ldr	r3, [pc, #564]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	498b      	ldr	r1, [pc, #556]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e14a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	497f      	ldr	r1, [pc, #508]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80dc 	beq.w	8002b68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d13c      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xf6>
 80029b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d102      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xa6>
 80029dc:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e00f      	b.n	8002a02 <HAL_RCC_ClockConfig+0xc6>
 80029e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	667b      	str	r3, [r7, #100]	; 0x64
 80029f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f4:	663b      	str	r3, [r7, #96]	; 0x60
 80029f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fe:	4b67      	ldr	r3, [pc, #412]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a06:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a12:	fab2 f282 	clz	r2, r2
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f042 0220 	orr.w	r2, r2, #32
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f002 021f 	and.w	r2, r2, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d17b      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0f3      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d13c      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x178>
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x128>
 8002a5e:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e00f      	b.n	8002a84 <HAL_RCC_ClockConfig+0x148>
 8002a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
 8002a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
 8002a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a80:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a88:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f042 0220 	orr.w	r2, r2, #32
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f002 021f 	and.w	r2, r2, #31
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d13a      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0b2      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e00d      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1bc>
 8002adc:	2302      	movs	r3, #2
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2202      	movs	r2, #2
 8002afa:	61ba      	str	r2, [r7, #24]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	617a      	str	r2, [r7, #20]
  return result;
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0220 	orr.w	r2, r2, #32
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e079      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	491a      	ldr	r1, [pc, #104]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fd fdb4 	bl	80006a4 <HAL_GetTick>
 8002b3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fd fdb0 	bl	80006a4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e061      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d214      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	4906      	ldr	r1, [pc, #24]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e040      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	491a      	ldr	r1, [pc, #104]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4912      	ldr	r1, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bde:	f000 f829 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002be2:	4601      	mov	r1, r0
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bec:	22f0      	movs	r2, #240	; 0xf0
 8002bee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	fa92 f2a2 	rbit	r2, r2
 8002bf6:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	40d3      	lsrs	r3, r2
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x2ec>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	fa21 f303 	lsr.w	r3, r1, r3
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <HAL_RCC_ClockConfig+0x2f0>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCC_ClockConfig+0x2f4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fd02 	bl	800061c <HAL_InitTick>
  
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3778      	adds	r7, #120	; 0x78
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08002d78 	.word	0x08002d78
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b08b      	sub	sp, #44	; 0x2c
 8002c38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x36>
 8002c62:	e03f      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c66:	623b      	str	r3, [r7, #32]
      break;
 8002c68:	e03f      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	fa92 f2a2 	rbit	r2, r2
 8002c7c:	607a      	str	r2, [r7, #4]
  return result;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	40d3      	lsrs	r3, r2
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	220f      	movs	r2, #15
 8002c98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	fa92 f2a2 	rbit	r2, r2
 8002ca0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	fab2 f282 	clz	r2, r2
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	40d3      	lsrs	r3, r2
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	e007      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	623b      	str	r3, [r7, #32]
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ce6:	623b      	str	r3, [r7, #32]
      break;
 8002ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cea:	6a3b      	ldr	r3, [r7, #32]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	372c      	adds	r7, #44	; 0x2c
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	08002d88 	.word	0x08002d88
 8002d04:	08002d98 	.word	0x08002d98

08002d08 <__libc_init_array>:
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	4d0d      	ldr	r5, [pc, #52]	; (8002d40 <__libc_init_array+0x38>)
 8002d0c:	4c0d      	ldr	r4, [pc, #52]	; (8002d44 <__libc_init_array+0x3c>)
 8002d0e:	1b64      	subs	r4, r4, r5
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	2600      	movs	r6, #0
 8002d14:	42a6      	cmp	r6, r4
 8002d16:	d109      	bne.n	8002d2c <__libc_init_array+0x24>
 8002d18:	4d0b      	ldr	r5, [pc, #44]	; (8002d48 <__libc_init_array+0x40>)
 8002d1a:	4c0c      	ldr	r4, [pc, #48]	; (8002d4c <__libc_init_array+0x44>)
 8002d1c:	f000 f820 	bl	8002d60 <_init>
 8002d20:	1b64      	subs	r4, r4, r5
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	2600      	movs	r6, #0
 8002d26:	42a6      	cmp	r6, r4
 8002d28:	d105      	bne.n	8002d36 <__libc_init_array+0x2e>
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d30:	4798      	blx	r3
 8002d32:	3601      	adds	r6, #1
 8002d34:	e7ee      	b.n	8002d14 <__libc_init_array+0xc>
 8002d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3a:	4798      	blx	r3
 8002d3c:	3601      	adds	r6, #1
 8002d3e:	e7f2      	b.n	8002d26 <__libc_init_array+0x1e>
 8002d40:	08002da8 	.word	0x08002da8
 8002d44:	08002da8 	.word	0x08002da8
 8002d48:	08002da8 	.word	0x08002da8
 8002d4c:	08002dac 	.word	0x08002dac

08002d50 <memset>:
 8002d50:	4402      	add	r2, r0
 8002d52:	4603      	mov	r3, r0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d100      	bne.n	8002d5a <memset+0xa>
 8002d58:	4770      	bx	lr
 8002d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5e:	e7f9      	b.n	8002d54 <memset+0x4>

08002d60 <_init>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	bf00      	nop
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr

08002d6c <_fini>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr
