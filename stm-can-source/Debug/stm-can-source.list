
stm-can-source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a650  0800a650  0001a650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa5c  0800aa5c  000201e1  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa5c  0800aa5c  000201e1  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa5c  0800aa5c  000201e1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa60  0800aa60  0001aa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aa64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .no_init      00000001  200001e0  0800ac44  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  000201e1  2**0
                  CONTENTS
 11 .bss          000002e8  200001e4  200001e4  000201e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200004cc  200004cc  000201e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010bc0  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000024a9  00000000  00000000  00030dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f38  00000000  00000000  00033280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e20  00000000  00000000  000341b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002265f  00000000  00000000  00034fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001238a  00000000  00000000  00057637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d30d3  00000000  00000000  000699c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0013ca94  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005048  00000000  00000000  0013cae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a638 	.word	0x0800a638

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a638 	.word	0x0800a638

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bbc:	f3bf 8f4f 	dsb	sy
}
 8000bc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <__NVIC_SystemReset+0x24>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000bca:	4904      	ldr	r1, [pc, #16]	; (8000bdc <__NVIC_SystemReset+0x24>)
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_SystemReset+0x28>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd2:	f3bf 8f4f 	dsb	sy
}
 8000bd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <__NVIC_SystemReset+0x20>
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	05fa0004 	.word	0x05fa0004

08000be4 <usBuildAdc_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t usBuildAdc_message(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <usBuildAdc_message+0x60>)
 8000bea:	881a      	ldrh	r2, [r3, #0]
	memcpy(opAdcData, adcData, ADC_BUF_LEN);
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <usBuildAdc_message+0x64>)
 8000bee:	801a      	strh	r2, [r3, #0]
	TxData[0] = (opAdcData[0] >> 0) & 0xFF;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <usBuildAdc_message+0x64>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <usBuildAdc_message+0x68>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	TxData[1] = (opAdcData[0] >> 8) & 0xFF;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <usBuildAdc_message+0x64>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <usBuildAdc_message+0x68>)
 8000c06:	705a      	strb	r2, [r3, #1]

	TxHeader.DLC = 0x02;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 200 + nodeId;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <usBuildAdc_message+0x70>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	33c8      	adds	r3, #200	; 0xc8
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c2a:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	751a      	strb	r2, [r3, #20]
	return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <usBuildAdc_message+0x74>)
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <usBuildAdc_message+0x68>)
 8000c36:	4906      	ldr	r1, [pc, #24]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <usBuildAdc_message+0x78>)
 8000c3a:	f002 fff8 	bl	8003c2e <HAL_CAN_AddTxMessage>
 8000c3e:	4603      	mov	r3, r0

}
 8000c40:	4618      	mov	r0, r3
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200004a4 	.word	0x200004a4
 8000c48:	200004a8 	.word	0x200004a8
 8000c4c:	20000484 	.word	0x20000484
 8000c50:	20000434 	.word	0x20000434
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000480 	.word	0x20000480
 8000c5c:	20000328 	.word	0x20000328

08000c60 <usHeartbeat_message>:

uint8_t usHeartbeat_message(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0


	return HAL_CAN_AddTxMessage(&hcan, &heartbeat_msgTxHeader, heartbeat, &TxMailbox);
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <usHeartbeat_message+0x18>)
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <usHeartbeat_message+0x1c>)
 8000c68:	4905      	ldr	r1, [pc, #20]	; (8000c80 <usHeartbeat_message+0x20>)
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <usHeartbeat_message+0x24>)
 8000c6c:	f002 ffdf 	bl	8003c2e <HAL_CAN_AddTxMessage>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000480 	.word	0x20000480
 8000c7c:	20000498 	.word	0x20000498
 8000c80:	20000468 	.word	0x20000468
 8000c84:	20000328 	.word	0x20000328

08000c88 <usGetTemperatureValue>:

uint8_t usGetTemperatureValue(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

	return (uint8_t)roundf((VOLT_AT_T25 - ((float)internalData[0] * REF_VOL/ADC_RES))/AVG_SLOPE + TEMP_CONST);
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <usGetTemperatureValue+0x5c>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ce8 <usGetTemperatureValue+0x60>
 8000c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ca2:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000cec <usGetTemperatureValue+0x64>
 8000ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000caa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000cf0 <usGetTemperatureValue+0x68>
 8000cae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cb2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000cf4 <usGetTemperatureValue+0x6c>
 8000cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cba:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc6:	f009 fc93 	bl	800a5f0 <roundf>
 8000cca:	eef0 7a40 	vmov.f32	s15, s0
 8000cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	b2db      	uxtb	r3, r3

}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200004a0 	.word	0x200004a0
 8000ce8:	40551eb8 	.word	0x40551eb8
 8000cec:	45800000 	.word	0x45800000
 8000cf0:	3fb70a3d 	.word	0x3fb70a3d
 8000cf4:	4089999a 	.word	0x4089999a

08000cf8 <usGetRefVoltValue>:

uint8_t usGetRefVoltValue(){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

	return (uint8_t)(((REF_VOL * (float)internalData[1])/ADC_RES) * 100.0f);
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <usGetRefVoltValue+0x44>)
 8000d00:	885b      	ldrh	r3, [r3, #2]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000d40 <usGetRefVoltValue+0x48>
 8000d0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d12:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d44 <usGetRefVoltValue+0x4c>
 8000d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d1a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000d48 <usGetRefVoltValue+0x50>
 8000d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d26:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d2a:	793b      	ldrb	r3, [r7, #4]
 8000d2c:	b2db      	uxtb	r3, r3
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200004a0 	.word	0x200004a0
 8000d40:	40551eb8 	.word	0x40551eb8
 8000d44:	45800000 	.word	0x45800000
 8000d48:	42c80000 	.word	0x42c80000

08000d4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d12c      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x6a>
	  if(cyclicMessage){
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d009      	beq.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  can_status += usBuildAdc_message();
 8000d64:	f7ff ff3e 	bl	8000be4 <usBuildAdc_message>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d76:	701a      	strb	r2, [r3, #0]
	  }
	  if(timerHandler % 2 == 0){
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x4e>
		  can_status += usHeartbeat_message();
 8000d86:	f7ff ff6b 	bl	8000c60 <usHeartbeat_message>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d98:	701a      	strb	r2, [r3, #0]
	  }

	  if(timerHandler == 3 ){
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d103      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x5e>
		  timerHandler = 0;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
	  }


  }

}
 8000da8:	e005      	b.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x6a>
		  timerHandler++;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000db4:	701a      	strb	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200003e8 	.word	0x200003e8
 8000dc4:	200004ad 	.word	0x200004ad
 8000dc8:	20000494 	.word	0x20000494
 8000dcc:	200004ac 	.word	0x200004ac

08000dd0 <vBuildTxMessage>:


void vBuildTxMessage(CAN_HandleTypeDef *hcan, uint32_t msg_id, uint16_t data){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	80fb      	strh	r3, [r7, #6]

	memset(TxData, 0, MSG_BUFFER_SIZE);
 8000dde:	2208      	movs	r2, #8
 8000de0:	2100      	movs	r1, #0
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <vBuildTxMessage+0x8c>)
 8000de4:	f006 fee4 	bl	8007bb0 <memset>
	TxData[0] = (data >> 0) & 0xFF;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <vBuildTxMessage+0x8c>)
 8000dee:	701a      	strb	r2, [r3, #0]
	if(data > 0xFF){
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d909      	bls.n	8000e0a <vBuildTxMessage+0x3a>
		TxData[1] = (data >> 8) & 0xFF;
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <vBuildTxMessage+0x8c>)
 8000e00:	705a      	strb	r2, [r3, #1]
		TxHeader.DLC = 0x02;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	e002      	b.n	8000e10 <vBuildTxMessage+0x40>
	} else{
		TxHeader.DLC = 0x01;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	611a      	str	r2, [r3, #16]
	}

	TxHeader.ExtId = 0;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = msg_id + nodeId;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <vBuildTxMessage+0x94>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e2e:	6013      	str	r3, [r2, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	751a      	strb	r2, [r3, #20]
	can_status += HAL_CAN_AddTxMessage(hcan, &TxHeader, &TxData[0], &TxMailbox);
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <vBuildTxMessage+0x98>)
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <vBuildTxMessage+0x8c>)
 8000e3a:	4909      	ldr	r1, [pc, #36]	; (8000e60 <vBuildTxMessage+0x90>)
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f002 fef6 	bl	8003c2e <HAL_CAN_AddTxMessage>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <vBuildTxMessage+0x9c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <vBuildTxMessage+0x9c>)
 8000e50:	701a      	strb	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000484 	.word	0x20000484
 8000e60:	20000434 	.word	0x20000434
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000480 	.word	0x20000480
 8000e6c:	20000494 	.word	0x20000494

08000e70 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	can_status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000e78:	4ba3      	ldr	r3, [pc, #652]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000e7a:	4aa4      	ldr	r2, [pc, #656]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f002 ffa5 	bl	8003dce <HAL_CAN_GetRxMessage>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4ba1      	ldr	r3, [pc, #644]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000e8a:	701a      	strb	r2, [r3, #0]
	switch(RxHeader.StdId){
 8000e8c:	4b9f      	ldr	r3, [pc, #636]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000e94:	f000 8125 	beq.w	80010e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x272>
 8000e98:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000e9c:	f200 8130 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000ea0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000ea4:	f000 80fe 	beq.w	80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 8000ea8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000eac:	f200 8128 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000eb0:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 8000eb4:	f000 80d2 	beq.w	800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8000eb8:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 8000ebc:	f200 8120 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000ec0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ec4:	f000 80ba 	beq.w	800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>
 8000ec8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ecc:	f200 8118 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed4:	f000 8091 	beq.w	8000ffa <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8000ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000edc:	f200 8110 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000ee0:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8000ee4:	d065      	beq.n	8000fb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x142>
 8000ee6:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8000eea:	f200 8109 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ef2:	d03e      	beq.n	8000f72 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
 8000ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ef8:	f200 8102 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000efc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8000f00:	d01c      	beq.n	8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
 8000f02:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8000f06:	f200 80fb 	bhi.w	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 8000f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f0e:	d003      	beq.n	8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f14:	d002      	beq.n	8000f1c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
			vBuildTxMessage(hcan, 0x650, usGetRefVoltValue());
		}
		break;

	default:
		break;
 8000f16:	e0f3      	b.n	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
		NVIC_SystemReset();
 8000f18:	f7ff fe4e 	bl	8000bb8 <__NVIC_SystemReset>
		if(RxData[0] == 0xFF){
 8000f1c:	4b7a      	ldr	r3, [pc, #488]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2bff      	cmp	r3, #255	; 0xff
 8000f22:	f040 80ef 	bne.w	8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>
			can_status += usBuildAdc_message();
 8000f26:	f7ff fe5d 	bl	8000be4 <usBuildAdc_message>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b78      	ldr	r3, [pc, #480]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b76      	ldr	r3, [pc, #472]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000f38:	701a      	strb	r2, [r3, #0]
		break;
 8000f3a:	e0e3      	b.n	8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>
		if(RxData[0] >= 0 && RxData[0] <= 1){
 8000f3c:	4b72      	ldr	r3, [pc, #456]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d804      	bhi.n	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0xde>
			cyclicMessage = RxData[0];
 8000f44:	4b70      	ldr	r3, [pc, #448]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	4b72      	ldr	r3, [pc, #456]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e007      	b.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
		}else if(RxData[0] == 0xFF){
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2bff      	cmp	r3, #255	; 0xff
 8000f54:	d103      	bne.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
			RxData[0] = cyclicMessage;
 8000f56:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f5c:	701a      	strb	r2, [r3, #0]
		vBuildTxMessage(hcan, RxHeader.StdId, RxData[0]);
 8000f5e:	4b6b      	ldr	r3, [pc, #428]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a69      	ldr	r2, [pc, #420]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	b292      	uxth	r2, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff30 	bl	8000dd0 <vBuildTxMessage>
		break;
 8000f70:	e0df      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		if(RxData[0] >= 0 && RxData[0] <= 250){
 8000f72:	4b65      	ldr	r3, [pc, #404]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2bfa      	cmp	r3, #250	; 0xfa
 8000f78:	d809      	bhi.n	8000f8e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
			pwmValue = (uint8_t)RxData[0];
 8000f7a:	4b63      	ldr	r3, [pc, #396]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8000f80:	701a      	strb	r2, [r3, #0]
		   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwmValue);
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	4b65      	ldr	r3, [pc, #404]	; (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
		} else if(RxData[0] == 0xFF){
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d103      	bne.n	8000f9e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
			RxData[0] = pwmValue;
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000f9c:	701a      	strb	r2, [r3, #0]
		vBuildTxMessage(hcan, RxHeader.StdId, RxData[0]);
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a59      	ldr	r2, [pc, #356]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff10 	bl	8000dd0 <vBuildTxMessage>
		break;
 8000fb0:	e0bf      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		if(RxData[0] >= 0 && RxData[0] <= 1){
 8000fb2:	4b55      	ldr	r3, [pc, #340]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d808      	bhi.n	8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>
			HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, RxData[0]);
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f003 fedf 	bl	8004d88 <HAL_GPIO_WritePin>
 8000fca:	e00c      	b.n	8000fe6 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
		else if(RxData[0] == 0xFF){
 8000fcc:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2bff      	cmp	r3, #255	; 0xff
 8000fd2:	d108      	bne.n	8000fe6 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			RxData[0] = HAL_GPIO_ReadPin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin);
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f003 febd 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b49      	ldr	r3, [pc, #292]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000fe4:	701a      	strb	r2, [r3, #0]
		vBuildTxMessage(hcan, RxHeader.StdId, RxData[0]);
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a47      	ldr	r2, [pc, #284]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff feec 	bl	8000dd0 <vBuildTxMessage>
		break;
 8000ff8:	e09b      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		if(RxData[0] == 0xFF){
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2bff      	cmp	r3, #255	; 0xff
 8001000:	f040 8092 	bne.w	8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>
			vBuildTxMessage(hcan, 0x200, adcData[0]);
 8001004:	4b46      	ldr	r3, [pc, #280]	; (8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fede 	bl	8000dd0 <vBuildTxMessage>
			vBuildTxMessage(hcan, 0x600, canSpeedOnStartup);
 8001014:	4b43      	ldr	r3, [pc, #268]	; (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fed5 	bl	8000dd0 <vBuildTxMessage>
			vBuildTxMessage(hcan, 0x650, usGetRefVoltValue());
 8001026:	f7ff fe67 	bl	8000cf8 <usGetRefVoltValue>
 800102a:	4603      	mov	r3, r0
 800102c:	b29b      	uxth	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	f44f 61ca 	mov.w	r1, #1616	; 0x650
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fecb 	bl	8000dd0 <vBuildTxMessage>
		break;
 800103a:	e075      	b.n	8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>
		if(RxData[0] == 0xFF){
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2bff      	cmp	r3, #255	; 0xff
 8001042:	d173      	bne.n	800112c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>
			vBuildTxMessage(hcan, RxHeader.StdId, usGetTemperatureValue());
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001046:	681c      	ldr	r4, [r3, #0]
 8001048:	f7ff fe1e 	bl	8000c88 <usGetTemperatureValue>
 800104c:	4603      	mov	r3, r0
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	4621      	mov	r1, r4
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff febb 	bl	8000dd0 <vBuildTxMessage>
		break;
 800105a:	e067      	b.n	800112c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>
		if(RxData[0] >= 0 && RxData[0] <= 1){
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d808      	bhi.n	8001076 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
			HAL_GPIO_WritePin(USER_GPIO_GPIO_Port, USER_GPIO_Pin, RxData[0]);
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f003 fe8a 	bl	8004d88 <HAL_GPIO_WritePin>
 8001074:	e00c      	b.n	8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>
		else if(RxData[0] == 0xFF){
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d108      	bne.n	8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>
			RxData[0] = HAL_GPIO_ReadPin(USER_GPIO_GPIO_Port, USER_GPIO_Pin);
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f003 fe68 	bl	8004d58 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800108e:	701a      	strb	r2, [r3, #0]
		vBuildTxMessage(hcan, RxHeader.StdId, RxData[0]);
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	b292      	uxth	r2, r2
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fe97 	bl	8000dd0 <vBuildTxMessage>
		break;
 80010a2:	e046      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		if(RxData[0] >= 0 && RxData[0] <= 3){
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d804      	bhi.n	80010b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x246>
			canSpeedOnStartup = (uint8_t)RxData[0];
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e00b      	b.n	80010ce <HAL_CAN_RxFifo0MsgPendingCallback+0x25e>
		} else if(RxData[0] == 0xFF){
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2bff      	cmp	r3, #255	; 0xff
 80010bc:	d104      	bne.n	80010c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
			RxData[0] = canSpeedOnStartup;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e002      	b.n	80010ce <HAL_CAN_RxFifo0MsgPendingCallback+0x25e>
			RxData[0] = 0x80;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	701a      	strb	r2, [r3, #0]
		vBuildTxMessage(hcan, RxHeader.StdId, RxData[0]);
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	b292      	uxth	r2, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fe78 	bl	8000dd0 <vBuildTxMessage>
		break;
 80010e0:	e027      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		if(RxData[0] == 0xFF){
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2bff      	cmp	r3, #255	; 0xff
 80010e8:	d122      	bne.n	8001130 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>
			vBuildTxMessage(hcan, 0x650, usGetRefVoltValue());
 80010ea:	f7ff fe05 	bl	8000cf8 <usGetRefVoltValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	f44f 61ca 	mov.w	r1, #1616	; 0x650
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fe69 	bl	8000dd0 <vBuildTxMessage>
		break;
 80010fe:	e017      	b.n	8001130 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>
		break;
 8001100:	bf00      	nop
 8001102:	e016      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		break;
 8001104:	bf00      	nop
 8001106:	e014      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
 8001108:	2000048c 	.word	0x2000048c
 800110c:	2000044c 	.word	0x2000044c
 8001110:	20000494 	.word	0x20000494
 8001114:	200004ad 	.word	0x200004ad
 8001118:	200004ae 	.word	0x200004ae
 800111c:	2000039c 	.word	0x2000039c
 8001120:	200004a4 	.word	0x200004a4
 8001124:	200001e0 	.word	0x200001e0
		break;
 8001128:	bf00      	nop
 800112a:	e002      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		break;
 800112c:	bf00      	nop
 800112e:	e000      	b.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
		break;
 8001130:	bf00      	nop

	}
	memset(RxData, 0, MSG_BUFFER_SIZE);
 8001132:	2208      	movs	r2, #8
 8001134:	2100      	movs	r1, #0
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001138:	f006 fd3a 	bl	8007bb0 <memset>

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	2000048c 	.word	0x2000048c

08001148 <vCan_messages_init>:

void vCan_messages_init(){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

	heartbeat_msgTxHeader.DLC = 0x00;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <vCan_messages_init+0x60>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
	heartbeat_msgTxHeader.ExtId = 0;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <vCan_messages_init+0x60>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
	heartbeat_msgTxHeader.IDE = CAN_ID_STD;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <vCan_messages_init+0x60>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
	heartbeat_msgTxHeader.RTR = CAN_RTR_DATA;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <vCan_messages_init+0x60>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
	heartbeat_msgTxHeader.StdId = 0x700 + nodeId;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <vCan_messages_init+0x64>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800116c:	461a      	mov	r2, r3
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <vCan_messages_init+0x60>)
 8001170:	601a      	str	r2, [r3, #0]
	heartbeat_msgTxHeader.TransmitGlobalTime = DISABLE;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <vCan_messages_init+0x60>)
 8001174:	2200      	movs	r2, #0
 8001176:	751a      	strb	r2, [r3, #20]

	TxHeader.DLC = 0x00;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <vCan_messages_init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <vCan_messages_init+0x68>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <vCan_messages_init+0x68>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <vCan_messages_init+0x68>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x00;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <vCan_messages_init+0x68>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <vCan_messages_init+0x68>)
 8001198:	2200      	movs	r2, #0
 800119a:	751a      	strb	r2, [r3, #20]

}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000468 	.word	0x20000468
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000434 	.word	0x20000434

080011b4 <setCanSpeed>:


void setCanSpeed(can_speed_t canSpeed){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]

	hcan.Instance = CAN;
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <setCanSpeed+0xb0>)
 80011c0:	4a29      	ldr	r2, [pc, #164]	; (8001268 <setCanSpeed+0xb4>)
 80011c2:	601a      	str	r2, [r3, #0]
	switch(canSpeed){
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d81a      	bhi.n	8001200 <setCanSpeed+0x4c>
 80011ca:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <setCanSpeed+0x1c>)
 80011cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011e9 	.word	0x080011e9
 80011d8:	080011f1 	.word	0x080011f1
 80011dc:	080011f9 	.word	0x080011f9

	case SPEED_125_KBITS:
		hcan.Init.Prescaler = 72u;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <setCanSpeed+0xb0>)
 80011e2:	2248      	movs	r2, #72	; 0x48
 80011e4:	605a      	str	r2, [r3, #4]
		break;
 80011e6:	e012      	b.n	800120e <setCanSpeed+0x5a>

	case SPEED_250_KBITS:
		hcan.Init.Prescaler = 36u;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <setCanSpeed+0xb0>)
 80011ea:	2224      	movs	r2, #36	; 0x24
 80011ec:	605a      	str	r2, [r3, #4]
		break;
 80011ee:	e00e      	b.n	800120e <setCanSpeed+0x5a>

	case SPEED_500_KBITS:
		hcan.Init.Prescaler = 18u;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <setCanSpeed+0xb0>)
 80011f2:	2212      	movs	r2, #18
 80011f4:	605a      	str	r2, [r3, #4]
		break;
 80011f6:	e00a      	b.n	800120e <setCanSpeed+0x5a>

	case SPEED_1000_KBITS:
		hcan.Init.Prescaler = 9u;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <setCanSpeed+0xb0>)
 80011fa:	2209      	movs	r2, #9
 80011fc:	605a      	str	r2, [r3, #4]
		break;
 80011fe:	e006      	b.n	800120e <setCanSpeed+0x5a>

	default:
		hcan.Init.Prescaler = 18u;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <setCanSpeed+0xb0>)
 8001202:	2212      	movs	r2, #18
 8001204:	605a      	str	r2, [r3, #4]
		canSpeedOnStartup = 2u;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <setCanSpeed+0xb8>)
 8001208:	2202      	movs	r2, #2
 800120a:	701a      	strb	r2, [r3, #0]
		break;
 800120c:	bf00      	nop
	}

	hcan.Init.Mode = CAN_MODE_NORMAL;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <setCanSpeed+0xb0>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <setCanSpeed+0xb0>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <setCanSpeed+0xb0>)
 800121c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001220:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <setCanSpeed+0xb0>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <setCanSpeed+0xb0>)
 800122a:	2200      	movs	r2, #0
 800122c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <setCanSpeed+0xb0>)
 8001230:	2200      	movs	r2, #0
 8001232:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <setCanSpeed+0xb0>)
 8001236:	2200      	movs	r2, #0
 8001238:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <setCanSpeed+0xb0>)
 800123c:	2200      	movs	r2, #0
 800123e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <setCanSpeed+0xb0>)
 8001242:	2200      	movs	r2, #0
 8001244:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <setCanSpeed+0xb0>)
 8001248:	2200      	movs	r2, #0
 800124a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <setCanSpeed+0xb0>)
 800124e:	f002 fae5 	bl	800381c <HAL_CAN_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <setCanSpeed+0xa8>
	{
		Error_Handler();
 8001258:	f000 fb30 	bl	80018bc <Error_Handler>
	}

}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000328 	.word	0x20000328
 8001268:	40006400 	.word	0x40006400
 800126c:	200001e0 	.word	0x200001e0

08001270 <vLedStartup>:

void vLedStartup(){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	for (uint8_t i = 0u; i < 5u; i++) {
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e00a      	b.n	8001292 <vLedStartup+0x22>
		HAL_GPIO_TogglePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin);
 800127c:	2120      	movs	r1, #32
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f003 fd99 	bl	8004db8 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001286:	2032      	movs	r0, #50	; 0x32
 8001288:	f000 fed8 	bl	800203c <HAL_Delay>
	for (uint8_t i = 0u; i < 5u; i++) {
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	3301      	adds	r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b04      	cmp	r3, #4
 8001296:	d9f1      	bls.n	800127c <vLedStartup+0xc>
	}
	HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f003 fd72 	bl	8004d88 <HAL_GPIO_WritePin>


}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f000 fe5e 	bl	8001f70 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f856 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fac2 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 80012bc:	f000 fa8e 	bl	80017dc <MX_DMA_Init>
  MX_CAN_Init();
 80012c0:	f000 f992 	bl	80015e8 <MX_CAN_Init>
  MX_TIM16_Init();
 80012c4:	f000 fa62 	bl	800178c <MX_TIM16_Init>
  MX_ADC1_Init();
 80012c8:	f000 f8b2 	bl	8001430 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012cc:	f000 f9b6 	bl	800163c <MX_TIM3_Init>
  MX_TIM4_Init();
 80012d0:	f000 fa02 	bl	80016d8 <MX_TIM4_Init>
  MX_ADC2_Init();
 80012d4:	f000 f92a 	bl	800152c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  vLedStartup();
 80012d8:	f7ff ffca 	bl	8001270 <vLedStartup>

  can_status += HAL_CAN_Start(&hcan);
 80012dc:	4819      	ldr	r0, [pc, #100]	; (8001344 <main+0x98>)
 80012de:	f002 fc62 	bl	8003ba6 <HAL_CAN_Start>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <main+0x9c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <main+0x9c>)
 80012f0:	701a      	strb	r2, [r3, #0]
  can_status += HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012f2:	2102      	movs	r1, #2
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <main+0x98>)
 80012f6:	f002 fe8c 	bl	8004012 <HAL_CAN_ActivateNotification>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <main+0x9c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <main+0x9c>)
 8001308:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 800130a:	4810      	ldr	r0, [pc, #64]	; (800134c <main+0xa0>)
 800130c:	f005 fa1e 	bl	800674c <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001310:	2100      	movs	r1, #0
 8001312:	480f      	ldr	r0, [pc, #60]	; (8001350 <main+0xa4>)
 8001314:	f001 fcda 	bl	8002ccc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)internalData, ADC_BUF_LEN);
 8001318:	2202      	movs	r2, #2
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <main+0xa8>)
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <main+0xa4>)
 800131e:	f001 f8d3 	bl	80024c8 <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001322:	2100      	movs	r1, #0
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <main+0xac>)
 8001326:	f001 fcd1 	bl	8002ccc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcData, ADC_BUF_LEN);
 800132a:	2202      	movs	r2, #2
 800132c:	490b      	ldr	r1, [pc, #44]	; (800135c <main+0xb0>)
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <main+0xac>)
 8001330:	f001 f8ca 	bl	80024c8 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001334:	2104      	movs	r1, #4
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <main+0xb4>)
 8001338:	f005 fad0 	bl	80068dc <HAL_TIM_PWM_Start>

  vCan_messages_init();
 800133c:	f7ff ff04 	bl	8001148 <vCan_messages_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	e7fe      	b.n	8001340 <main+0x94>
 8001342:	bf00      	nop
 8001344:	20000328 	.word	0x20000328
 8001348:	20000494 	.word	0x20000494
 800134c:	200003e8 	.word	0x200003e8
 8001350:	20000200 	.word	0x20000200
 8001354:	200004a0 	.word	0x200004a0
 8001358:	20000250 	.word	0x20000250
 800135c:	200004a4 	.word	0x200004a4
 8001360:	2000039c 	.word	0x2000039c

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0a6      	sub	sp, #152	; 0x98
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800136e:	2228      	movs	r2, #40	; 0x28
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fc1c 	bl	8007bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2258      	movs	r2, #88	; 0x58
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f006 fc0e 	bl	8007bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001394:	2302      	movs	r3, #2
 8001396:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139c:	2310      	movs	r3, #16
 800139e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fd12 	bl	8004dec <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ce:	f000 fa75 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2302      	movs	r3, #2
 80013d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fd50 	bl	8005e94 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013fa:	f000 fa5f 	bl	80018bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_ADC12
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <SystemClock_Config+0xc8>)
 8001400:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001408:	2300      	movs	r3, #0
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800140c:	2300      	movs	r3, #0
 800140e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f004 ff24 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800141e:	f000 fa4d 	bl	80018bc <Error_Handler>
  }
}
 8001422:	bf00      	nop
 8001424:	3798      	adds	r7, #152	; 0x98
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	00a00080 	.word	0x00a00080

08001430 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001454:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001458:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MX_ADC1_Init+0xf8>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001460:	4b31      	ldr	r3, [pc, #196]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001468:	2201      	movs	r2, #1
 800146a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <MX_ADC1_Init+0xf8>)
 800146e:	2201      	movs	r2, #1
 8001470:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_ADC1_Init+0xf8>)
 800147c:	2200      	movs	r2, #0
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001482:	2201      	movs	r2, #1
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_ADC1_Init+0xf8>)
 800148e:	2202      	movs	r2, #2
 8001490:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_ADC1_Init+0xf8>)
 800149c:	2204      	movs	r2, #4
 800149e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_ADC1_Init+0xf8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_ADC1_Init+0xf8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ac:	481e      	ldr	r0, [pc, #120]	; (8001528 <MX_ADC1_Init+0xf8>)
 80014ae:	f000 fe11 	bl	80020d4 <HAL_ADC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f000 fa00 	bl	80018bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_ADC1_Init+0xf8>)
 80014c8:	f001 ff86 	bl	80033d8 <HAL_ADCEx_MultiModeConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80014d2:	f000 f9f3 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014d6:	2310      	movs	r3, #16
 80014d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014da:	2301      	movs	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80014e2:	2307      	movs	r3, #7
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_ADC1_Init+0xf8>)
 80014f4:	f001 fc84 	bl	8002e00 <HAL_ADC_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80014fe:	f000 f9dd 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001502:	2312      	movs	r3, #18
 8001504:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001506:	2302      	movs	r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_ADC1_Init+0xf8>)
 8001510:	f001 fc76 	bl	8002e00 <HAL_ADC_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800151a:	f000 f9cf 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000200 	.word	0x20000200

0800152c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <MX_ADC2_Init+0xb8>)
 8001546:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <MX_ADC2_Init+0xb4>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_ADC2_Init+0xb4>)
 800155c:	2201      	movs	r2, #1
 800155e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_ADC2_Init+0xb4>)
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001570:	2201      	movs	r2, #1
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_ADC2_Init+0xb4>)
 800157c:	2201      	movs	r2, #1
 800157e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_ADC2_Init+0xb4>)
 800158a:	2204      	movs	r2, #4
 800158c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001590:	2200      	movs	r2, #0
 8001592:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_ADC2_Init+0xb4>)
 8001596:	2200      	movs	r2, #0
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800159a:	4811      	ldr	r0, [pc, #68]	; (80015e0 <MX_ADC2_Init+0xb4>)
 800159c:	f000 fd9a 	bl	80020d4 <HAL_ADC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80015a6:	f000 f989 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015aa:	2304      	movs	r3, #4
 80015ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80015b6:	2307      	movs	r3, #7
 80015b8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <MX_ADC2_Init+0xb4>)
 80015c8:	f001 fc1a 	bl	8002e00 <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80015d2:	f000 f973 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000250 	.word	0x20000250
 80015e4:	50000100 	.word	0x50000100

080015e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
	setCanSpeed(canSpeedOnStartup);
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_CAN_Init+0x4c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fdde 	bl	80011b4 <setCanSpeed>
  */
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef can_filter_config;

  can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  can_filter_config.FilterBank = 10;
 80015fc:	230a      	movs	r3, #10
 80015fe:	617b      	str	r3, [r7, #20]
  can_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  can_filter_config.FilterIdHigh = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
  can_filter_config.FilterIdLow = 0x0000;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  can_filter_config.FilterMaskIdHigh = 0;			// decides which bits in id should be compared
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  can_filter_config.FilterMaskIdLow = 0x0000;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
  can_filter_config.SlaveStartFilterBank = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &can_filter_config);
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_CAN_Init+0x50>)
 8001626:	f002 f9f4 	bl	8003a12 <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200001e0 	.word	0x200001e0
 8001638:	20000328 	.word	0x20000328

0800163c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_TIM3_Init+0x94>)
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <MX_TIM3_Init+0x98>)
 800165e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001662:	2247      	movs	r2, #71	; 0x47
 8001664:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_TIM3_Init+0x94>)
 800166e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001672:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_TIM3_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001680:	4813      	ldr	r0, [pc, #76]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001682:	f005 f80b 	bl	800669c <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800168c:	f000 f916 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_TIM3_Init+0x94>)
 800169e:	f005 fc5d 	bl	8006f5c <HAL_TIM_ConfigClockSource>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016a8:	f000 f908 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ac:	2320      	movs	r3, #32
 80016ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_TIM3_Init+0x94>)
 80016ba:	f006 f9a5 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016c4:	f000 f8fa 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000350 	.word	0x20000350
 80016d4:	40000400 	.word	0x40000400

080016d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <MX_TIM4_Init+0xac>)
 80016fe:	4a22      	ldr	r2, [pc, #136]	; (8001788 <MX_TIM4_Init+0xb0>)
 8001700:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2880-1;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_TIM4_Init+0xac>)
 8001704:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001708:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_TIM4_Init+0xac>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM4_Init+0xac>)
 8001712:	22f9      	movs	r2, #249	; 0xf9
 8001714:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_TIM4_Init+0xac>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM4_Init+0xac>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM4_Init+0xac>)
 8001724:	f005 f882 	bl	800682c <HAL_TIM_PWM_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800172e:	f000 f8c5 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <MX_TIM4_Init+0xac>)
 8001742:	f006 f961 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800174c:	f000 f8b6 	bl	80018bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001750:	2360      	movs	r3, #96	; 0x60
 8001752:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	2204      	movs	r2, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM4_Init+0xac>)
 8001768:	f005 fae4 	bl	8006d34 <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001772:	f000 f8a3 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM4_Init+0xac>)
 8001778:	f000 fa4c 	bl	8001c14 <HAL_TIM_MspPostInit>

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000039c 	.word	0x2000039c
 8001788:	40000800 	.word	0x40000800

0800178c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_TIM16_Init+0x48>)
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <MX_TIM16_Init+0x4c>)
 8001794:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3000-1;
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_TIM16_Init+0x48>)
 8001798:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800179c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MX_TIM16_Init+0x48>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6000-1;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_TIM16_Init+0x48>)
 80017a6:	f241 726f 	movw	r2, #5999	; 0x176f
 80017aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_TIM16_Init+0x48>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_TIM16_Init+0x48>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_TIM16_Init+0x48>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM16_Init+0x48>)
 80017c0:	f004 ff6c 	bl	800669c <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80017ca:	f000 f877 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003e8 	.word	0x200003e8
 80017d8:	40014400 	.word	0x40014400

080017dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_DMA_Init+0x60>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <MX_DMA_Init+0x60>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6153      	str	r3, [r2, #20]
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_DMA_Init+0x60>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_DMA_Init+0x60>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <MX_DMA_Init+0x60>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <MX_DMA_Init+0x60>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	200b      	movs	r0, #11
 8001818:	f002 ff2b 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800181c:	200b      	movs	r0, #11
 800181e:	f002 ff44 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2038      	movs	r0, #56	; 0x38
 8001828:	f002 ff23 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800182c:	2038      	movs	r0, #56	; 0x38
 800182e:	f002 ff3c 	bl	80046aa <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_GPIO_Init+0x78>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <MX_GPIO_Init+0x78>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	6153      	str	r3, [r2, #20]
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_GPIO_Init+0x78>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_GPIO_Init+0x78>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <MX_GPIO_Init+0x78>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6153      	str	r3, [r2, #20]
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_GPIO_Init+0x78>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INTERNAL_LED_Pin|USER_GPIO_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2160      	movs	r1, #96	; 0x60
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f003 fa7b 	bl	8004d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INTERNAL_LED_Pin USER_GPIO_Pin */
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin|USER_GPIO_Pin;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f003 f8ca 	bl	8004a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_MspInit+0x44>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_MspInit+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_MspInit+0x44>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x44>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x44>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x44>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001930:	d145      	bne.n	80019be <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <HAL_ADC_MspInit+0x17c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a54      	ldr	r2, [pc, #336]	; (8001a8c <HAL_ADC_MspInit+0x17c>)
 800193a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_ADC_MspInit+0x17c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10b      	bne.n	800195c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6153      	str	r3, [r2, #20]
 8001950:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 800195e:	4a4e      	ldr	r2, [pc, #312]	; (8001a98 <HAL_ADC_MspInit+0x188>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001974:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 8001976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800197c:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 800197e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001982:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 8001986:	2220      	movs	r2, #32
 8001988:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001990:	4840      	ldr	r0, [pc, #256]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 8001992:	f002 fea4 	bl	80046de <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 800199c:	f7ff ff8e 	bl	80018bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3c      	ldr	r2, [pc, #240]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
 80019a6:	4a3b      	ldr	r2, [pc, #236]	; (8001a94 <HAL_ADC_MspInit+0x184>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2102      	movs	r1, #2
 80019b0:	2012      	movs	r0, #18
 80019b2:	f002 fe5e 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019b6:	2012      	movs	r0, #18
 80019b8:	f002 fe77 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80019bc:	e062      	b.n	8001a84 <HAL_ADC_MspInit+0x174>
  else if(hadc->Instance==ADC2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <HAL_ADC_MspInit+0x18c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d15d      	bne.n	8001a84 <HAL_ADC_MspInit+0x174>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_ADC_MspInit+0x17c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <HAL_ADC_MspInit+0x17c>)
 80019d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_ADC_MspInit+0x17c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10b      	bne.n	80019f2 <HAL_ADC_MspInit+0xe2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6153      	str	r3, [r2, #20]
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_ADC_MspInit+0x180>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f003 f810 	bl	8004a44 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a26:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <HAL_ADC_MspInit+0x194>)
 8001a28:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a4e:	2220      	movs	r2, #32
 8001a50:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a58:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a5a:	f002 fe40 	bl	80046de <HAL_DMA_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8001a64:	f7ff ff2a 	bl	80018bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_ADC_MspInit+0x190>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2102      	movs	r1, #2
 8001a78:	2012      	movs	r0, #18
 8001a7a:	f002 fdfa 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a7e:	2012      	movs	r0, #18
 8001a80:	f002 fe13 	bl	80046aa <HAL_NVIC_EnableIRQ>
}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	; 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200004b0 	.word	0x200004b0
 8001a90:	40021000 	.word	0x40021000
 8001a94:	200002a0 	.word	0x200002a0
 8001a98:	40020008 	.word	0x40020008
 8001a9c:	50000100 	.word	0x50000100
 8001aa0:	200002e4 	.word	0x200002e4
 8001aa4:	40020408 	.word	0x40020408

08001aa8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <HAL_CAN_MspInit+0xb0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d141      	bne.n	8001b4e <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_CAN_MspInit+0xb4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_CAN_MspInit+0xb4>)
 8001ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_CAN_MspInit+0xb4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_CAN_MspInit+0xb4>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_CAN_MspInit+0xb4>)
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	6153      	str	r3, [r2, #20]
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_CAN_MspInit+0xb4>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001afa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001b0c:	2309      	movs	r3, #9
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f002 ff93 	bl	8004a44 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2014      	movs	r0, #20
 8001b24:	f002 fda5 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001b28:	2014      	movs	r0, #20
 8001b2a:	f002 fdbe 	bl	80046aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2015      	movs	r0, #21
 8001b34:	f002 fd9d 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001b38:	2015      	movs	r0, #21
 8001b3a:	f002 fdb6 	bl	80046aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2016      	movs	r0, #22
 8001b44:	f002 fd95 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8001b48:	2016      	movs	r0, #22
 8001b4a:	f002 fdae 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	; 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40006400 	.word	0x40006400
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <HAL_TIM_Base_MspInit+0x68>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10c      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_TIM_Base_MspInit+0x6c>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <HAL_TIM_Base_MspInit+0x6c>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_TIM_Base_MspInit+0x6c>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b8a:	e018      	b.n	8001bbe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <HAL_TIM_Base_MspInit+0x70>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d113      	bne.n	8001bbe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_TIM_Base_MspInit+0x6c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_TIM_Base_MspInit+0x6c>)
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	6193      	str	r3, [r2, #24]
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_TIM_Base_MspInit+0x6c>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2019      	movs	r0, #25
 8001bb4:	f002 fd5d 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bb8:	2019      	movs	r0, #25
 8001bba:	f002 fd76 	bl	80046aa <HAL_NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40014400 	.word	0x40014400

08001bd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_TIM_PWM_MspInit+0x38>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10b      	bne.n	8001bfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40000800 	.word	0x40000800
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_TIM_MspPostInit+0x64>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d11b      	bne.n	8001c6e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_TIM_MspPostInit+0x68>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_TIM_MspPostInit+0x68>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6153      	str	r3, [r2, #20]
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_TIM_MspPostInit+0x68>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_TIM_MspPostInit+0x6c>)
 8001c6a:	f002 feeb 	bl	8004a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40000800 	.word	0x40000800
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000400 	.word	0x48000400

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f000 f994 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <DMA1_Channel1_IRQHandler+0x10>)
 8001cde:	f002 fda4 	bl	800482a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200002a0 	.word	0x200002a0

08001cec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <ADC1_2_IRQHandler+0x14>)
 8001cf2:	f000 fd05 	bl	8002700 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <ADC1_2_IRQHandler+0x18>)
 8001cf8:	f000 fd02 	bl	8002700 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000200 	.word	0x20000200
 8001d04:	20000250 	.word	0x20000250

08001d08 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001d0e:	f002 f9a6 	bl	800405e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000328 	.word	0x20000328

08001d1c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <CAN_RX1_IRQHandler+0x10>)
 8001d22:	f002 f99c 	bl	800405e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000328 	.word	0x20000328

08001d30 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <CAN_SCE_IRQHandler+0x10>)
 8001d36:	f002 f992 	bl	800405e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000328 	.word	0x20000328

08001d44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d4a:	f004 fed3 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200003e8 	.word	0x200003e8

08001d58 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA2_Channel1_IRQHandler+0x10>)
 8001d5e:	f002 fd64 	bl	800482a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200002e4 	.word	0x200002e4

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_kill>:

int _kill(int pid, int sig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d86:	f005 fee9 	bl	8007b5c <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2216      	movs	r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffe7 	bl	8001d7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dae:	e7fe      	b.n	8001dae <_exit+0x12>

08001db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e00a      	b.n	8001dd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dc2:	f3af 8000 	nop.w
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	60ba      	str	r2, [r7, #8]
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbf0      	blt.n	8001dc2 <_read+0x12>
	}

return len;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e009      	b.n	8001e10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf1      	blt.n	8001dfc <_write+0x12>
	}
	return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_close>:

int _close(int file)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
	return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_isatty>:

int _isatty(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
	return 1;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f005 fe4e 	bl	8007b5c <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20010000 	.word	0x20010000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	200004b4 	.word	0x200004b4
 8001ef4:	200004d0 	.word	0x200004d0

08001ef8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f20:	f7ff ffea 	bl	8001ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f26:	490d      	ldr	r1, [pc, #52]	; (8001f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <LoopForever+0xe>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f3c:	4c0a      	ldr	r4, [pc, #40]	; (8001f68 <LoopForever+0x16>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f005 fe0d 	bl	8007b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4e:	f7ff f9ad 	bl	80012ac <main>

08001f52 <LoopForever>:

LoopForever:
    b LoopForever
 8001f52:	e7fe      	b.n	8001f52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f60:	0800aa64 	.word	0x0800aa64
  ldr r2, =_sbss
 8001f64:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f68:	200004cc 	.word	0x200004cc

08001f6c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC3_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_Init+0x28>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_Init+0x28>)
 8001f7a:	f043 0310 	orr.w	r3, r3, #16
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f002 fb6b 	bl	800465c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	200f      	movs	r0, #15
 8001f88:	f000 f808 	bl	8001f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8c:	f7ff fc9c 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_InitTick+0x54>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x58>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fb83 	bl	80046c6 <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00e      	b.n	8001fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d80a      	bhi.n	8001fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd8:	f002 fb4b 	bl	8004672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_InitTick+0x5c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000004 	.word	0x20000004
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	20000008 	.word	0x20000008

08001ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000000c 	.word	0x2000000c
 8002020:	200004b8 	.word	0x200004b8

08002024 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;  
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	200004b8 	.word	0x200004b8

0800203c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff ffee 	bl	8002024 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002062:	bf00      	nop
 8002064:	f7ff ffde 	bl	8002024 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000000c 	.word	0x2000000c

08002084 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b09a      	sub	sp, #104	; 0x68
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e1e3      	b.n	80024bc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d176      	bne.n	80021f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d152      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fbf1 	bl	8001910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13b      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f001 fb07 	bl	8003750 <ADC_Disable>
 8002142:	4603      	mov	r3, r0
 8002144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12f      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
 8002154:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12b      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002164:	f023 0302 	bic.w	r3, r3, #2
 8002168:	f043 0202 	orr.w	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800217e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800218e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002190:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_ADC_Init+0x308>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a92      	ldr	r2, [pc, #584]	; (80023e0 <HAL_ADC_Init+0x30c>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0c9a      	lsrs	r2, r3, #18
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a6:	e002      	b.n	80021ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021d0:	d110      	bne.n	80021f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f023 0312 	bic.w	r3, r3, #18
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 8150 	bne.w	80024a2 <HAL_ADC_Init+0x3ce>
 8002202:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 814b 	bne.w	80024a2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8143 	bne.w	80024a2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002224:	f043 0202 	orr.w	r2, r3, #2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d004      	beq.n	8002240 <HAL_ADC_Init+0x16c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6a      	ldr	r2, [pc, #424]	; (80023e4 <HAL_ADC_Init+0x310>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_ADC_Init+0x170>
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_ADC_Init+0x314>)
 8002242:	e000      	b.n	8002246 <HAL_ADC_Init+0x172>
 8002244:	4b69      	ldr	r3, [pc, #420]	; (80023ec <HAL_ADC_Init+0x318>)
 8002246:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002250:	d102      	bne.n	8002258 <HAL_ADC_Init+0x184>
 8002252:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_ADC_Init+0x310>)
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e01a      	b.n	800228e <HAL_ADC_Init+0x1ba>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a61      	ldr	r2, [pc, #388]	; (80023e4 <HAL_ADC_Init+0x310>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d103      	bne.n	800226a <HAL_ADC_Init+0x196>
 8002262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e011      	b.n	800228e <HAL_ADC_Init+0x1ba>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_ADC_Init+0x31c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_ADC_Init+0x1a6>
 8002274:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_ADC_Init+0x320>)
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e009      	b.n	800228e <HAL_ADC_Init+0x1ba>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_ADC_Init+0x320>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d102      	bne.n	800228a <HAL_ADC_Init+0x1b6>
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <HAL_ADC_Init+0x31c>)
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e001      	b.n	800228e <HAL_ADC_Init+0x1ba>
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d108      	bne.n	80022ae <HAL_ADC_Init+0x1da>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_Init+0x1da>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_ADC_Init+0x1dc>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11c      	bne.n	80022ee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_ADC_Init+0x202>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x202>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_Init+0x204>
 80022d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d108      	bne.n	80022ee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e5b      	ldrb	r3, [r3, #25]
 80022f2:	035b      	lsls	r3, r3, #13
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f8:	2a01      	cmp	r2, #1
 80022fa:	d002      	beq.n	8002302 <HAL_ADC_Init+0x22e>
 80022fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002300:	e000      	b.n	8002304 <HAL_ADC_Init+0x230>
 8002302:	2200      	movs	r2, #0
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4313      	orrs	r3, r2
 8002312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002314:	4313      	orrs	r3, r2
 8002316:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d11b      	bne.n	800235a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e5b      	ldrb	r3, [r3, #25]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	3b01      	subs	r3, #1
 8002330:	045a      	lsls	r2, r3, #17
 8002332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002334:	4313      	orrs	r3, r2
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	663b      	str	r3, [r7, #96]	; 0x60
 800233c:	e00d      	b.n	800235a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b01      	cmp	r3, #1
 8002360:	d054      	beq.n	800240c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_ADC_Init+0x31c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_ADC_Init+0x2a2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_ADC_Init+0x320>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d140      	bne.n	80023f8 <HAL_ADC_Init+0x324>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800237e:	d02a      	beq.n	80023d6 <HAL_ADC_Init+0x302>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002388:	d022      	beq.n	80023d0 <HAL_ADC_Init+0x2fc>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002392:	d01a      	beq.n	80023ca <HAL_ADC_Init+0x2f6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800239c:	d012      	beq.n	80023c4 <HAL_ADC_Init+0x2f0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80023a6:	d00a      	beq.n	80023be <HAL_ADC_Init+0x2ea>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80023b0:	d002      	beq.n	80023b8 <HAL_ADC_Init+0x2e4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	e023      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023bc:	e020      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023c2:	e01d      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023c8:	e01a      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ce:	e017      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023d0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80023d4:	e014      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023da:	e011      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023dc:	20000004 	.word	0x20000004
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	50000100 	.word	0x50000100
 80023e8:	50000300 	.word	0x50000300
 80023ec:	50000700 	.word	0x50000700
 80023f0:	50000400 	.word	0x50000400
 80023f4:	50000500 	.word	0x50000500
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002404:	4313      	orrs	r3, r2
 8002406:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002408:	4313      	orrs	r3, r2
 800240a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d114      	bne.n	8002444 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002428:	f023 0302 	bic.w	r3, r3, #2
 800242c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e1b      	ldrb	r3, [r3, #24]
 8002432:	039a      	lsls	r2, r3, #14
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4313      	orrs	r3, r2
 800243e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002440:	4313      	orrs	r3, r2
 8002442:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_ADC_Init+0x3f0>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10c      	bne.n	800247a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f023 010f 	bic.w	r1, r3, #15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	e007      	b.n	800248a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020f 	bic.w	r2, r2, #15
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f023 0303 	bic.w	r3, r3, #3
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
 80024a0:	e00a      	b.n	80024b8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f023 0312 	bic.w	r3, r3, #18
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3768      	adds	r7, #104	; 0x68
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fff0c007 	.word	0xfff0c007

080024c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 80f7 	bne.w	80026d6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_Start_DMA+0x2e>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e0f2      	b.n	80026dc <HAL_ADC_Start_DMA+0x214>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002506:	d004      	beq.n	8002512 <HAL_ADC_Start_DMA+0x4a>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <HAL_ADC_Start_DMA+0x21c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d109      	bne.n	8002526 <HAL_ADC_Start_DMA+0x5e>
 8002512:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <HAL_ADC_Start_DMA+0x220>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf0c      	ite	eq
 800251e:	2301      	moveq	r3, #1
 8002520:	2300      	movne	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e008      	b.n	8002538 <HAL_ADC_Start_DMA+0x70>
 8002526:	4b71      	ldr	r3, [pc, #452]	; (80026ec <HAL_ADC_Start_DMA+0x224>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80c5 	beq.w	80026c8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f001 f8a2 	bl	8003688 <ADC_Enable>
 8002544:	4603      	mov	r3, r0
 8002546:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80b7 	bne.w	80026be <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256c:	d004      	beq.n	8002578 <HAL_ADC_Start_DMA+0xb0>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5c      	ldr	r2, [pc, #368]	; (80026e4 <HAL_ADC_Start_DMA+0x21c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d106      	bne.n	8002586 <HAL_ADC_Start_DMA+0xbe>
 8002578:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_ADC_Start_DMA+0x220>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <HAL_ADC_Start_DMA+0xde>
 8002584:	e005      	b.n	8002592 <HAL_ADC_Start_DMA+0xca>
 8002586:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_ADC_Start_DMA+0x224>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_ADC_Start_DMA+0xde>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800259a:	d004      	beq.n	80025a6 <HAL_ADC_Start_DMA+0xde>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a53      	ldr	r2, [pc, #332]	; (80026f0 <HAL_ADC_Start_DMA+0x228>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d115      	bne.n	80025d2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d036      	beq.n	800262e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025d0:	e02d      	b.n	800262e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e6:	d004      	beq.n	80025f2 <HAL_ADC_Start_DMA+0x12a>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3d      	ldr	r2, [pc, #244]	; (80026e4 <HAL_ADC_Start_DMA+0x21c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10a      	bne.n	8002608 <HAL_ADC_Start_DMA+0x140>
 80025f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e008      	b.n	800261a <HAL_ADC_Start_DMA+0x152>
 8002608:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_ADC_Start_DMA+0x228>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002626:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263a:	d106      	bne.n	800264a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	f023 0206 	bic.w	r2, r3, #6
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
 8002648:	e002      	b.n	8002650 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_ADC_Start_DMA+0x22c>)
 800265e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <HAL_ADC_Start_DMA+0x230>)
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	4a23      	ldr	r2, [pc, #140]	; (80026fc <HAL_ADC_Start_DMA+0x234>)
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	221c      	movs	r2, #28
 8002676:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0210 	orr.w	r2, r2, #16
 8002686:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3340      	adds	r3, #64	; 0x40
 80026a2:	4619      	mov	r1, r3
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f002 f860 	bl	800476c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0204 	orr.w	r2, r2, #4
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	e00d      	b.n	80026da <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026c6:	e008      	b.n	80026da <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026d4:	e001      	b.n	80026da <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
 80026d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	50000100 	.word	0x50000100
 80026e8:	50000300 	.word	0x50000300
 80026ec:	50000700 	.word	0x50000700
 80026f0:	50000400 	.word	0x50000400
 80026f4:	080035bd 	.word	0x080035bd
 80026f8:	08003637 	.word	0x08003637
 80026fc:	08003653 	.word	0x08003653

08002700 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d004      	beq.n	8002738 <HAL_ADC_IRQHandler+0x38>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80bc 	beq.w	80028bc <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80b6 	beq.w	80028bc <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002770:	d004      	beq.n	800277c <HAL_ADC_IRQHandler+0x7c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a90      	ldr	r2, [pc, #576]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d106      	bne.n	800278a <HAL_ADC_IRQHandler+0x8a>
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <HAL_ADC_IRQHandler+0x2bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03e      	beq.n	8002806 <HAL_ADC_IRQHandler+0x106>
 8002788:	e005      	b.n	8002796 <HAL_ADC_IRQHandler+0x96>
 800278a:	4b8d      	ldr	r3, [pc, #564]	; (80029c0 <HAL_ADC_IRQHandler+0x2c0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2b00      	cmp	r3, #0
 8002794:	d037      	beq.n	8002806 <HAL_ADC_IRQHandler+0x106>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279e:	d004      	beq.n	80027aa <HAL_ADC_IRQHandler+0xaa>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a84      	ldr	r2, [pc, #528]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_IRQHandler+0xb8>
 80027aa:	4b84      	ldr	r3, [pc, #528]	; (80029bc <HAL_ADC_IRQHandler+0x2bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d027      	beq.n	8002806 <HAL_ADC_IRQHandler+0x106>
 80027b6:	e005      	b.n	80027c4 <HAL_ADC_IRQHandler+0xc4>
 80027b8:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_ADC_IRQHandler+0x2c0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d020      	beq.n	8002806 <HAL_ADC_IRQHandler+0x106>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_IRQHandler+0xd8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a79      	ldr	r2, [pc, #484]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d106      	bne.n	80027e6 <HAL_ADC_IRQHandler+0xe6>
 80027d8:	4b78      	ldr	r3, [pc, #480]	; (80029bc <HAL_ADC_IRQHandler+0x2bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d010      	beq.n	8002806 <HAL_ADC_IRQHandler+0x106>
 80027e4:	e005      	b.n	80027f2 <HAL_ADC_IRQHandler+0xf2>
 80027e6:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_ADC_IRQHandler+0x2c0>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	d009      	beq.n	8002806 <HAL_ADC_IRQHandler+0x106>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fa:	d004      	beq.n	8002806 <HAL_ADC_IRQHandler+0x106>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a70      	ldr	r2, [pc, #448]	; (80029c4 <HAL_ADC_IRQHandler+0x2c4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d104      	bne.n	8002810 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e00f      	b.n	8002830 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002818:	d004      	beq.n	8002824 <HAL_ADC_IRQHandler+0x124>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a66      	ldr	r2, [pc, #408]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <HAL_ADC_IRQHandler+0x12a>
 8002824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002828:	e000      	b.n	800282c <HAL_ADC_IRQHandler+0x12c>
 800282a:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <HAL_ADC_IRQHandler+0x2c4>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800283a:	2b00      	cmp	r3, #0
 800283c:	d137      	bne.n	80028ae <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002844:	2b00      	cmp	r3, #0
 8002846:	d132      	bne.n	80028ae <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02d      	beq.n	80028ae <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11a      	bne.n	8002896 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 020c 	bic.w	r2, r2, #12
 800286e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d112      	bne.n	80028ae <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
 8002894:	e00b      	b.n	80028ae <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fbe8 	bl	8002084 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	220c      	movs	r2, #12
 80028ba:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x1d0>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8138 	beq.w	8002b4c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8132 	beq.w	8002b4c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_IRQHandler+0x208>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a2d      	ldr	r2, [pc, #180]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d106      	bne.n	8002916 <HAL_ADC_IRQHandler+0x216>
 8002908:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <HAL_ADC_IRQHandler+0x2bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2b00      	cmp	r3, #0
 8002912:	d03e      	beq.n	8002992 <HAL_ADC_IRQHandler+0x292>
 8002914:	e005      	b.n	8002922 <HAL_ADC_IRQHandler+0x222>
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_ADC_IRQHandler+0x2c0>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2b00      	cmp	r3, #0
 8002920:	d037      	beq.n	8002992 <HAL_ADC_IRQHandler+0x292>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292a:	d004      	beq.n	8002936 <HAL_ADC_IRQHandler+0x236>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d106      	bne.n	8002944 <HAL_ADC_IRQHandler+0x244>
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_ADC_IRQHandler+0x2bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2b05      	cmp	r3, #5
 8002940:	d027      	beq.n	8002992 <HAL_ADC_IRQHandler+0x292>
 8002942:	e005      	b.n	8002950 <HAL_ADC_IRQHandler+0x250>
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_ADC_IRQHandler+0x2c0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2b05      	cmp	r3, #5
 800294e:	d020      	beq.n	8002992 <HAL_ADC_IRQHandler+0x292>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002958:	d004      	beq.n	8002964 <HAL_ADC_IRQHandler+0x264>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d106      	bne.n	8002972 <HAL_ADC_IRQHandler+0x272>
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_ADC_IRQHandler+0x2bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2b09      	cmp	r3, #9
 800296e:	d010      	beq.n	8002992 <HAL_ADC_IRQHandler+0x292>
 8002970:	e005      	b.n	800297e <HAL_ADC_IRQHandler+0x27e>
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_ADC_IRQHandler+0x2c0>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2b09      	cmp	r3, #9
 800297c:	d009      	beq.n	8002992 <HAL_ADC_IRQHandler+0x292>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002986:	d004      	beq.n	8002992 <HAL_ADC_IRQHandler+0x292>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <HAL_ADC_IRQHandler+0x2c4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d104      	bne.n	800299c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e018      	b.n	80029ce <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a4:	d004      	beq.n	80029b0 <HAL_ADC_IRQHandler+0x2b0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <HAL_ADC_IRQHandler+0x2b8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d10b      	bne.n	80029c8 <HAL_ADC_IRQHandler+0x2c8>
 80029b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029b4:	e009      	b.n	80029ca <HAL_ADC_IRQHandler+0x2ca>
 80029b6:	bf00      	nop
 80029b8:	50000100 	.word	0x50000100
 80029bc:	50000300 	.word	0x50000300
 80029c0:	50000700 	.word	0x50000700
 80029c4:	50000400 	.word	0x50000400
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_ADC_IRQHandler+0x514>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 80b0 	bne.w	8002b3e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80a3 	bne.w	8002b3e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 809d 	bne.w	8002b3e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8097 	beq.w	8002b3e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a18:	d004      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x324>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7e      	ldr	r2, [pc, #504]	; (8002c18 <HAL_ADC_IRQHandler+0x518>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d106      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x332>
 8002a24:	4b7d      	ldr	r3, [pc, #500]	; (8002c1c <HAL_ADC_IRQHandler+0x51c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d03e      	beq.n	8002aae <HAL_ADC_IRQHandler+0x3ae>
 8002a30:	e005      	b.n	8002a3e <HAL_ADC_IRQHandler+0x33e>
 8002a32:	4b7b      	ldr	r3, [pc, #492]	; (8002c20 <HAL_ADC_IRQHandler+0x520>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d037      	beq.n	8002aae <HAL_ADC_IRQHandler+0x3ae>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a46:	d004      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x352>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a72      	ldr	r2, [pc, #456]	; (8002c18 <HAL_ADC_IRQHandler+0x518>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d106      	bne.n	8002a60 <HAL_ADC_IRQHandler+0x360>
 8002a52:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <HAL_ADC_IRQHandler+0x51c>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d027      	beq.n	8002aae <HAL_ADC_IRQHandler+0x3ae>
 8002a5e:	e005      	b.n	8002a6c <HAL_ADC_IRQHandler+0x36c>
 8002a60:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <HAL_ADC_IRQHandler+0x520>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d020      	beq.n	8002aae <HAL_ADC_IRQHandler+0x3ae>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a74:	d004      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x380>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_ADC_IRQHandler+0x518>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_IRQHandler+0x38e>
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_ADC_IRQHandler+0x51c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2b07      	cmp	r3, #7
 8002a8a:	d010      	beq.n	8002aae <HAL_ADC_IRQHandler+0x3ae>
 8002a8c:	e005      	b.n	8002a9a <HAL_ADC_IRQHandler+0x39a>
 8002a8e:	4b64      	ldr	r3, [pc, #400]	; (8002c20 <HAL_ADC_IRQHandler+0x520>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2b07      	cmp	r3, #7
 8002a98:	d009      	beq.n	8002aae <HAL_ADC_IRQHandler+0x3ae>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa2:	d004      	beq.n	8002aae <HAL_ADC_IRQHandler+0x3ae>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5a      	ldr	r2, [pc, #360]	; (8002c14 <HAL_ADC_IRQHandler+0x514>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d104      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e00f      	b.n	8002ad8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_IRQHandler+0x3cc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_ADC_IRQHandler+0x518>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d102      	bne.n	8002ad2 <HAL_ADC_IRQHandler+0x3d2>
 8002acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ad0:	e000      	b.n	8002ad4 <HAL_ADC_IRQHandler+0x3d4>
 8002ad2:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_ADC_IRQHandler+0x514>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d12d      	bne.n	8002b3e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11a      	bne.n	8002b26 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002afe:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d112      	bne.n	8002b3e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
 8002b24:	e00b      	b.n	8002b3e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f936 	bl	8002db0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2260      	movs	r2, #96	; 0x60
 8002b4a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d011      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x47a>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00c      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fa9d 	bl	80020ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d012      	beq.n	8002baa <HAL_ADC_IRQHandler+0x4aa>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f91c 	bl	8002dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <HAL_ADC_IRQHandler+0x4da>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f90e 	bl	8002dec <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d04f      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x584>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d04a      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e02d      	b.n	8002c58 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c04:	d004      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x510>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a03      	ldr	r2, [pc, #12]	; (8002c18 <HAL_ADC_IRQHandler+0x518>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d109      	bne.n	8002c24 <HAL_ADC_IRQHandler+0x524>
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <HAL_ADC_IRQHandler+0x51c>)
 8002c12:	e008      	b.n	8002c26 <HAL_ADC_IRQHandler+0x526>
 8002c14:	50000400 	.word	0x50000400
 8002c18:	50000100 	.word	0x50000100
 8002c1c:	50000300 	.word	0x50000300
 8002c20:	50000700 	.word	0x50000700
 8002c24:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_ADC_IRQHandler+0x5c8>)
 8002c26:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10a      	bne.n	8002c58 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002c42:	2301      	movs	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e007      	b.n	8002c58 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10e      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fa22 	bl	80020c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2210      	movs	r2, #16
 8002c82:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d018      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x5c0>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	f043 0208 	orr.w	r2, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f882 	bl	8002dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002cc0:	bf00      	nop
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	50000700 	.word	0x50000700

08002ccc <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e05f      	b.n	8002da8 <HAL_ADCEx_Calibration_Start+0xdc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fd2d 	bl	8003750 <ADC_Disable>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d14e      	bne.n	8002d9e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002d14:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d2a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d3a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002d3c:	f7ff f972 	bl	8002024 <HAL_GetTick>
 8002d40:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002d42:	e01c      	b.n	8002d7e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d44:	f7ff f96e 	bl	8002024 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b0a      	cmp	r3, #10
 8002d50:	d915      	bls.n	8002d7e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d60:	d10d      	bne.n	8002d7e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f023 0312 	bic.w	r3, r3, #18
 8002d6a:	f043 0210 	orr.w	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e014      	b.n	8002da8 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8c:	d0da      	beq.n	8002d44 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b09b      	sub	sp, #108	; 0x6c
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x22>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e2ca      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5b8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 82ae 	bne.w	8003396 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d81c      	bhi.n	8002e7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	461a      	mov	r2, r3
 8002e56:	231f      	movs	r3, #31
 8002e58:	4093      	lsls	r3, r2
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	4019      	ands	r1, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7a:	e063      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d81e      	bhi.n	8002ec2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	3b1e      	subs	r3, #30
 8002e98:	221f      	movs	r2, #31
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	4019      	ands	r1, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	3b1e      	subs	r3, #30
 8002eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec0:	e040      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b0e      	cmp	r3, #14
 8002ec8:	d81e      	bhi.n	8002f08 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	3b3c      	subs	r3, #60	; 0x3c
 8002ede:	221f      	movs	r2, #31
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4019      	ands	r1, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	3b3c      	subs	r3, #60	; 0x3c
 8002efa:	fa00 f203 	lsl.w	r2, r0, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
 8002f06:	e01d      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	3b5a      	subs	r3, #90	; 0x5a
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4019      	ands	r1, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	3b5a      	subs	r3, #90	; 0x5a
 8002f38:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 80e5 	bne.w	800311e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d91c      	bls.n	8002f96 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6999      	ldr	r1, [r3, #24]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b1e      	subs	r3, #30
 8002f6e:	2207      	movs	r2, #7
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4019      	ands	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6898      	ldr	r0, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	3b1e      	subs	r3, #30
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	619a      	str	r2, [r3, #24]
 8002f94:	e019      	b.n	8002fca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6959      	ldr	r1, [r3, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4019      	ands	r1, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6898      	ldr	r0, [r3, #8]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d84f      	bhi.n	800308c <HAL_ADC_ConfigChannel+0x28c>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_ADC_ConfigChannel+0x1f4>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003027 	.word	0x08003027
 8002ffc:	08003049 	.word	0x08003049
 8003000:	0800306b 	.word	0x0800306b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800300a:	4b9a      	ldr	r3, [pc, #616]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 800300c:	4013      	ands	r3, r2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	0691      	lsls	r1, r2, #26
 8003014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003016:	430a      	orrs	r2, r1
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003022:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003024:	e07e      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800302c:	4b91      	ldr	r3, [pc, #580]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 800302e:	4013      	ands	r3, r2
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	0691      	lsls	r1, r2, #26
 8003036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003038:	430a      	orrs	r2, r1
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003044:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003046:	e06d      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800304e:	4b89      	ldr	r3, [pc, #548]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 8003050:	4013      	ands	r3, r2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	0691      	lsls	r1, r2, #26
 8003058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800305a:	430a      	orrs	r2, r1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003066:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003068:	e05c      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003070:	4b80      	ldr	r3, [pc, #512]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 8003072:	4013      	ands	r3, r2
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	0691      	lsls	r1, r2, #26
 800307a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800307c:	430a      	orrs	r2, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003088:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800308a:	e04b      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	069b      	lsls	r3, r3, #26
 800309c:	429a      	cmp	r2, r3
 800309e:	d107      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030ae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	069b      	lsls	r3, r3, #26
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d107      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030d2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	069b      	lsls	r3, r3, #26
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d107      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030f6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	069b      	lsls	r3, r3, #26
 8003108:	429a      	cmp	r2, r3
 800310a:	d10a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800311a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800311c:	e001      	b.n	8003122 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003122:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x344>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x344>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_ADC_ConfigChannel+0x346>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 8130 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d00f      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003172:	e049      	b.n	8003208 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b09      	cmp	r3, #9
 8003194:	d91c      	bls.n	80031d0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6999      	ldr	r1, [r3, #24]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	3b1b      	subs	r3, #27
 80031a8:	2207      	movs	r2, #7
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4019      	ands	r1, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6898      	ldr	r0, [r3, #8]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	3b1b      	subs	r3, #27
 80031c2:	fa00 f203 	lsl.w	r2, r0, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	619a      	str	r2, [r3, #24]
 80031ce:	e01b      	b.n	8003208 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6959      	ldr	r1, [r3, #20]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	2207      	movs	r2, #7
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4019      	ands	r1, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6898      	ldr	r0, [r3, #8]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADC_ConfigChannel+0x41c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a18      	ldr	r2, [pc, #96]	; (8003278 <HAL_ADC_ConfigChannel+0x478>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x420>
 800321c:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_ADC_ConfigChannel+0x47c>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_ConfigChannel+0x422>
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_ADC_ConfigChannel+0x480>)
 8003222:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b10      	cmp	r3, #16
 800322a:	d105      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800322c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800323c:	2b11      	cmp	r3, #17
 800323e:	d105      	bne.n	800324c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003250:	2b12      	cmp	r3, #18
 8003252:	f040 80ab 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80a4 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326c:	d10a      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x484>
 800326e:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_ADC_ConfigChannel+0x478>)
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e022      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 8003274:	83fff000 	.word	0x83fff000
 8003278:	50000100 	.word	0x50000100
 800327c:	50000300 	.word	0x50000300
 8003280:	50000700 	.word	0x50000700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4e      	ldr	r2, [pc, #312]	; (80033c4 <HAL_ADC_ConfigChannel+0x5c4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d103      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x496>
 800328e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e011      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_ADC_ConfigChannel+0x5c8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d102      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x4a6>
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_ADC_ConfigChannel+0x5cc>)
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e009      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a48      	ldr	r2, [pc, #288]	; (80033cc <HAL_ADC_ConfigChannel+0x5cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d102      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x4b6>
 80032b0:	4b45      	ldr	r3, [pc, #276]	; (80033c8 <HAL_ADC_ConfigChannel+0x5c8>)
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e001      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d108      	bne.n	80032da <HAL_ADC_ConfigChannel+0x4da>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x4da>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_ADC_ConfigChannel+0x4dc>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d150      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x502>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x502>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_ADC_ConfigChannel+0x504>
 8003302:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003304:	2b00      	cmp	r3, #0
 8003306:	d13c      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d11d      	bne.n	800334c <HAL_ADC_ConfigChannel+0x54c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003318:	d118      	bne.n	800334c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_ADC_ConfigChannel+0x5d4>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0c9a      	lsrs	r2, r3, #18
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800333c:	e002      	b.n	8003344 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f9      	bne.n	800333e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800334a:	e02e      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b11      	cmp	r3, #17
 8003352:	d10b      	bne.n	800336c <HAL_ADC_ConfigChannel+0x56c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800335c:	d106      	bne.n	800336c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003368:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800336a:	e01e      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b12      	cmp	r3, #18
 8003372:	d11a      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800337c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003380:	e013      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003394:	e00a      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033a8:	e000      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033aa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	376c      	adds	r7, #108	; 0x6c
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	50000100 	.word	0x50000100
 80033c8:	50000400 	.word	0x50000400
 80033cc:	50000500 	.word	0x50000500
 80033d0:	20000004 	.word	0x20000004
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80033d8:	b480      	push	{r7}
 80033da:	b099      	sub	sp, #100	; 0x64
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f0:	d102      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	e01a      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	e011      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a67      	ldr	r2, [pc, #412]	; (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d102      	bne.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003414:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	e009      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a64      	ldr	r2, [pc, #400]	; (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d102      	bne.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003424:	4b61      	ldr	r3, [pc, #388]	; (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	e001      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b0      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0a9      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 808d 	bne.w	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8086 	bne.w	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003474:	d004      	beq.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003482:	e000      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003484:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003486:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d040      	beq.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034a2:	035b      	lsls	r3, r3, #13
 80034a4:	430b      	orrs	r3, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034aa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d108      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d15c      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80034ee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d14b      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80034f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034fc:	f023 030f 	bic.w	r3, r3, #15
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	6811      	ldr	r1, [r2, #0]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	430a      	orrs	r2, r1
 800350a:	431a      	orrs	r2, r3
 800350c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003510:	e03c      	b.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d123      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003560:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d112      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003574:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003576:	e009      	b.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800358a:	e000      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800358c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800359a:	4618      	mov	r0, r3
 800359c:	3764      	adds	r7, #100	; 0x64
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	50000100 	.word	0x50000100
 80035ac:	50000400 	.word	0x50000400
 80035b0:	50000500 	.word	0x50000500
 80035b4:	50000300 	.word	0x50000300
 80035b8:	50000700 	.word	0x50000700

080035bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d126      	bne.n	8003624 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7fe fd31 	bl	8002084 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003622:	e004      	b.n	800362e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7fe fd27 	bl	8002098 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7fe fd21 	bl	80020c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d108      	bne.n	80036b4 <ADC_Enable+0x2c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <ADC_Enable+0x2c>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <ADC_Enable+0x2e>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d143      	bne.n	8003742 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <ADC_Enable+0xc4>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e02f      	b.n	8003744 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80036f4:	f7fe fc96 	bl	8002024 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036fa:	e01b      	b.n	8003734 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036fc:	f7fe fc92 	bl	8002024 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d914      	bls.n	8003734 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d00d      	beq.n	8003734 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e007      	b.n	8003744 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d1dc      	bne.n	80036fc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	8000003f 	.word	0x8000003f

08003750 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <ADC_Disable+0x2c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <ADC_Disable+0x2c>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <ADC_Disable+0x2e>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d047      	beq.n	8003812 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030d 	and.w	r3, r3, #13
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10f      	bne.n	80037b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0202 	orr.w	r2, r2, #2
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2203      	movs	r2, #3
 80037a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80037a8:	f7fe fc3c 	bl	8002024 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037ae:	e029      	b.n	8003804 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0210 	orr.w	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e023      	b.n	8003814 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037cc:	f7fe fc2a 	bl	8002024 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d914      	bls.n	8003804 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10d      	bne.n	8003804 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f043 0210 	orr.w	r2, r3, #16
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f043 0201 	orr.w	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e007      	b.n	8003814 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d0dc      	beq.n	80037cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0ed      	b.n	8003a0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe f934 	bl	8001aa8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003850:	f7fe fbe8 	bl	8002024 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003856:	e012      	b.n	800387e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003858:	f7fe fbe4 	bl	8002024 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b0a      	cmp	r3, #10
 8003864:	d90b      	bls.n	800387e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2205      	movs	r2, #5
 8003876:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0c5      	b.n	8003a0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0e5      	beq.n	8003858 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0202 	bic.w	r2, r2, #2
 800389a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800389c:	f7fe fbc2 	bl	8002024 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038a2:	e012      	b.n	80038ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038a4:	f7fe fbbe 	bl	8002024 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b0a      	cmp	r3, #10
 80038b0:	d90b      	bls.n	80038ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2205      	movs	r2, #5
 80038c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e09f      	b.n	8003a0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7e1b      	ldrb	r3, [r3, #24]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d108      	bne.n	80038f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e007      	b.n	8003902 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7e5b      	ldrb	r3, [r3, #25]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e007      	b.n	800392c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7e9b      	ldrb	r3, [r3, #26]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d108      	bne.n	8003946 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e007      	b.n	8003956 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0220 	bic.w	r2, r2, #32
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7edb      	ldrb	r3, [r3, #27]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d108      	bne.n	8003970 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0210 	bic.w	r2, r2, #16
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e007      	b.n	8003980 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0210 	orr.w	r2, r2, #16
 800397e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7f1b      	ldrb	r3, [r3, #28]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d108      	bne.n	800399a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e007      	b.n	80039aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7f5b      	ldrb	r3, [r3, #29]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d108      	bne.n	80039c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0204 	orr.w	r2, r2, #4
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e007      	b.n	80039d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	ea42 0103 	orr.w	r1, r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b087      	sub	sp, #28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a28:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d003      	beq.n	8003a38 <HAL_CAN_ConfigFilter+0x26>
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	f040 80aa 	bne.w	8003b8c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2201      	movs	r2, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	401a      	ands	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d123      	bne.n	8003aba <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	3248      	adds	r2, #72	; 0x48
 8003a9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003aae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ab0:	6979      	ldr	r1, [r7, #20]
 8003ab2:	3348      	adds	r3, #72	; 0x48
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d122      	bne.n	8003b08 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ae2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3248      	adds	r2, #72	; 0x48
 8003ae8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003afc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003afe:	6979      	ldr	r1, [r7, #20]
 8003b00:	3348      	adds	r3, #72	; 0x48
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b22:	e007      	b.n	8003b34 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003b4e:	e007      	b.n	8003b60 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e006      	b.n	8003b9a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d12e      	bne.n	8003c18 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd2:	f7fe fa27 	bl	8002024 <HAL_GetTick>
 8003bd6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bd8:	e012      	b.n	8003c00 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bda:	f7fe fa23 	bl	8002024 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b0a      	cmp	r3, #10
 8003be6:	d90b      	bls.n	8003c00 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e012      	b.n	8003c26 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e006      	b.n	8003c26 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b089      	sub	sp, #36	; 0x24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c42:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d003      	beq.n	8003c5a <HAL_CAN_AddTxMessage+0x2c>
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	f040 80ad 	bne.w	8003db4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8095 	beq.w	8003da4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	0e1b      	lsrs	r3, r3, #24
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c84:	2201      	movs	r2, #1
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	6809      	ldr	r1, [r1, #0]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	440b      	add	r3, r1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e00f      	b.n	8003cd2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cbc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003cc6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3318      	adds	r3, #24
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	440b      	add	r3, r1
 8003cd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3318      	adds	r3, #24
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	7d1b      	ldrb	r3, [r3, #20]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d111      	bne.n	8003d12 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	6811      	ldr	r1, [r2, #0]
 8003d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3318      	adds	r3, #24
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3304      	adds	r3, #4
 8003d10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3307      	adds	r3, #7
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	061a      	lsls	r2, r3, #24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3306      	adds	r3, #6
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3305      	adds	r3, #5
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	3204      	adds	r2, #4
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	4610      	mov	r0, r2
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	6811      	ldr	r1, [r2, #0]
 8003d3a:	ea43 0200 	orr.w	r2, r3, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3303      	adds	r3, #3
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	061a      	lsls	r2, r3, #24
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3302      	adds	r3, #2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	4313      	orrs	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	6811      	ldr	r1, [r2, #0]
 8003d70:	ea43 0200 	orr.w	r2, r3, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	440b      	add	r3, r1
 8003d7a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003d7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3318      	adds	r3, #24
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	4413      	add	r3, r2
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	6811      	ldr	r1, [r2, #0]
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3318      	adds	r3, #24
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	440b      	add	r3, r1
 8003d9e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e00e      	b.n	8003dc2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e006      	b.n	8003dc2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3724      	adds	r7, #36	; 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d003      	beq.n	8003df2 <HAL_CAN_GetRxMessage+0x24>
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	f040 8103 	bne.w	8003ff8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10e      	bne.n	8003e16 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d116      	bne.n	8003e34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0f7      	b.n	8004006 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0e8      	b.n	8004006 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	331b      	adds	r3, #27
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0204 	and.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10c      	bne.n	8003e6c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	331b      	adds	r3, #27
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	4413      	add	r3, r2
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0d5b      	lsrs	r3, r3, #21
 8003e62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	331b      	adds	r3, #27
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4413      	add	r3, r2
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	331b      	adds	r3, #27
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4413      	add	r3, r2
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0202 	and.w	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	331b      	adds	r3, #27
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	611a      	str	r2, [r3, #16]
 8003eb8:	e00b      	b.n	8003ed2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	331b      	adds	r3, #27
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	331b      	adds	r3, #27
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	4413      	add	r3, r2
 8003ede:	3304      	adds	r3, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	331b      	adds	r3, #27
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0a1a      	lsrs	r2, r3, #8
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	0c1a      	lsrs	r2, r3, #16
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	3302      	adds	r3, #2
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0e1a      	lsrs	r2, r3, #24
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	3303      	adds	r3, #3
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	0a1a      	lsrs	r2, r3, #8
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	3305      	adds	r3, #5
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	0c1a      	lsrs	r2, r3, #16
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	3306      	adds	r3, #6
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	0e1a      	lsrs	r2, r3, #24
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	3307      	adds	r3, #7
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d108      	bne.n	8003fe4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0220 	orr.w	r2, r2, #32
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	e007      	b.n	8003ff4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0220 	orr.w	r2, r2, #32
 8003ff2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e006      	b.n	8004006 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004022:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d002      	beq.n	8004030 <HAL_CAN_ActivateNotification+0x1e>
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d109      	bne.n	8004044 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6959      	ldr	r1, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e006      	b.n	8004052 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	; 0x28
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d07c      	beq.n	800419e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d023      	beq.n	80040f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f983 	bl	80043cc <HAL_CAN_TxMailbox0CompleteCallback>
 80040c6:	e016      	b.n	80040f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
 80040da:	e00c      	b.n	80040f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	e002      	b.n	80040f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f989 	bl	8004408 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d024      	beq.n	800414a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f963 	bl	80043e0 <HAL_CAN_TxMailbox1CompleteCallback>
 800411a:	e016      	b.n	800414a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
 800412e:	e00c      	b.n	800414a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	e002      	b.n	800414a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f969 	bl	800441c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d024      	beq.n	800419e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800415c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f943 	bl	80043f4 <HAL_CAN_TxMailbox2CompleteCallback>
 800416e:	e016      	b.n	800419e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	e00c      	b.n	800419e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e002      	b.n	800419e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f949 	bl	8004430 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2210      	movs	r2, #16
 80041c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2208      	movs	r2, #8
 80041dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f930 	bl	8004444 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fc fe37 	bl	8000e70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00c      	beq.n	8004226 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2210      	movs	r2, #16
 8004224:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2208      	movs	r2, #8
 8004240:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f912 	bl	800446c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8f9 	bl	8004458 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2210      	movs	r2, #16
 8004280:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8fc 	bl	8004480 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8f5 	bl	8004494 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d07b      	beq.n	80043ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d072      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004318:	2b00      	cmp	r3, #0
 800431a:	d043      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d03e      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d02b      	beq.n	8004388 <HAL_CAN_IRQHandler+0x32a>
 8004330:	2b60      	cmp	r3, #96	; 0x60
 8004332:	d82e      	bhi.n	8004392 <HAL_CAN_IRQHandler+0x334>
 8004334:	2b50      	cmp	r3, #80	; 0x50
 8004336:	d022      	beq.n	800437e <HAL_CAN_IRQHandler+0x320>
 8004338:	2b50      	cmp	r3, #80	; 0x50
 800433a:	d82a      	bhi.n	8004392 <HAL_CAN_IRQHandler+0x334>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d019      	beq.n	8004374 <HAL_CAN_IRQHandler+0x316>
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d826      	bhi.n	8004392 <HAL_CAN_IRQHandler+0x334>
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d010      	beq.n	800436a <HAL_CAN_IRQHandler+0x30c>
 8004348:	2b30      	cmp	r3, #48	; 0x30
 800434a:	d822      	bhi.n	8004392 <HAL_CAN_IRQHandler+0x334>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d002      	beq.n	8004356 <HAL_CAN_IRQHandler+0x2f8>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d005      	beq.n	8004360 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004354:	e01d      	b.n	8004392 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	f043 0308 	orr.w	r3, r3, #8
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800435e:	e019      	b.n	8004394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f043 0310 	orr.w	r3, r3, #16
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004368:	e014      	b.n	8004394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f043 0320 	orr.w	r3, r3, #32
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004372:	e00f      	b.n	8004394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800437c:	e00a      	b.n	8004394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004386:	e005      	b.n	8004394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004390:	e000      	b.n	8004394 <HAL_CAN_IRQHandler+0x336>
            break;
 8004392:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2204      	movs	r2, #4
 80043aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f872 	bl	80044a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043c4:	bf00      	nop
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <__NVIC_SetPriorityGrouping>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	60d3      	str	r3, [r2, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_GetPriorityGrouping>:
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__NVIC_GetPriorityGrouping+0x18>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 0307 	and.w	r3, r3, #7
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_EnableIRQ>:
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db0b      	blt.n	800454a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4907      	ldr	r1, [pc, #28]	; (8004558 <__NVIC_EnableIRQ+0x38>)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2001      	movs	r0, #1
 8004542:	fa00 f202 	lsl.w	r2, r0, r2
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000e100 	.word	0xe000e100

0800455c <__NVIC_SetPriority>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	6039      	str	r1, [r7, #0]
 8004566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	2b00      	cmp	r3, #0
 800456e:	db0a      	blt.n	8004586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	490c      	ldr	r1, [pc, #48]	; (80045a8 <__NVIC_SetPriority+0x4c>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	440b      	add	r3, r1
 8004580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004584:	e00a      	b.n	800459c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4908      	ldr	r1, [pc, #32]	; (80045ac <__NVIC_SetPriority+0x50>)
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3b04      	subs	r3, #4
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	440b      	add	r3, r1
 800459a:	761a      	strb	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000e100 	.word	0xe000e100
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <NVIC_EncodePriority>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f1c3 0307 	rsb	r3, r3, #7
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	bf28      	it	cs
 80045ce:	2304      	movcs	r3, #4
 80045d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d902      	bls.n	80045e0 <NVIC_EncodePriority+0x30>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3b03      	subs	r3, #3
 80045de:	e000      	b.n	80045e2 <NVIC_EncodePriority+0x32>
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	401a      	ands	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43d9      	mvns	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	4313      	orrs	r3, r2
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004628:	d301      	bcc.n	800462e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800462a:	2301      	movs	r3, #1
 800462c:	e00f      	b.n	800464e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <SysTick_Config+0x40>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004636:	210f      	movs	r1, #15
 8004638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800463c:	f7ff ff8e 	bl	800455c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <SysTick_Config+0x40>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <SysTick_Config+0x40>)
 8004648:	2207      	movs	r2, #7
 800464a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	e000e010 	.word	0xe000e010

0800465c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff29 	bl	80044bc <__NVIC_SetPriorityGrouping>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b086      	sub	sp, #24
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004684:	f7ff ff3e 	bl	8004504 <__NVIC_GetPriorityGrouping>
 8004688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	f7ff ff8e 	bl	80045b0 <NVIC_EncodePriority>
 8004694:	4602      	mov	r2, r0
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff5d 	bl	800455c <__NVIC_SetPriority>
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff31 	bl	8004520 <__NVIC_EnableIRQ>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ffa2 	bl	8004618 <SysTick_Config>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e037      	b.n	8004764 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800470a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800470e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f940 	bl	80049cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}  
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_DMA_Start_IT+0x20>
 8004788:	2302      	movs	r3, #2
 800478a:	e04a      	b.n	8004822 <HAL_DMA_Start_IT+0xb6>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800479a:	2b01      	cmp	r3, #1
 800479c:	d13a      	bne.n	8004814 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f8d4 	bl	8004970 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 020e 	orr.w	r2, r2, #14
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	e00f      	b.n	8004802 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 020a 	orr.w	r2, r2, #10
 80047f0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0204 	bic.w	r2, r2, #4
 8004800:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e005      	b.n	8004820 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004820:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2204      	movs	r2, #4
 8004848:	409a      	lsls	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d024      	beq.n	800489c <HAL_DMA_IRQHandler+0x72>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01f      	beq.n	800489c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0204 	bic.w	r2, r2, #4
 8004878:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	2104      	movs	r1, #4
 8004884:	fa01 f202 	lsl.w	r2, r1, r2
 8004888:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d06a      	beq.n	8004968 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800489a:	e065      	b.n	8004968 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2202      	movs	r2, #2
 80048a2:	409a      	lsls	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02c      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdc>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d027      	beq.n	8004906 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 020a 	bic.w	r2, r2, #10
 80048d2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	2102      	movs	r1, #2
 80048e6:	fa01 f202 	lsl.w	r2, r1, r2
 80048ea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d035      	beq.n	8004968 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004904:	e030      	b.n	8004968 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2208      	movs	r2, #8
 800490c:	409a      	lsls	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d028      	beq.n	8004968 <HAL_DMA_IRQHandler+0x13e>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 020e 	bic.w	r2, r2, #14
 800492e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f202 	lsl.w	r2, r1, r2
 800493e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	4798      	blx	r3
    }
  }
}  
 8004966:	e7ff      	b.n	8004968 <HAL_DMA_IRQHandler+0x13e>
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f202 	lsl.w	r2, r1, r2
 800498c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b10      	cmp	r3, #16
 800499c:	d108      	bne.n	80049b0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ae:	e007      	b.n	80049c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <DMA_CalcBaseAndBitshift+0x60>)
 80049dc:	429a      	cmp	r2, r3
 80049de:	d80f      	bhi.n	8004a00 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <DMA_CalcBaseAndBitshift+0x64>)
 80049e8:	4413      	add	r3, r2
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <DMA_CalcBaseAndBitshift+0x68>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	009a      	lsls	r2, r3, #2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a0f      	ldr	r2, [pc, #60]	; (8004a38 <DMA_CalcBaseAndBitshift+0x6c>)
 80049fc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80049fe:	e00e      	b.n	8004a1e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <DMA_CalcBaseAndBitshift+0x70>)
 8004a08:	4413      	add	r3, r2
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <DMA_CalcBaseAndBitshift+0x68>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	009a      	lsls	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <DMA_CalcBaseAndBitshift+0x74>)
 8004a1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40020407 	.word	0x40020407
 8004a30:	bffdfff8 	.word	0xbffdfff8
 8004a34:	cccccccd 	.word	0xcccccccd
 8004a38:	40020000 	.word	0x40020000
 8004a3c:	bffdfbf8 	.word	0xbffdfbf8
 8004a40:	40020400 	.word	0x40020400

08004a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a52:	e160      	b.n	8004d16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	2101      	movs	r1, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8152 	beq.w	8004d10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d005      	beq.n	8004a84 <HAL_GPIO_Init+0x40>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d130      	bne.n	8004ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aba:	2201      	movs	r2, #1
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0201 	and.w	r2, r3, #1
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d017      	beq.n	8004b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	2203      	movs	r2, #3
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d123      	bne.n	8004b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	08da      	lsrs	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3208      	adds	r2, #8
 8004b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	220f      	movs	r2, #15
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	08da      	lsrs	r2, r3, #3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3208      	adds	r2, #8
 8004b70:	6939      	ldr	r1, [r7, #16]
 8004b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0203 	and.w	r2, r3, #3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80ac 	beq.w	8004d10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb8:	4b5e      	ldr	r3, [pc, #376]	; (8004d34 <HAL_GPIO_Init+0x2f0>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	4a5d      	ldr	r2, [pc, #372]	; (8004d34 <HAL_GPIO_Init+0x2f0>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6193      	str	r3, [r2, #24]
 8004bc4:	4b5b      	ldr	r3, [pc, #364]	; (8004d34 <HAL_GPIO_Init+0x2f0>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bd0:	4a59      	ldr	r2, [pc, #356]	; (8004d38 <HAL_GPIO_Init+0x2f4>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	220f      	movs	r2, #15
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bfa:	d025      	beq.n	8004c48 <HAL_GPIO_Init+0x204>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a4f      	ldr	r2, [pc, #316]	; (8004d3c <HAL_GPIO_Init+0x2f8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01f      	beq.n	8004c44 <HAL_GPIO_Init+0x200>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a4e      	ldr	r2, [pc, #312]	; (8004d40 <HAL_GPIO_Init+0x2fc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d019      	beq.n	8004c40 <HAL_GPIO_Init+0x1fc>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a4d      	ldr	r2, [pc, #308]	; (8004d44 <HAL_GPIO_Init+0x300>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <HAL_GPIO_Init+0x1f8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a4c      	ldr	r2, [pc, #304]	; (8004d48 <HAL_GPIO_Init+0x304>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00d      	beq.n	8004c38 <HAL_GPIO_Init+0x1f4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a4b      	ldr	r2, [pc, #300]	; (8004d4c <HAL_GPIO_Init+0x308>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d007      	beq.n	8004c34 <HAL_GPIO_Init+0x1f0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a4a      	ldr	r2, [pc, #296]	; (8004d50 <HAL_GPIO_Init+0x30c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_GPIO_Init+0x1ec>
 8004c2c:	2306      	movs	r3, #6
 8004c2e:	e00c      	b.n	8004c4a <HAL_GPIO_Init+0x206>
 8004c30:	2307      	movs	r3, #7
 8004c32:	e00a      	b.n	8004c4a <HAL_GPIO_Init+0x206>
 8004c34:	2305      	movs	r3, #5
 8004c36:	e008      	b.n	8004c4a <HAL_GPIO_Init+0x206>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	e006      	b.n	8004c4a <HAL_GPIO_Init+0x206>
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e004      	b.n	8004c4a <HAL_GPIO_Init+0x206>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e002      	b.n	8004c4a <HAL_GPIO_Init+0x206>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_GPIO_Init+0x206>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	f002 0203 	and.w	r2, r2, #3
 8004c50:	0092      	lsls	r2, r2, #2
 8004c52:	4093      	lsls	r3, r2
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c5a:	4937      	ldr	r1, [pc, #220]	; (8004d38 <HAL_GPIO_Init+0x2f4>)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	3302      	adds	r3, #2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c68:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c8c:	4a31      	ldr	r2, [pc, #196]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004cb6:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ce0:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <HAL_GPIO_Init+0x310>)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3301      	adds	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f47f ae97 	bne.w	8004a54 <HAL_GPIO_Init+0x10>
  }
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	48000400 	.word	0x48000400
 8004d40:	48000800 	.word	0x48000800
 8004d44:	48000c00 	.word	0x48000c00
 8004d48:	48001000 	.word	0x48001000
 8004d4c:	48001400 	.word	0x48001400
 8004d50:	48001800 	.word	0x48001800
 8004d54:	40010400 	.word	0x40010400

08004d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
 8004d74:	e001      	b.n	8004d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
 8004d94:	4613      	mov	r3, r2
 8004d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d98:	787b      	ldrb	r3, [r7, #1]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d9e:	887a      	ldrh	r2, [r7, #2]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004da4:	e002      	b.n	8004dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	041a      	lsls	r2, r3, #16
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	43d9      	mvns	r1, r3
 8004dd6:	887b      	ldrh	r3, [r7, #2]
 8004dd8:	400b      	ands	r3, r1
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	619a      	str	r2, [r3, #24]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dfc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f001 b83a 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 816f 	beq.w	8005106 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e28:	4bb5      	ldr	r3, [pc, #724]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 030c 	and.w	r3, r3, #12
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d00c      	beq.n	8004e4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e34:	4bb2      	ldr	r3, [pc, #712]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d15c      	bne.n	8004efa <HAL_RCC_OscConfig+0x10e>
 8004e40:	4baf      	ldr	r3, [pc, #700]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d155      	bne.n	8004efa <HAL_RCC_OscConfig+0x10e>
 8004e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d102      	bne.n	8004e80 <HAL_RCC_OscConfig+0x94>
 8004e7a:	4ba1      	ldr	r3, [pc, #644]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	e015      	b.n	8004eac <HAL_RCC_OscConfig+0xc0>
 8004e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e84:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004e8c:	fa93 f3a3 	rbit	r3, r3
 8004e90:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004e9c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004ea0:	fa93 f3a3 	rbit	r3, r3
 8004ea4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ea8:	4b95      	ldr	r3, [pc, #596]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eb0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004eb4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004eb8:	fa92 f2a2 	rbit	r2, r2
 8004ebc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004ec0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004ec4:	fab2 f282 	clz	r2, r2
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	f042 0220 	orr.w	r2, r2, #32
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f002 021f 	and.w	r2, r2, #31
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8111 	beq.w	8005104 <HAL_RCC_OscConfig+0x318>
 8004ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8108 	bne.w	8005104 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f000 bfc6 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004efe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCC_OscConfig+0x12e>
 8004f0c:	4b7c      	ldr	r3, [pc, #496]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a7b      	ldr	r2, [pc, #492]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	e036      	b.n	8004f88 <HAL_RCC_OscConfig+0x19c>
 8004f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x158>
 8004f2a:	4b75      	ldr	r3, [pc, #468]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a74      	ldr	r2, [pc, #464]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4b72      	ldr	r3, [pc, #456]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a71      	ldr	r2, [pc, #452]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e021      	b.n	8004f88 <HAL_RCC_OscConfig+0x19c>
 8004f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x184>
 8004f56:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a69      	ldr	r2, [pc, #420]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b67      	ldr	r3, [pc, #412]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a66      	ldr	r2, [pc, #408]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0x19c>
 8004f70:	4b63      	ldr	r3, [pc, #396]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a62      	ldr	r2, [pc, #392]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b60      	ldr	r3, [pc, #384]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a5f      	ldr	r2, [pc, #380]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f86:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d059      	beq.n	800504c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fd f844 	bl	8002024 <HAL_GetTick>
 8004f9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa2:	f7fd f83f 	bl	8002024 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	; 0x64
 8004fb0:	d902      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	f000 bf67 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
 8004fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fbc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004fcc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d102      	bne.n	8004fea <HAL_RCC_OscConfig+0x1fe>
 8004fe4:	4b46      	ldr	r3, [pc, #280]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_OscConfig+0x22a>
 8004fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005002:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005006:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800500a:	fa93 f3a3 	rbit	r3, r3
 800500e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005012:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800501a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800501e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005022:	fa92 f2a2 	rbit	r2, r2
 8005026:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800502a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800502e:	fab2 f282 	clz	r2, r2
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	f042 0220 	orr.w	r2, r2, #32
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	f002 021f 	and.w	r2, r2, #31
 800503e:	2101      	movs	r1, #1
 8005040:	fa01 f202 	lsl.w	r2, r1, r2
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ab      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1b6>
 800504a:	e05c      	b.n	8005106 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fc ffea 	bl	8002024 <HAL_GetTick>
 8005050:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005056:	f7fc ffe5 	bl	8002024 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d902      	bls.n	800506c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	f000 bf0d 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
 800506c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005070:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005078:	fa93 f3a3 	rbit	r3, r3
 800507c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005080:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005084:	fab3 f383 	clz	r3, r3
 8005088:	b2db      	uxtb	r3, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d102      	bne.n	800509e <HAL_RCC_OscConfig+0x2b2>
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	e015      	b.n	80050ca <HAL_RCC_OscConfig+0x2de>
 800509e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80050b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80050ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <HAL_RCC_OscConfig+0x314>)
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050ce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80050d2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80050d6:	fa92 f2a2 	rbit	r2, r2
 80050da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80050de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80050e2:	fab2 f282 	clz	r2, r2
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	f042 0220 	orr.w	r2, r2, #32
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	f002 021f 	and.w	r2, r2, #31
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f202 	lsl.w	r2, r1, r2
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1ab      	bne.n	8005056 <HAL_RCC_OscConfig+0x26a>
 80050fe:	e002      	b.n	8005106 <HAL_RCC_OscConfig+0x31a>
 8005100:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800510a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 817f 	beq.w	800541a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800511c:	4ba7      	ldr	r3, [pc, #668]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 030c 	and.w	r3, r3, #12
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005128:	4ba4      	ldr	r3, [pc, #656]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f003 030c 	and.w	r3, r3, #12
 8005130:	2b08      	cmp	r3, #8
 8005132:	d173      	bne.n	800521c <HAL_RCC_OscConfig+0x430>
 8005134:	4ba1      	ldr	r3, [pc, #644]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005140:	d16c      	bne.n	800521c <HAL_RCC_OscConfig+0x430>
 8005142:	2302      	movs	r3, #2
 8005144:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005148:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800514c:	fa93 f3a3 	rbit	r3, r3
 8005150:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005154:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005158:	fab3 f383 	clz	r3, r3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d102      	bne.n	8005172 <HAL_RCC_OscConfig+0x386>
 800516c:	4b93      	ldr	r3, [pc, #588]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	e013      	b.n	800519a <HAL_RCC_OscConfig+0x3ae>
 8005172:	2302      	movs	r3, #2
 8005174:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005184:	2302      	movs	r3, #2
 8005186:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800518a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005196:	4b89      	ldr	r3, [pc, #548]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2202      	movs	r2, #2
 800519c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80051a0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80051a4:	fa92 f2a2 	rbit	r2, r2
 80051a8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80051ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80051b0:	fab2 f282 	clz	r2, r2
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	f042 0220 	orr.w	r2, r2, #32
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	f002 021f 	and.w	r2, r2, #31
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f202 	lsl.w	r2, r1, r2
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCC_OscConfig+0x3f6>
 80051cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d002      	beq.n	80051e2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f000 be52 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e2:	4b76      	ldr	r3, [pc, #472]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	21f8      	movs	r1, #248	; 0xf8
 80051f8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005200:	fa91 f1a1 	rbit	r1, r1
 8005204:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005208:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800520c:	fab1 f181 	clz	r1, r1
 8005210:	b2c9      	uxtb	r1, r1
 8005212:	408b      	lsls	r3, r1
 8005214:	4969      	ldr	r1, [pc, #420]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	e0fe      	b.n	800541a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800521c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8088 	beq.w	800533e <HAL_RCC_OscConfig+0x552>
 800522e:	2301      	movs	r3, #1
 8005230:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005234:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005240:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005244:	fab3 f383 	clz	r3, r3
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800524e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	461a      	mov	r2, r3
 8005256:	2301      	movs	r3, #1
 8005258:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fc fee3 	bl	8002024 <HAL_GetTick>
 800525e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005262:	e00a      	b.n	800527a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005264:	f7fc fede 	bl	8002024 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d902      	bls.n	800527a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	f000 be06 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
 800527a:	2302      	movs	r3, #2
 800527c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005284:	fa93 f3a3 	rbit	r3, r3
 8005288:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800528c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005290:	fab3 f383 	clz	r3, r3
 8005294:	b2db      	uxtb	r3, r3
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d102      	bne.n	80052aa <HAL_RCC_OscConfig+0x4be>
 80052a4:	4b45      	ldr	r3, [pc, #276]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	e013      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e6>
 80052aa:	2302      	movs	r3, #2
 80052ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80052bc:	2302      	movs	r3, #2
 80052be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80052c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80052ce:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2202      	movs	r2, #2
 80052d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80052d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80052dc:	fa92 f2a2 	rbit	r2, r2
 80052e0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80052e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80052e8:	fab2 f282 	clz	r2, r2
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	f042 0220 	orr.w	r2, r2, #32
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	f002 021f 	and.w	r2, r2, #31
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f202 	lsl.w	r2, r1, r2
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0af      	beq.n	8005264 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005304:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800530c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005310:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	21f8      	movs	r1, #248	; 0xf8
 800531a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005322:	fa91 f1a1 	rbit	r1, r1
 8005326:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800532a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800532e:	fab1 f181 	clz	r1, r1
 8005332:	b2c9      	uxtb	r1, r1
 8005334:	408b      	lsls	r3, r1
 8005336:	4921      	ldr	r1, [pc, #132]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]
 800533c:	e06d      	b.n	800541a <HAL_RCC_OscConfig+0x62e>
 800533e:	2301      	movs	r3, #1
 8005340:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005344:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005348:	fa93 f3a3 	rbit	r3, r3
 800534c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005350:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800535e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fc fe5b 	bl	8002024 <HAL_GetTick>
 800536e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005372:	e00a      	b.n	800538a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005374:	f7fc fe56 	bl	8002024 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d902      	bls.n	800538a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	f000 bd7e 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
 800538a:	2302      	movs	r3, #2
 800538c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005390:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005394:	fa93 f3a3 	rbit	r3, r3
 8005398:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800539c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053a0:	fab3 f383 	clz	r3, r3
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5d4>
 80053b4:	4b01      	ldr	r3, [pc, #4]	; (80053bc <HAL_RCC_OscConfig+0x5d0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	e016      	b.n	80053e8 <HAL_RCC_OscConfig+0x5fc>
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000
 80053c0:	2302      	movs	r3, #2
 80053c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ca:	fa93 f3a3 	rbit	r3, r3
 80053ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053d2:	2302      	movs	r3, #2
 80053d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053dc:	fa93 f3a3 	rbit	r3, r3
 80053e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053e4:	4bbf      	ldr	r3, [pc, #764]	; (80056e4 <HAL_RCC_OscConfig+0x8f8>)
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2202      	movs	r2, #2
 80053ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80053ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80053f2:	fa92 f2a2 	rbit	r2, r2
 80053f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80053fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80053fe:	fab2 f282 	clz	r2, r2
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	f042 0220 	orr.w	r2, r2, #32
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	f002 021f 	and.w	r2, r2, #31
 800540e:	2101      	movs	r1, #1
 8005410:	fa01 f202 	lsl.w	r2, r1, r2
 8005414:	4013      	ands	r3, r2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1ac      	bne.n	8005374 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800541a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800541e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8113 	beq.w	8005656 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005434:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d07c      	beq.n	800553a <HAL_RCC_OscConfig+0x74e>
 8005440:	2301      	movs	r3, #1
 8005442:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544a:	fa93 f3a3 	rbit	r3, r3
 800544e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005456:	fab3 f383 	clz	r3, r3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	4ba2      	ldr	r3, [pc, #648]	; (80056e8 <HAL_RCC_OscConfig+0x8fc>)
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	461a      	mov	r2, r3
 8005466:	2301      	movs	r3, #1
 8005468:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546a:	f7fc fddb 	bl	8002024 <HAL_GetTick>
 800546e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005472:	e00a      	b.n	800548a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005474:	f7fc fdd6 	bl	8002024 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d902      	bls.n	800548a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	f000 bcfe 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
 800548a:	2302      	movs	r3, #2
 800548c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	fa93 f2a3 	rbit	r2, r3
 8005498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800549c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054aa:	2202      	movs	r2, #2
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	fa93 f2a3 	rbit	r2, r3
 80054bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054ce:	2202      	movs	r2, #2
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	fa93 f2a3 	rbit	r2, r3
 80054e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ea:	4b7e      	ldr	r3, [pc, #504]	; (80056e4 <HAL_RCC_OscConfig+0x8f8>)
 80054ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054f6:	2102      	movs	r1, #2
 80054f8:	6019      	str	r1, [r3, #0]
 80054fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	fa93 f1a3 	rbit	r1, r3
 8005508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800550c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005510:	6019      	str	r1, [r3, #0]
  return result;
 8005512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005516:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	fab3 f383 	clz	r3, r3
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2101      	movs	r1, #1
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d09d      	beq.n	8005474 <HAL_RCC_OscConfig+0x688>
 8005538:	e08d      	b.n	8005656 <HAL_RCC_OscConfig+0x86a>
 800553a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800553e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800554a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	fa93 f2a3 	rbit	r2, r3
 8005554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005558:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800555c:	601a      	str	r2, [r3, #0]
  return result;
 800555e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005562:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005566:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005568:	fab3 f383 	clz	r3, r3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	4b5d      	ldr	r3, [pc, #372]	; (80056e8 <HAL_RCC_OscConfig+0x8fc>)
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	461a      	mov	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557c:	f7fc fd52 	bl	8002024 <HAL_GetTick>
 8005580:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005584:	e00a      	b.n	800559c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005586:	f7fc fd4d 	bl	8002024 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d902      	bls.n	800559c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	f000 bc75 	b.w	8005e86 <HAL_RCC_OscConfig+0x109a>
 800559c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055a4:	2202      	movs	r2, #2
 80055a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	fa93 f2a3 	rbit	r2, r3
 80055b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c8:	2202      	movs	r2, #2
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	fa93 f2a3 	rbit	r2, r3
 80055da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055ec:	2202      	movs	r2, #2
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	fa93 f2a3 	rbit	r2, r3
 80055fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005602:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005606:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <HAL_RCC_OscConfig+0x8f8>)
 800560a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800560c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005610:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005614:	2102      	movs	r1, #2
 8005616:	6019      	str	r1, [r3, #0]
 8005618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800561c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	fa93 f1a3 	rbit	r1, r3
 8005626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800562a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800562e:	6019      	str	r1, [r3, #0]
  return result;
 8005630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005634:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	fab3 f383 	clz	r3, r3
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2101      	movs	r1, #1
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d197      	bne.n	8005586 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800565a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 81a5 	beq.w	80059b6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <HAL_RCC_OscConfig+0x8f8>)
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d116      	bne.n	80056ac <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567e:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_RCC_OscConfig+0x8f8>)
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_RCC_OscConfig+0x8f8>)
 8005684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005688:	61d3      	str	r3, [r2, #28]
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <HAL_RCC_OscConfig+0x8f8>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ac:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <HAL_RCC_OscConfig+0x900>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d121      	bne.n	80056fc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <HAL_RCC_OscConfig+0x900>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <HAL_RCC_OscConfig+0x900>)
 80056be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c4:	f7fc fcae 	bl	8002024 <HAL_GetTick>
 80056c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	e010      	b.n	80056f0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ce:	f7fc fca9 	bl	8002024 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d908      	bls.n	80056f0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e3d1      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	10908120 	.word	0x10908120
 80056ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	4b8d      	ldr	r3, [pc, #564]	; (8005928 <HAL_RCC_OscConfig+0xb3c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0e8      	beq.n	80056ce <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005700:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d106      	bne.n	800571a <HAL_RCC_OscConfig+0x92e>
 800570c:	4b87      	ldr	r3, [pc, #540]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	4a86      	ldr	r2, [pc, #536]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	6213      	str	r3, [r2, #32]
 8005718:	e035      	b.n	8005786 <HAL_RCC_OscConfig+0x99a>
 800571a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800571e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <HAL_RCC_OscConfig+0x958>
 800572a:	4b80      	ldr	r3, [pc, #512]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	4a7f      	ldr	r2, [pc, #508]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	6213      	str	r3, [r2, #32]
 8005736:	4b7d      	ldr	r3, [pc, #500]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	4a7c      	ldr	r2, [pc, #496]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	6213      	str	r3, [r2, #32]
 8005742:	e020      	b.n	8005786 <HAL_RCC_OscConfig+0x99a>
 8005744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b05      	cmp	r3, #5
 8005752:	d10c      	bne.n	800576e <HAL_RCC_OscConfig+0x982>
 8005754:	4b75      	ldr	r3, [pc, #468]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4a74      	ldr	r2, [pc, #464]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	6213      	str	r3, [r2, #32]
 8005760:	4b72      	ldr	r3, [pc, #456]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	4a71      	ldr	r2, [pc, #452]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6213      	str	r3, [r2, #32]
 800576c:	e00b      	b.n	8005786 <HAL_RCC_OscConfig+0x99a>
 800576e:	4b6f      	ldr	r3, [pc, #444]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4a6e      	ldr	r2, [pc, #440]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	6213      	str	r3, [r2, #32]
 800577a:	4b6c      	ldr	r3, [pc, #432]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	4a6b      	ldr	r2, [pc, #428]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800578a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8081 	beq.w	800589a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005798:	f7fc fc44 	bl	8002024 <HAL_GetTick>
 800579c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a0:	e00b      	b.n	80057ba <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fc fc3f 	bl	8002024 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e365      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
 80057ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80057c2:	2202      	movs	r2, #2
 80057c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	fa93 f2a3 	rbit	r2, r3
 80057d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057e6:	2202      	movs	r2, #2
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	fa93 f2a3 	rbit	r2, r3
 80057f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005800:	601a      	str	r2, [r3, #0]
  return result;
 8005802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005806:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800580a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f043 0302 	orr.w	r3, r3, #2
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d102      	bne.n	8005826 <HAL_RCC_OscConfig+0xa3a>
 8005820:	4b42      	ldr	r3, [pc, #264]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	e013      	b.n	800584e <HAL_RCC_OscConfig+0xa62>
 8005826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800582a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800582e:	2202      	movs	r2, #2
 8005830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005836:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	fa93 f2a3 	rbit	r2, r3
 8005840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005844:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	4b38      	ldr	r3, [pc, #224]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005852:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005856:	2102      	movs	r1, #2
 8005858:	6011      	str	r1, [r2, #0]
 800585a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800585e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	fa92 f1a2 	rbit	r1, r2
 8005868:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800586c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005870:	6011      	str	r1, [r2, #0]
  return result;
 8005872:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005876:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	fab2 f282 	clz	r2, r2
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	f002 021f 	and.w	r2, r2, #31
 800588c:	2101      	movs	r1, #1
 800588e:	fa01 f202 	lsl.w	r2, r1, r2
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d084      	beq.n	80057a2 <HAL_RCC_OscConfig+0x9b6>
 8005898:	e083      	b.n	80059a2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589a:	f7fc fbc3 	bl	8002024 <HAL_GetTick>
 800589e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a2:	e00b      	b.n	80058bc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a4:	f7fc fbbe 	bl	8002024 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e2e4      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
 80058bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80058c4:	2202      	movs	r2, #2
 80058c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	fa93 f2a3 	rbit	r2, r3
 80058d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058e8:	2202      	movs	r2, #2
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	fa93 f2a3 	rbit	r2, r3
 80058fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005902:	601a      	str	r2, [r3, #0]
  return result;
 8005904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005908:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800590c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d106      	bne.n	8005930 <HAL_RCC_OscConfig+0xb44>
 8005922:	4b02      	ldr	r3, [pc, #8]	; (800592c <HAL_RCC_OscConfig+0xb40>)
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	e017      	b.n	8005958 <HAL_RCC_OscConfig+0xb6c>
 8005928:	40007000 	.word	0x40007000
 800592c:	40021000 	.word	0x40021000
 8005930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005934:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005938:	2202      	movs	r2, #2
 800593a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005940:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	fa93 f2a3 	rbit	r2, r3
 800594a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800594e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	4bb3      	ldr	r3, [pc, #716]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800595c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005960:	2102      	movs	r1, #2
 8005962:	6011      	str	r1, [r2, #0]
 8005964:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005968:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	fa92 f1a2 	rbit	r1, r2
 8005972:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005976:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800597a:	6011      	str	r1, [r2, #0]
  return result;
 800597c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005980:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	fab2 f282 	clz	r2, r2
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	f002 021f 	and.w	r2, r2, #31
 8005996:	2101      	movs	r1, #1
 8005998:	fa01 f202 	lsl.w	r2, r1, r2
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d180      	bne.n	80058a4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059a2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d105      	bne.n	80059b6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059aa:	4b9e      	ldr	r3, [pc, #632]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	4a9d      	ldr	r2, [pc, #628]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 80059b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 825e 	beq.w	8005e84 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c8:	4b96      	ldr	r3, [pc, #600]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	f000 821f 	beq.w	8005e14 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	f040 8170 	bne.w	8005cc8 <HAL_RCC_OscConfig+0xedc>
 80059e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	fa93 f2a3 	rbit	r2, r3
 8005a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a0c:	601a      	str	r2, [r3, #0]
  return result;
 8005a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a16:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a18:	fab3 f383 	clz	r3, r3
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2e:	f7fc faf9 	bl	8002024 <HAL_GetTick>
 8005a32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a36:	e009      	b.n	8005a4c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fc faf4 	bl	8002024 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e21c      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
 8005a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	fa93 f2a3 	rbit	r2, r3
 8005a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a70:	601a      	str	r2, [r3, #0]
  return result;
 8005a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a7c:	fab3 f383 	clz	r3, r3
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d102      	bne.n	8005a96 <HAL_RCC_OscConfig+0xcaa>
 8005a90:	4b64      	ldr	r3, [pc, #400]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	e027      	b.n	8005ae6 <HAL_RCC_OscConfig+0xcfa>
 8005a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005aa8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	fa93 f2a3 	rbit	r2, r3
 8005ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ab6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ac0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ace:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	fa93 f2a3 	rbit	r2, r3
 8005ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005adc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	4b50      	ldr	r3, [pc, #320]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005aea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005aee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005af2:	6011      	str	r1, [r2, #0]
 8005af4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005af8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	fa92 f1a2 	rbit	r1, r2
 8005b02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b06:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005b0a:	6011      	str	r1, [r2, #0]
  return result;
 8005b0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b10:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	fab2 f282 	clz	r2, r2
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	f042 0220 	orr.w	r2, r2, #32
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	f002 021f 	and.w	r2, r2, #31
 8005b26:	2101      	movs	r1, #1
 8005b28:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d182      	bne.n	8005a38 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b32:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	f023 020f 	bic.w	r2, r3, #15
 8005b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	4937      	ldr	r1, [pc, #220]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005b4c:	4b35      	ldr	r3, [pc, #212]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6a19      	ldr	r1, [r3, #32]
 8005b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	492d      	ldr	r1, [pc, #180]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
 8005b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	fa93 f2a3 	rbit	r2, r3
 8005b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b94:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005b98:	601a      	str	r2, [r3, #0]
  return result;
 8005b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005ba2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bba:	f7fc fa33 	bl	8002024 <HAL_GetTick>
 8005bbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bc2:	e009      	b.n	8005bd8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc4:	f7fc fa2e 	bl	8002024 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e156      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
 8005bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bdc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	fa93 f2a3 	rbit	r2, r3
 8005bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bf8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005bfc:	601a      	str	r2, [r3, #0]
  return result;
 8005bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005c06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c08:	fab3 f383 	clz	r3, r3
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCC_OscConfig+0xe3c>
 8005c1c:	4b01      	ldr	r3, [pc, #4]	; (8005c24 <HAL_RCC_OscConfig+0xe38>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	e02a      	b.n	8005c78 <HAL_RCC_OscConfig+0xe8c>
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000
 8005c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c3a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	fa93 f2a3 	rbit	r2, r3
 8005c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c60:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	fa93 f2a3 	rbit	r2, r3
 8005c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c6e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	4b86      	ldr	r3, [pc, #536]	; (8005e90 <HAL_RCC_OscConfig+0x10a4>)
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c84:	6011      	str	r1, [r2, #0]
 8005c86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	fa92 f1a2 	rbit	r1, r2
 8005c94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c98:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005c9c:	6011      	str	r1, [r2, #0]
  return result;
 8005c9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005ca2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	fab2 f282 	clz	r2, r2
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	f042 0220 	orr.w	r2, r2, #32
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	f002 021f 	and.w	r2, r2, #31
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f202 	lsl.w	r2, r1, r2
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f43f af7f 	beq.w	8005bc4 <HAL_RCC_OscConfig+0xdd8>
 8005cc6:	e0dd      	b.n	8005e84 <HAL_RCC_OscConfig+0x1098>
 8005cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ccc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cda:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	fa93 f2a3 	rbit	r2, r3
 8005ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ce8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cec:	601a      	str	r2, [r3, #0]
  return result;
 8005cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cf2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cf6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf8:	fab3 f383 	clz	r3, r3
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0e:	f7fc f989 	bl	8002024 <HAL_GetTick>
 8005d12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d16:	e009      	b.n	8005d2c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fc f984 	bl	8002024 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e0ac      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
 8005d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d30:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d3e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	fa93 f2a3 	rbit	r2, r3
 8005d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d50:	601a      	str	r2, [r3, #0]
  return result;
 8005d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d5c:	fab3 f383 	clz	r3, r3
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d102      	bne.n	8005d76 <HAL_RCC_OscConfig+0xf8a>
 8005d70:	4b47      	ldr	r3, [pc, #284]	; (8005e90 <HAL_RCC_OscConfig+0x10a4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	e027      	b.n	8005dc6 <HAL_RCC_OscConfig+0xfda>
 8005d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d7a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d88:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	fa93 f2a3 	rbit	r2, r3
 8005d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d96:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005da0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	fa93 f2a3 	rbit	r2, r3
 8005db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dbc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	4b33      	ldr	r3, [pc, #204]	; (8005e90 <HAL_RCC_OscConfig+0x10a4>)
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005dca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005dce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005dd2:	6011      	str	r1, [r2, #0]
 8005dd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005dd8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	fa92 f1a2 	rbit	r1, r2
 8005de2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005de6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005dea:	6011      	str	r1, [r2, #0]
  return result;
 8005dec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005df0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	fab2 f282 	clz	r2, r2
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	f042 0220 	orr.w	r2, r2, #32
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	f002 021f 	and.w	r2, r2, #31
 8005e06:	2101      	movs	r1, #1
 8005e08:	fa01 f202 	lsl.w	r2, r1, r2
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d182      	bne.n	8005d18 <HAL_RCC_OscConfig+0xf2c>
 8005e12:	e037      	b.n	8005e84 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e02e      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e28:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <HAL_RCC_OscConfig+0x10a4>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005e30:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <HAL_RCC_OscConfig+0x10a4>)
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005e38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005e3c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d117      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005e50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005e54:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40021000 	.word	0x40021000

08005e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b09e      	sub	sp, #120	; 0x78
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e162      	b.n	8006172 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eac:	4b90      	ldr	r3, [pc, #576]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d910      	bls.n	8005edc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b8d      	ldr	r3, [pc, #564]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 0207 	bic.w	r2, r3, #7
 8005ec2:	498b      	ldr	r1, [pc, #556]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b89      	ldr	r3, [pc, #548]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e14a      	b.n	8006172 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee8:	4b82      	ldr	r3, [pc, #520]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	497f      	ldr	r1, [pc, #508]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80dc 	beq.w	80060c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d13c      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xf6>
 8005f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f18:	fa93 f3a3 	rbit	r3, r3
 8005f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f20:	fab3 f383 	clz	r3, r3
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d102      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xa6>
 8005f34:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	e00f      	b.n	8005f5a <HAL_RCC_ClockConfig+0xc6>
 8005f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	667b      	str	r3, [r7, #100]	; 0x64
 8005f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f50:	fa93 f3a3 	rbit	r3, r3
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f56:	4b67      	ldr	r3, [pc, #412]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f62:	fa92 f2a2 	rbit	r2, r2
 8005f66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f6a:	fab2 f282 	clz	r2, r2
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	f042 0220 	orr.w	r2, r2, #32
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	f002 021f 	and.w	r2, r2, #31
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d17b      	bne.n	800607e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e0f3      	b.n	8006172 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d13c      	bne.n	800600c <HAL_RCC_ClockConfig+0x178>
 8005f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9a:	fa93 f3a3 	rbit	r3, r3
 8005f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa2:	fab3 f383 	clz	r3, r3
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d102      	bne.n	8005fbc <HAL_RCC_ClockConfig+0x128>
 8005fb6:	4b4f      	ldr	r3, [pc, #316]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	e00f      	b.n	8005fdc <HAL_RCC_ClockConfig+0x148>
 8005fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc4:	fa93 f3a3 	rbit	r3, r3
 8005fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fce:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd2:	fa93 f3a3 	rbit	r3, r3
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd8:	4b46      	ldr	r3, [pc, #280]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fe0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe4:	fa92 f2a2 	rbit	r2, r2
 8005fe8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fec:	fab2 f282 	clz	r2, r2
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	f042 0220 	orr.w	r2, r2, #32
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	f002 021f 	and.w	r2, r2, #31
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8006002:	4013      	ands	r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d13a      	bne.n	800607e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0b2      	b.n	8006172 <HAL_RCC_ClockConfig+0x2de>
 800600c:	2302      	movs	r3, #2
 800600e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	fa93 f3a3 	rbit	r3, r3
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601a:	fab3 f383 	clz	r3, r3
 800601e:	b2db      	uxtb	r3, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d102      	bne.n	8006034 <HAL_RCC_ClockConfig+0x1a0>
 800602e:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	e00d      	b.n	8006050 <HAL_RCC_ClockConfig+0x1bc>
 8006034:	2302      	movs	r3, #2
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	fa93 f3a3 	rbit	r3, r3
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
 8006040:	2302      	movs	r3, #2
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	fa93 f3a3 	rbit	r3, r3
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2202      	movs	r2, #2
 8006052:	61ba      	str	r2, [r7, #24]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	fa92 f2a2 	rbit	r2, r2
 800605a:	617a      	str	r2, [r7, #20]
  return result;
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	fab2 f282 	clz	r2, r2
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	f042 0220 	orr.w	r2, r2, #32
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	f002 021f 	and.w	r2, r2, #31
 800606e:	2101      	movs	r1, #1
 8006070:	fa01 f202 	lsl.w	r2, r1, r2
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e079      	b.n	8006172 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f023 0203 	bic.w	r2, r3, #3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	491a      	ldr	r1, [pc, #104]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006090:	f7fb ffc8 	bl	8002024 <HAL_GetTick>
 8006094:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006096:	e00a      	b.n	80060ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006098:	f7fb ffc4 	bl	8002024 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e061      	b.n	8006172 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f003 020c 	and.w	r2, r3, #12
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	429a      	cmp	r2, r3
 80060be:	d1eb      	bne.n	8006098 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d214      	bcs.n	80060f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 0207 	bic.w	r2, r3, #7
 80060d6:	4906      	ldr	r1, [pc, #24]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <HAL_RCC_ClockConfig+0x25c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d005      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e040      	b.n	8006172 <HAL_RCC_ClockConfig+0x2de>
 80060f0:	40022000 	.word	0x40022000
 80060f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006104:	4b1d      	ldr	r3, [pc, #116]	; (800617c <HAL_RCC_ClockConfig+0x2e8>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	491a      	ldr	r1, [pc, #104]	; (800617c <HAL_RCC_ClockConfig+0x2e8>)
 8006112:	4313      	orrs	r3, r2
 8006114:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006122:	4b16      	ldr	r3, [pc, #88]	; (800617c <HAL_RCC_ClockConfig+0x2e8>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4912      	ldr	r1, [pc, #72]	; (800617c <HAL_RCC_ClockConfig+0x2e8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006136:	f000 f829 	bl	800618c <HAL_RCC_GetSysClockFreq>
 800613a:	4601      	mov	r1, r0
 800613c:	4b0f      	ldr	r3, [pc, #60]	; (800617c <HAL_RCC_ClockConfig+0x2e8>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006144:	22f0      	movs	r2, #240	; 0xf0
 8006146:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	fa92 f2a2 	rbit	r2, r2
 800614e:	60fa      	str	r2, [r7, #12]
  return result;
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	fab2 f282 	clz	r2, r2
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	40d3      	lsrs	r3, r2
 800615a:	4a09      	ldr	r2, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x2ec>)
 800615c:	5cd3      	ldrb	r3, [r2, r3]
 800615e:	fa21 f303 	lsr.w	r3, r1, r3
 8006162:	4a08      	ldr	r2, [pc, #32]	; (8006184 <HAL_RCC_ClockConfig+0x2f0>)
 8006164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <HAL_RCC_ClockConfig+0x2f4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f7fb ff16 	bl	8001f9c <HAL_InitTick>
  
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3778      	adds	r7, #120	; 0x78
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40021000 	.word	0x40021000
 8006180:	0800a650 	.word	0x0800a650
 8006184:	20000004 	.word	0x20000004
 8006188:	20000008 	.word	0x20000008

0800618c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800618c:	b480      	push	{r7}
 800618e:	b08b      	sub	sp, #44	; 0x2c
 8006190:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	2300      	movs	r3, #0
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80061a6:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d002      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x30>
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_GetSysClockFreq+0x36>
 80061ba:	e03f      	b.n	800623c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061bc:	4b25      	ldr	r3, [pc, #148]	; (8006254 <HAL_RCC_GetSysClockFreq+0xc8>)
 80061be:	623b      	str	r3, [r7, #32]
      break;
 80061c0:	e03f      	b.n	8006242 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80061c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80061cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	fa92 f2a2 	rbit	r2, r2
 80061d4:	607a      	str	r2, [r7, #4]
  return result;
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	fab2 f282 	clz	r2, r2
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	40d3      	lsrs	r3, r2
 80061e0:	4a1d      	ldr	r2, [pc, #116]	; (8006258 <HAL_RCC_GetSysClockFreq+0xcc>)
 80061e2:	5cd3      	ldrb	r3, [r2, r3]
 80061e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	220f      	movs	r2, #15
 80061f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	fa92 f2a2 	rbit	r2, r2
 80061f8:	60fa      	str	r2, [r7, #12]
  return result;
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	fab2 f282 	clz	r2, r2
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	40d3      	lsrs	r3, r2
 8006204:	4a15      	ldr	r2, [pc, #84]	; (800625c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006206:	5cd3      	ldrb	r3, [r2, r3]
 8006208:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006214:	4a0f      	ldr	r2, [pc, #60]	; (8006254 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	fbb2 f2f3 	udiv	r2, r2, r3
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
 8006224:	e007      	b.n	8006236 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006226:	4a0b      	ldr	r2, [pc, #44]	; (8006254 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	fbb2 f2f3 	udiv	r2, r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	623b      	str	r3, [r7, #32]
      break;
 800623a:	e002      	b.n	8006242 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCC_GetSysClockFreq+0xc8>)
 800623e:	623b      	str	r3, [r7, #32]
      break;
 8006240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006242:	6a3b      	ldr	r3, [r7, #32]
}
 8006244:	4618      	mov	r0, r3
 8006246:	372c      	adds	r7, #44	; 0x2c
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40021000 	.word	0x40021000
 8006254:	007a1200 	.word	0x007a1200
 8006258:	0800a660 	.word	0x0800a660
 800625c:	0800a670 	.word	0x0800a670

08006260 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b092      	sub	sp, #72	; 0x48
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006270:	2300      	movs	r3, #0
 8006272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80d4 	beq.w	800642c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006284:	4b4e      	ldr	r3, [pc, #312]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10e      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006290:	4b4b      	ldr	r3, [pc, #300]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	4a4a      	ldr	r2, [pc, #296]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629a:	61d3      	str	r3, [r2, #28]
 800629c:	4b48      	ldr	r3, [pc, #288]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ae:	4b45      	ldr	r3, [pc, #276]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d118      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ba:	4b42      	ldr	r3, [pc, #264]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a41      	ldr	r2, [pc, #260]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c6:	f7fb fead 	bl	8002024 <HAL_GetTick>
 80062ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062cc:	e008      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ce:	f7fb fea9 	bl	8002024 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b64      	cmp	r3, #100	; 0x64
 80062da:	d901      	bls.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e1d6      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e0:	4b38      	ldr	r3, [pc, #224]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062ec:	4b34      	ldr	r3, [pc, #208]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8084 	beq.w	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006308:	429a      	cmp	r2, r3
 800630a:	d07c      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800630c:	4b2c      	ldr	r3, [pc, #176]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800631a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	fa93 f3a3 	rbit	r3, r3
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006326:	fab3 f383 	clz	r3, r3
 800632a:	b2db      	uxtb	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	461a      	mov	r2, r3
 8006336:	2301      	movs	r3, #1
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	fa93 f3a3 	rbit	r3, r3
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	461a      	mov	r2, r3
 800635a:	2300      	movs	r3, #0
 800635c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800635e:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006362:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d04b      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636e:	f7fb fe59 	bl	8002024 <HAL_GetTick>
 8006372:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006374:	e00a      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006376:	f7fb fe55 	bl	8002024 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	f241 3288 	movw	r2, #5000	; 0x1388
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e180      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800638c:	2302      	movs	r3, #2
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	fa93 f3a3 	rbit	r3, r3
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	2302      	movs	r3, #2
 800639a:	623b      	str	r3, [r7, #32]
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	fa93 f3a3 	rbit	r3, r3
 80063a2:	61fb      	str	r3, [r7, #28]
  return result;
 80063a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a6:	fab3 f383 	clz	r3, r3
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f043 0302 	orr.w	r3, r3, #2
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d108      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80063ba:	4b01      	ldr	r3, [pc, #4]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	e00d      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40007000 	.word	0x40007000
 80063c8:	10908100 	.word	0x10908100
 80063cc:	2302      	movs	r3, #2
 80063ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	fa93 f3a3 	rbit	r3, r3
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	4b9a      	ldr	r3, [pc, #616]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	2202      	movs	r2, #2
 80063de:	613a      	str	r2, [r7, #16]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	fa92 f2a2 	rbit	r2, r2
 80063e6:	60fa      	str	r2, [r7, #12]
  return result;
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	fab2 f282 	clz	r2, r2
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	f002 021f 	and.w	r2, r2, #31
 80063fa:	2101      	movs	r1, #1
 80063fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0b7      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006406:	4b8f      	ldr	r3, [pc, #572]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	498c      	ldr	r1, [pc, #560]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006414:	4313      	orrs	r3, r2
 8006416:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800641c:	2b01      	cmp	r3, #1
 800641e:	d105      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006420:	4b88      	ldr	r3, [pc, #544]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	4a87      	ldr	r2, [pc, #540]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800642a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006438:	4b82      	ldr	r3, [pc, #520]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f023 0203 	bic.w	r2, r3, #3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	497f      	ldr	r1, [pc, #508]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006446:	4313      	orrs	r3, r2
 8006448:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d008      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006456:	4b7b      	ldr	r3, [pc, #492]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	4978      	ldr	r1, [pc, #480]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006464:	4313      	orrs	r3, r2
 8006466:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006474:	4b73      	ldr	r3, [pc, #460]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	4970      	ldr	r1, [pc, #448]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006482:	4313      	orrs	r3, r2
 8006484:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006492:	4b6c      	ldr	r3, [pc, #432]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	f023 0210 	bic.w	r2, r3, #16
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	4969      	ldr	r1, [pc, #420]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80064b0:	4b64      	ldr	r3, [pc, #400]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064bc:	4961      	ldr	r1, [pc, #388]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064ce:	4b5d      	ldr	r3, [pc, #372]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	f023 0220 	bic.w	r2, r3, #32
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	495a      	ldr	r1, [pc, #360]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d008      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064ec:	4b55      	ldr	r3, [pc, #340]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	4952      	ldr	r1, [pc, #328]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d008      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800650a:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	494b      	ldr	r1, [pc, #300]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006518:	4313      	orrs	r3, r2
 800651a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006528:	4b46      	ldr	r3, [pc, #280]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	4943      	ldr	r1, [pc, #268]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006536:	4313      	orrs	r3, r2
 8006538:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006546:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	493c      	ldr	r1, [pc, #240]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006554:	4313      	orrs	r3, r2
 8006556:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006564:	4b37      	ldr	r3, [pc, #220]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	4934      	ldr	r1, [pc, #208]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006572:	4313      	orrs	r3, r2
 8006574:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006582:	4b30      	ldr	r3, [pc, #192]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	492d      	ldr	r1, [pc, #180]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006590:	4313      	orrs	r3, r2
 8006592:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80065a0:	4b28      	ldr	r3, [pc, #160]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	4925      	ldr	r1, [pc, #148]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80065be:	4b21      	ldr	r3, [pc, #132]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	491e      	ldr	r1, [pc, #120]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80065dc:	4b19      	ldr	r3, [pc, #100]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	4916      	ldr	r1, [pc, #88]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d008      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	490f      	ldr	r1, [pc, #60]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006608:	4313      	orrs	r3, r2
 800660a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	4907      	ldr	r1, [pc, #28]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006626:	4313      	orrs	r3, r2
 8006628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00c      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006636:	4b03      	ldr	r3, [pc, #12]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	e002      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000
 8006648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664a:	4913      	ldr	r1, [pc, #76]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800664c:	4313      	orrs	r3, r2
 800664e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800665c:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006668:	490b      	ldr	r1, [pc, #44]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800666a:	4313      	orrs	r3, r2
 800666c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d008      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006686:	4904      	ldr	r1, [pc, #16]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006688:	4313      	orrs	r3, r2
 800668a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3748      	adds	r7, #72	; 0x48
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000

0800669c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e049      	b.n	8006742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fb fa4c 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f000 fd30 	bl	8007140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d001      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e04f      	b.n	8006804 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a23      	ldr	r2, [pc, #140]	; (8006810 <HAL_TIM_Base_Start_IT+0xc4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01d      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x76>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d018      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x76>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_TIM_Base_Start_IT+0xc8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x76>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <HAL_TIM_Base_Start_IT+0xcc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x76>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1c      	ldr	r2, [pc, #112]	; (800681c <HAL_TIM_Base_Start_IT+0xd0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x76>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <HAL_TIM_Base_Start_IT+0xd4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_TIM_Base_Start_IT+0x76>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_TIM_Base_Start_IT+0xd8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d115      	bne.n	80067ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	4b17      	ldr	r3, [pc, #92]	; (8006828 <HAL_TIM_Base_Start_IT+0xdc>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d015      	beq.n	8006800 <HAL_TIM_Base_Start_IT+0xb4>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067da:	d011      	beq.n	8006800 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ec:	e008      	b.n	8006800 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e000      	b.n	8006802 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006800:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40013400 	.word	0x40013400
 8006820:	40014000 	.word	0x40014000
 8006824:	40015000 	.word	0x40015000
 8006828:	00010007 	.word	0x00010007

0800682c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e049      	b.n	80068d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fb f9be 	bl	8001bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f000 fc68 	bl	8007140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <HAL_TIM_PWM_Start+0x24>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	bf14      	ite	ne
 80068f8:	2301      	movne	r3, #1
 80068fa:	2300      	moveq	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	e03c      	b.n	800697a <HAL_TIM_PWM_Start+0x9e>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b04      	cmp	r3, #4
 8006904:	d109      	bne.n	800691a <HAL_TIM_PWM_Start+0x3e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b01      	cmp	r3, #1
 8006910:	bf14      	ite	ne
 8006912:	2301      	movne	r3, #1
 8006914:	2300      	moveq	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	e02f      	b.n	800697a <HAL_TIM_PWM_Start+0x9e>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b08      	cmp	r3, #8
 800691e:	d109      	bne.n	8006934 <HAL_TIM_PWM_Start+0x58>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	e022      	b.n	800697a <HAL_TIM_PWM_Start+0x9e>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b0c      	cmp	r3, #12
 8006938:	d109      	bne.n	800694e <HAL_TIM_PWM_Start+0x72>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	bf14      	ite	ne
 8006946:	2301      	movne	r3, #1
 8006948:	2300      	moveq	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	e015      	b.n	800697a <HAL_TIM_PWM_Start+0x9e>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b10      	cmp	r3, #16
 8006952:	d109      	bne.n	8006968 <HAL_TIM_PWM_Start+0x8c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	bf14      	ite	ne
 8006960:	2301      	movne	r3, #1
 8006962:	2300      	moveq	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	e008      	b.n	800697a <HAL_TIM_PWM_Start+0x9e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	bf14      	ite	ne
 8006974:	2301      	movne	r3, #1
 8006976:	2300      	moveq	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e0a1      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <HAL_TIM_PWM_Start+0xb6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006990:	e023      	b.n	80069da <HAL_TIM_PWM_Start+0xfe>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b04      	cmp	r3, #4
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_PWM_Start+0xc6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a0:	e01b      	b.n	80069da <HAL_TIM_PWM_Start+0xfe>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_PWM_Start+0xd6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b0:	e013      	b.n	80069da <HAL_TIM_PWM_Start+0xfe>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_PWM_Start+0xe6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069c0:	e00b      	b.n	80069da <HAL_TIM_PWM_Start+0xfe>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d104      	bne.n	80069d2 <HAL_TIM_PWM_Start+0xf6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069d0:	e003      	b.n	80069da <HAL_TIM_PWM_Start+0xfe>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2201      	movs	r2, #1
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 ffea 	bl	80079bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a38      	ldr	r2, [pc, #224]	; (8006ad0 <HAL_TIM_PWM_Start+0x1f4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d018      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x148>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a37      	ldr	r2, [pc, #220]	; (8006ad4 <HAL_TIM_PWM_Start+0x1f8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x148>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a35      	ldr	r2, [pc, #212]	; (8006ad8 <HAL_TIM_PWM_Start+0x1fc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00e      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x148>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a34      	ldr	r2, [pc, #208]	; (8006adc <HAL_TIM_PWM_Start+0x200>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d009      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x148>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a32      	ldr	r2, [pc, #200]	; (8006ae0 <HAL_TIM_PWM_Start+0x204>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x148>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a31      	ldr	r2, [pc, #196]	; (8006ae4 <HAL_TIM_PWM_Start+0x208>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d101      	bne.n	8006a28 <HAL_TIM_PWM_Start+0x14c>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_TIM_PWM_Start+0x14e>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a23      	ldr	r2, [pc, #140]	; (8006ad0 <HAL_TIM_PWM_Start+0x1f4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d01d      	beq.n	8006a84 <HAL_TIM_PWM_Start+0x1a8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a50:	d018      	beq.n	8006a84 <HAL_TIM_PWM_Start+0x1a8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a24      	ldr	r2, [pc, #144]	; (8006ae8 <HAL_TIM_PWM_Start+0x20c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d013      	beq.n	8006a84 <HAL_TIM_PWM_Start+0x1a8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <HAL_TIM_PWM_Start+0x210>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00e      	beq.n	8006a84 <HAL_TIM_PWM_Start+0x1a8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1a      	ldr	r2, [pc, #104]	; (8006ad4 <HAL_TIM_PWM_Start+0x1f8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d009      	beq.n	8006a84 <HAL_TIM_PWM_Start+0x1a8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <HAL_TIM_PWM_Start+0x1fc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d004      	beq.n	8006a84 <HAL_TIM_PWM_Start+0x1a8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_TIM_PWM_Start+0x208>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d115      	bne.n	8006ab0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <HAL_TIM_PWM_Start+0x214>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b06      	cmp	r3, #6
 8006a94:	d015      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1e6>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a9c:	d011      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	e008      	b.n	8006ac2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e000      	b.n	8006ac4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40013400 	.word	0x40013400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40014400 	.word	0x40014400
 8006ae0:	40014800 	.word	0x40014800
 8006ae4:	40015000 	.word	0x40015000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	00010007 	.word	0x00010007

08006af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d122      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d11b      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0202 	mvn.w	r2, #2
 8006b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fae3 	bl	8007102 <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fad5 	bl	80070ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fae6 	bl	8007116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d122      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0204 	mvn.w	r2, #4
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fab9 	bl	8007102 <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 faab 	bl	80070ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fabc 	bl	8007116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d122      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0208 	mvn.w	r2, #8
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2204      	movs	r2, #4
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa8f 	bl	8007102 <HAL_TIM_IC_CaptureCallback>
 8006be4:	e005      	b.n	8006bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa81 	bl	80070ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fa92 	bl	8007116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0210 	mvn.w	r2, #16
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2208      	movs	r2, #8
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa65 	bl	8007102 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa57 	bl	80070ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa68 	bl	8007116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d10e      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d107      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0201 	mvn.w	r2, #1
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fa f86a 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b80      	cmp	r3, #128	; 0x80
 8006c84:	d10e      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 ff48 	bl	8007b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb2:	d10e      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbe:	2b80      	cmp	r3, #128	; 0x80
 8006cc0:	d107      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 ff3b 	bl	8007b48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d10e      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d107      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fa16 	bl	800712a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d10e      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d107      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f06f 0220 	mvn.w	r2, #32
 8006d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fefb 	bl	8007b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e0ff      	b.n	8006f52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b14      	cmp	r3, #20
 8006d5e:	f200 80f0 	bhi.w	8006f42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006f43 	.word	0x08006f43
 8006d70:	08006f43 	.word	0x08006f43
 8006d74:	08006f43 	.word	0x08006f43
 8006d78:	08006dfd 	.word	0x08006dfd
 8006d7c:	08006f43 	.word	0x08006f43
 8006d80:	08006f43 	.word	0x08006f43
 8006d84:	08006f43 	.word	0x08006f43
 8006d88:	08006e3f 	.word	0x08006e3f
 8006d8c:	08006f43 	.word	0x08006f43
 8006d90:	08006f43 	.word	0x08006f43
 8006d94:	08006f43 	.word	0x08006f43
 8006d98:	08006e7f 	.word	0x08006e7f
 8006d9c:	08006f43 	.word	0x08006f43
 8006da0:	08006f43 	.word	0x08006f43
 8006da4:	08006f43 	.word	0x08006f43
 8006da8:	08006ec1 	.word	0x08006ec1
 8006dac:	08006f43 	.word	0x08006f43
 8006db0:	08006f43 	.word	0x08006f43
 8006db4:	08006f43 	.word	0x08006f43
 8006db8:	08006f01 	.word	0x08006f01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fa5a 	bl	800727c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0208 	orr.w	r2, r2, #8
 8006dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0204 	bic.w	r2, r2, #4
 8006de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6999      	ldr	r1, [r3, #24]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	619a      	str	r2, [r3, #24]
      break;
 8006dfa:	e0a5      	b.n	8006f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fad4 	bl	80073b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6999      	ldr	r1, [r3, #24]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	021a      	lsls	r2, r3, #8
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	619a      	str	r2, [r3, #24]
      break;
 8006e3c:	e084      	b.n	8006f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fb47 	bl	80074d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0208 	orr.w	r2, r2, #8
 8006e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0204 	bic.w	r2, r2, #4
 8006e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69d9      	ldr	r1, [r3, #28]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	61da      	str	r2, [r3, #28]
      break;
 8006e7c:	e064      	b.n	8006f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fbb9 	bl	80075fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69d9      	ldr	r1, [r3, #28]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	021a      	lsls	r2, r3, #8
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	61da      	str	r2, [r3, #28]
      break;
 8006ebe:	e043      	b.n	8006f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fc08 	bl	80076dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0208 	orr.w	r2, r2, #8
 8006eda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0204 	bic.w	r2, r2, #4
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006efe:	e023      	b.n	8006f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fc52 	bl	80077b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	021a      	lsls	r2, r3, #8
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f40:	e002      	b.n	8006f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
      break;
 8006f46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop

08006f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_TIM_ConfigClockSource+0x1c>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e0b6      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x18a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb4:	d03e      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0xd8>
 8006fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fba:	f200 8087 	bhi.w	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	f000 8086 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x176>
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fca:	d87f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006fcc:	2b70      	cmp	r3, #112	; 0x70
 8006fce:	d01a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0xaa>
 8006fd0:	2b70      	cmp	r3, #112	; 0x70
 8006fd2:	d87b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006fd4:	2b60      	cmp	r3, #96	; 0x60
 8006fd6:	d050      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x11e>
 8006fd8:	2b60      	cmp	r3, #96	; 0x60
 8006fda:	d877      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006fdc:	2b50      	cmp	r3, #80	; 0x50
 8006fde:	d03c      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xfe>
 8006fe0:	2b50      	cmp	r3, #80	; 0x50
 8006fe2:	d873      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d058      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x13e>
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d86f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d064      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15e>
 8006ff0:	2b30      	cmp	r3, #48	; 0x30
 8006ff2:	d86b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d060      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15e>
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d867      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d05c      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15e>
 8007000:	2b10      	cmp	r3, #16
 8007002:	d05a      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15e>
 8007004:	e062      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6899      	ldr	r1, [r3, #8]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f000 fcb1 	bl	800797c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	609a      	str	r2, [r3, #8]
      break;
 8007032:	e04f      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6899      	ldr	r1, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f000 fc9a 	bl	800797c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007056:	609a      	str	r2, [r3, #8]
      break;
 8007058:	e03c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	461a      	mov	r2, r3
 8007068:	f000 fc0e 	bl	8007888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2150      	movs	r1, #80	; 0x50
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fc67 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 8007078:	e02c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	461a      	mov	r2, r3
 8007088:	f000 fc2d 	bl	80078e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2160      	movs	r1, #96	; 0x60
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fc57 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 8007098:	e01c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 fbee 	bl	8007888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2140      	movs	r1, #64	; 0x40
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fc47 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 80070b8:	e00c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f000 fc3e 	bl	8007946 <TIM_ITRx_SetConfig>
      break;
 80070ca:	e003      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
      break;
 80070d0:	e000      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80070d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a42      	ldr	r2, [pc, #264]	; (800725c <TIM_Base_SetConfig+0x11c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d013      	beq.n	8007180 <TIM_Base_SetConfig+0x40>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715e:	d00f      	beq.n	8007180 <TIM_Base_SetConfig+0x40>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a3f      	ldr	r2, [pc, #252]	; (8007260 <TIM_Base_SetConfig+0x120>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00b      	beq.n	8007180 <TIM_Base_SetConfig+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a3e      	ldr	r2, [pc, #248]	; (8007264 <TIM_Base_SetConfig+0x124>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d007      	beq.n	8007180 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a3d      	ldr	r2, [pc, #244]	; (8007268 <TIM_Base_SetConfig+0x128>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a3c      	ldr	r2, [pc, #240]	; (800726c <TIM_Base_SetConfig+0x12c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d108      	bne.n	8007192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a31      	ldr	r2, [pc, #196]	; (800725c <TIM_Base_SetConfig+0x11c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d01f      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a0:	d01b      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2e      	ldr	r2, [pc, #184]	; (8007260 <TIM_Base_SetConfig+0x120>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d017      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2d      	ldr	r2, [pc, #180]	; (8007264 <TIM_Base_SetConfig+0x124>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <TIM_Base_SetConfig+0x128>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00f      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a2c      	ldr	r2, [pc, #176]	; (8007270 <TIM_Base_SetConfig+0x130>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00b      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a2b      	ldr	r2, [pc, #172]	; (8007274 <TIM_Base_SetConfig+0x134>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d007      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <TIM_Base_SetConfig+0x138>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d003      	beq.n	80071da <TIM_Base_SetConfig+0x9a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a25      	ldr	r2, [pc, #148]	; (800726c <TIM_Base_SetConfig+0x12c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d108      	bne.n	80071ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a12      	ldr	r2, [pc, #72]	; (800725c <TIM_Base_SetConfig+0x11c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <TIM_Base_SetConfig+0x100>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a13      	ldr	r2, [pc, #76]	; (8007268 <TIM_Base_SetConfig+0x128>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00f      	beq.n	8007240 <TIM_Base_SetConfig+0x100>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a13      	ldr	r2, [pc, #76]	; (8007270 <TIM_Base_SetConfig+0x130>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00b      	beq.n	8007240 <TIM_Base_SetConfig+0x100>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a12      	ldr	r2, [pc, #72]	; (8007274 <TIM_Base_SetConfig+0x134>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_Base_SetConfig+0x100>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a11      	ldr	r2, [pc, #68]	; (8007278 <TIM_Base_SetConfig+0x138>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_Base_SetConfig+0x100>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a0c      	ldr	r2, [pc, #48]	; (800726c <TIM_Base_SetConfig+0x12c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	615a      	str	r2, [r3, #20]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40013400 	.word	0x40013400
 800726c:	40015000 	.word	0x40015000
 8007270:	40014000 	.word	0x40014000
 8007274:	40014400 	.word	0x40014400
 8007278:	40014800 	.word	0x40014800

0800727c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f023 0201 	bic.w	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f023 0302 	bic.w	r3, r3, #2
 80072c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a30      	ldr	r2, [pc, #192]	; (8007398 <TIM_OC1_SetConfig+0x11c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d013      	beq.n	8007304 <TIM_OC1_SetConfig+0x88>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a2f      	ldr	r2, [pc, #188]	; (800739c <TIM_OC1_SetConfig+0x120>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00f      	beq.n	8007304 <TIM_OC1_SetConfig+0x88>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a2e      	ldr	r2, [pc, #184]	; (80073a0 <TIM_OC1_SetConfig+0x124>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00b      	beq.n	8007304 <TIM_OC1_SetConfig+0x88>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <TIM_OC1_SetConfig+0x128>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d007      	beq.n	8007304 <TIM_OC1_SetConfig+0x88>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a2c      	ldr	r2, [pc, #176]	; (80073a8 <TIM_OC1_SetConfig+0x12c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_OC1_SetConfig+0x88>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a2b      	ldr	r2, [pc, #172]	; (80073ac <TIM_OC1_SetConfig+0x130>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10c      	bne.n	800731e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0308 	bic.w	r3, r3, #8
 800730a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <TIM_OC1_SetConfig+0x11c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <TIM_OC1_SetConfig+0xd2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a1c      	ldr	r2, [pc, #112]	; (800739c <TIM_OC1_SetConfig+0x120>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00f      	beq.n	800734e <TIM_OC1_SetConfig+0xd2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <TIM_OC1_SetConfig+0x124>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00b      	beq.n	800734e <TIM_OC1_SetConfig+0xd2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <TIM_OC1_SetConfig+0x128>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d007      	beq.n	800734e <TIM_OC1_SetConfig+0xd2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a19      	ldr	r2, [pc, #100]	; (80073a8 <TIM_OC1_SetConfig+0x12c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_OC1_SetConfig+0xd2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a18      	ldr	r2, [pc, #96]	; (80073ac <TIM_OC1_SetConfig+0x130>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d111      	bne.n	8007372 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800735c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	621a      	str	r2, [r3, #32]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40012c00 	.word	0x40012c00
 800739c:	40013400 	.word	0x40013400
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800
 80073ac:	40015000 	.word	0x40015000

080073b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f023 0210 	bic.w	r2, r3, #16
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0320 	bic.w	r3, r3, #32
 80073fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <TIM_OC2_SetConfig+0x110>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d007      	beq.n	8007424 <TIM_OC2_SetConfig+0x74>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <TIM_OC2_SetConfig+0x114>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d003      	beq.n	8007424 <TIM_OC2_SetConfig+0x74>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a2a      	ldr	r2, [pc, #168]	; (80074c8 <TIM_OC2_SetConfig+0x118>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d10d      	bne.n	8007440 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800742a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800743e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a1f      	ldr	r2, [pc, #124]	; (80074c0 <TIM_OC2_SetConfig+0x110>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <TIM_OC2_SetConfig+0xc0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <TIM_OC2_SetConfig+0x114>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00f      	beq.n	8007470 <TIM_OC2_SetConfig+0xc0>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a1e      	ldr	r2, [pc, #120]	; (80074cc <TIM_OC2_SetConfig+0x11c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00b      	beq.n	8007470 <TIM_OC2_SetConfig+0xc0>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a1d      	ldr	r2, [pc, #116]	; (80074d0 <TIM_OC2_SetConfig+0x120>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d007      	beq.n	8007470 <TIM_OC2_SetConfig+0xc0>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <TIM_OC2_SetConfig+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_OC2_SetConfig+0xc0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a17      	ldr	r2, [pc, #92]	; (80074c8 <TIM_OC2_SetConfig+0x118>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d113      	bne.n	8007498 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007476:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800747e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	621a      	str	r2, [r3, #32]
}
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40012c00 	.word	0x40012c00
 80074c4:	40013400 	.word	0x40013400
 80074c8:	40015000 	.word	0x40015000
 80074cc:	40014000 	.word	0x40014000
 80074d0:	40014400 	.word	0x40014400
 80074d4:	40014800 	.word	0x40014800

080074d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	021b      	lsls	r3, r3, #8
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2b      	ldr	r2, [pc, #172]	; (80075e4 <TIM_OC3_SetConfig+0x10c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d007      	beq.n	800754a <TIM_OC3_SetConfig+0x72>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <TIM_OC3_SetConfig+0x110>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_OC3_SetConfig+0x72>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a29      	ldr	r2, [pc, #164]	; (80075ec <TIM_OC3_SetConfig+0x114>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d10d      	bne.n	8007566 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007564:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <TIM_OC3_SetConfig+0x10c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <TIM_OC3_SetConfig+0xbe>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <TIM_OC3_SetConfig+0x110>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <TIM_OC3_SetConfig+0xbe>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <TIM_OC3_SetConfig+0x118>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00b      	beq.n	8007596 <TIM_OC3_SetConfig+0xbe>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1c      	ldr	r2, [pc, #112]	; (80075f4 <TIM_OC3_SetConfig+0x11c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <TIM_OC3_SetConfig+0xbe>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a1b      	ldr	r2, [pc, #108]	; (80075f8 <TIM_OC3_SetConfig+0x120>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_OC3_SetConfig+0xbe>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a16      	ldr	r2, [pc, #88]	; (80075ec <TIM_OC3_SetConfig+0x114>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d113      	bne.n	80075be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800759c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	621a      	str	r2, [r3, #32]
}
 80075d8:	bf00      	nop
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	40012c00 	.word	0x40012c00
 80075e8:	40013400 	.word	0x40013400
 80075ec:	40015000 	.word	0x40015000
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800

080075fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800762a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800764a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	031b      	lsls	r3, r3, #12
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	4313      	orrs	r3, r2
 8007656:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a1a      	ldr	r2, [pc, #104]	; (80076c4 <TIM_OC4_SetConfig+0xc8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <TIM_OC4_SetConfig+0x8c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <TIM_OC4_SetConfig+0xcc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00f      	beq.n	8007688 <TIM_OC4_SetConfig+0x8c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a18      	ldr	r2, [pc, #96]	; (80076cc <TIM_OC4_SetConfig+0xd0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00b      	beq.n	8007688 <TIM_OC4_SetConfig+0x8c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a17      	ldr	r2, [pc, #92]	; (80076d0 <TIM_OC4_SetConfig+0xd4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d007      	beq.n	8007688 <TIM_OC4_SetConfig+0x8c>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <TIM_OC4_SetConfig+0xd8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC4_SetConfig+0x8c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <TIM_OC4_SetConfig+0xdc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d109      	bne.n	800769c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800768e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	019b      	lsls	r3, r3, #6
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40013400 	.word	0x40013400
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400
 80076d4:	40014800 	.word	0x40014800
 80076d8:	40015000 	.word	0x40015000

080076dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	041b      	lsls	r3, r3, #16
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a19      	ldr	r2, [pc, #100]	; (8007798 <TIM_OC5_SetConfig+0xbc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <TIM_OC5_SetConfig+0x82>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a18      	ldr	r2, [pc, #96]	; (800779c <TIM_OC5_SetConfig+0xc0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00f      	beq.n	800775e <TIM_OC5_SetConfig+0x82>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <TIM_OC5_SetConfig+0xc4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00b      	beq.n	800775e <TIM_OC5_SetConfig+0x82>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a16      	ldr	r2, [pc, #88]	; (80077a4 <TIM_OC5_SetConfig+0xc8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d007      	beq.n	800775e <TIM_OC5_SetConfig+0x82>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <TIM_OC5_SetConfig+0xcc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d003      	beq.n	800775e <TIM_OC5_SetConfig+0x82>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a14      	ldr	r2, [pc, #80]	; (80077ac <TIM_OC5_SetConfig+0xd0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d109      	bne.n	8007772 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	621a      	str	r2, [r3, #32]
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	40012c00 	.word	0x40012c00
 800779c:	40013400 	.word	0x40013400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40014400 	.word	0x40014400
 80077a8:	40014800 	.word	0x40014800
 80077ac:	40015000 	.word	0x40015000

080077b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	051b      	lsls	r3, r3, #20
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <TIM_OC6_SetConfig+0xc0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d013      	beq.n	8007834 <TIM_OC6_SetConfig+0x84>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a19      	ldr	r2, [pc, #100]	; (8007874 <TIM_OC6_SetConfig+0xc4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00f      	beq.n	8007834 <TIM_OC6_SetConfig+0x84>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a18      	ldr	r2, [pc, #96]	; (8007878 <TIM_OC6_SetConfig+0xc8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d00b      	beq.n	8007834 <TIM_OC6_SetConfig+0x84>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a17      	ldr	r2, [pc, #92]	; (800787c <TIM_OC6_SetConfig+0xcc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d007      	beq.n	8007834 <TIM_OC6_SetConfig+0x84>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a16      	ldr	r2, [pc, #88]	; (8007880 <TIM_OC6_SetConfig+0xd0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d003      	beq.n	8007834 <TIM_OC6_SetConfig+0x84>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a15      	ldr	r2, [pc, #84]	; (8007884 <TIM_OC6_SetConfig+0xd4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d109      	bne.n	8007848 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	029b      	lsls	r3, r3, #10
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	621a      	str	r2, [r3, #32]
}
 8007862:	bf00      	nop
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	40012c00 	.word	0x40012c00
 8007874:	40013400 	.word	0x40013400
 8007878:	40014000 	.word	0x40014000
 800787c:	40014400 	.word	0x40014400
 8007880:	40014800 	.word	0x40014800
 8007884:	40015000 	.word	0x40015000

08007888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f023 0201 	bic.w	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f023 030a 	bic.w	r3, r3, #10
 80078c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b087      	sub	sp, #28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f023 0210 	bic.w	r2, r3, #16
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	031b      	lsls	r3, r3, #12
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	f043 0307 	orr.w	r3, r3, #7
 8007968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	609a      	str	r2, [r3, #8]
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	021a      	lsls	r2, r3, #8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	431a      	orrs	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	609a      	str	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	2201      	movs	r2, #1
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	43db      	mvns	r3, r3
 80079de:	401a      	ands	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1a      	ldr	r2, [r3, #32]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	fa01 f303 	lsl.w	r3, r1, r3
 80079f4:	431a      	orrs	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e06d      	b.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a30      	ldr	r2, [pc, #192]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d009      	beq.n	8007a5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a2f      	ldr	r2, [pc, #188]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d004      	beq.n	8007a5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a2d      	ldr	r2, [pc, #180]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d108      	bne.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1e      	ldr	r2, [pc, #120]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d01d      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d018      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d013      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d009      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a16      	ldr	r2, [pc, #88]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d004      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a11      	ldr	r2, [pc, #68]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10c      	bne.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40015000 	.word	0x40015000
 8007b14:	40000400 	.word	0x40000400
 8007b18:	40000800 	.word	0x40000800
 8007b1c:	40014000 	.word	0x40014000

08007b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <__errno>:
 8007b5c:	4b01      	ldr	r3, [pc, #4]	; (8007b64 <__errno+0x8>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000010 	.word	0x20000010

08007b68 <__libc_init_array>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	4d0d      	ldr	r5, [pc, #52]	; (8007ba0 <__libc_init_array+0x38>)
 8007b6c:	4c0d      	ldr	r4, [pc, #52]	; (8007ba4 <__libc_init_array+0x3c>)
 8007b6e:	1b64      	subs	r4, r4, r5
 8007b70:	10a4      	asrs	r4, r4, #2
 8007b72:	2600      	movs	r6, #0
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	d109      	bne.n	8007b8c <__libc_init_array+0x24>
 8007b78:	4d0b      	ldr	r5, [pc, #44]	; (8007ba8 <__libc_init_array+0x40>)
 8007b7a:	4c0c      	ldr	r4, [pc, #48]	; (8007bac <__libc_init_array+0x44>)
 8007b7c:	f002 fd5c 	bl	800a638 <_init>
 8007b80:	1b64      	subs	r4, r4, r5
 8007b82:	10a4      	asrs	r4, r4, #2
 8007b84:	2600      	movs	r6, #0
 8007b86:	42a6      	cmp	r6, r4
 8007b88:	d105      	bne.n	8007b96 <__libc_init_array+0x2e>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b90:	4798      	blx	r3
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7ee      	b.n	8007b74 <__libc_init_array+0xc>
 8007b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b9a:	4798      	blx	r3
 8007b9c:	3601      	adds	r6, #1
 8007b9e:	e7f2      	b.n	8007b86 <__libc_init_array+0x1e>
 8007ba0:	0800aa5c 	.word	0x0800aa5c
 8007ba4:	0800aa5c 	.word	0x0800aa5c
 8007ba8:	0800aa5c 	.word	0x0800aa5c
 8007bac:	0800aa60 	.word	0x0800aa60

08007bb0 <memset>:
 8007bb0:	4402      	add	r2, r0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d100      	bne.n	8007bba <memset+0xa>
 8007bb8:	4770      	bx	lr
 8007bba:	f803 1b01 	strb.w	r1, [r3], #1
 8007bbe:	e7f9      	b.n	8007bb4 <memset+0x4>

08007bc0 <__cvt>:
 8007bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	ec55 4b10 	vmov	r4, r5, d0
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	460e      	mov	r6, r1
 8007bcc:	4619      	mov	r1, r3
 8007bce:	462b      	mov	r3, r5
 8007bd0:	bfbb      	ittet	lt
 8007bd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bd6:	461d      	movlt	r5, r3
 8007bd8:	2300      	movge	r3, #0
 8007bda:	232d      	movlt	r3, #45	; 0x2d
 8007bdc:	700b      	strb	r3, [r1, #0]
 8007bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007be4:	4691      	mov	r9, r2
 8007be6:	f023 0820 	bic.w	r8, r3, #32
 8007bea:	bfbc      	itt	lt
 8007bec:	4622      	movlt	r2, r4
 8007bee:	4614      	movlt	r4, r2
 8007bf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bf4:	d005      	beq.n	8007c02 <__cvt+0x42>
 8007bf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bfa:	d100      	bne.n	8007bfe <__cvt+0x3e>
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	2102      	movs	r1, #2
 8007c00:	e000      	b.n	8007c04 <__cvt+0x44>
 8007c02:	2103      	movs	r1, #3
 8007c04:	ab03      	add	r3, sp, #12
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	ab02      	add	r3, sp, #8
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	ec45 4b10 	vmov	d0, r4, r5
 8007c10:	4653      	mov	r3, sl
 8007c12:	4632      	mov	r2, r6
 8007c14:	f000 fccc 	bl	80085b0 <_dtoa_r>
 8007c18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	d102      	bne.n	8007c26 <__cvt+0x66>
 8007c20:	f019 0f01 	tst.w	r9, #1
 8007c24:	d022      	beq.n	8007c6c <__cvt+0xac>
 8007c26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c2a:	eb07 0906 	add.w	r9, r7, r6
 8007c2e:	d110      	bne.n	8007c52 <__cvt+0x92>
 8007c30:	783b      	ldrb	r3, [r7, #0]
 8007c32:	2b30      	cmp	r3, #48	; 0x30
 8007c34:	d10a      	bne.n	8007c4c <__cvt+0x8c>
 8007c36:	2200      	movs	r2, #0
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 ff4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c42:	b918      	cbnz	r0, 8007c4c <__cvt+0x8c>
 8007c44:	f1c6 0601 	rsb	r6, r6, #1
 8007c48:	f8ca 6000 	str.w	r6, [sl]
 8007c4c:	f8da 3000 	ldr.w	r3, [sl]
 8007c50:	4499      	add	r9, r3
 8007c52:	2200      	movs	r2, #0
 8007c54:	2300      	movs	r3, #0
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c5e:	b108      	cbz	r0, 8007c64 <__cvt+0xa4>
 8007c60:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c64:	2230      	movs	r2, #48	; 0x30
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	454b      	cmp	r3, r9
 8007c6a:	d307      	bcc.n	8007c7c <__cvt+0xbc>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c70:	1bdb      	subs	r3, r3, r7
 8007c72:	4638      	mov	r0, r7
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	b004      	add	sp, #16
 8007c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7c:	1c59      	adds	r1, r3, #1
 8007c7e:	9103      	str	r1, [sp, #12]
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e7f0      	b.n	8007c66 <__cvt+0xa6>

08007c84 <__exponent>:
 8007c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c86:	4603      	mov	r3, r0
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	bfb8      	it	lt
 8007c8c:	4249      	neglt	r1, r1
 8007c8e:	f803 2b02 	strb.w	r2, [r3], #2
 8007c92:	bfb4      	ite	lt
 8007c94:	222d      	movlt	r2, #45	; 0x2d
 8007c96:	222b      	movge	r2, #43	; 0x2b
 8007c98:	2909      	cmp	r1, #9
 8007c9a:	7042      	strb	r2, [r0, #1]
 8007c9c:	dd2a      	ble.n	8007cf4 <__exponent+0x70>
 8007c9e:	f10d 0407 	add.w	r4, sp, #7
 8007ca2:	46a4      	mov	ip, r4
 8007ca4:	270a      	movs	r7, #10
 8007ca6:	46a6      	mov	lr, r4
 8007ca8:	460a      	mov	r2, r1
 8007caa:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cae:	fb07 1516 	mls	r5, r7, r6, r1
 8007cb2:	3530      	adds	r5, #48	; 0x30
 8007cb4:	2a63      	cmp	r2, #99	; 0x63
 8007cb6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007cba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	dcf1      	bgt.n	8007ca6 <__exponent+0x22>
 8007cc2:	3130      	adds	r1, #48	; 0x30
 8007cc4:	f1ae 0502 	sub.w	r5, lr, #2
 8007cc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ccc:	1c44      	adds	r4, r0, #1
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4561      	cmp	r1, ip
 8007cd2:	d30a      	bcc.n	8007cea <__exponent+0x66>
 8007cd4:	f10d 0209 	add.w	r2, sp, #9
 8007cd8:	eba2 020e 	sub.w	r2, r2, lr
 8007cdc:	4565      	cmp	r5, ip
 8007cde:	bf88      	it	hi
 8007ce0:	2200      	movhi	r2, #0
 8007ce2:	4413      	add	r3, r2
 8007ce4:	1a18      	subs	r0, r3, r0
 8007ce6:	b003      	add	sp, #12
 8007ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007cf2:	e7ed      	b.n	8007cd0 <__exponent+0x4c>
 8007cf4:	2330      	movs	r3, #48	; 0x30
 8007cf6:	3130      	adds	r1, #48	; 0x30
 8007cf8:	7083      	strb	r3, [r0, #2]
 8007cfa:	70c1      	strb	r1, [r0, #3]
 8007cfc:	1d03      	adds	r3, r0, #4
 8007cfe:	e7f1      	b.n	8007ce4 <__exponent+0x60>

08007d00 <_printf_float>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	ed2d 8b02 	vpush	{d8}
 8007d08:	b08d      	sub	sp, #52	; 0x34
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d10:	4616      	mov	r6, r2
 8007d12:	461f      	mov	r7, r3
 8007d14:	4605      	mov	r5, r0
 8007d16:	f001 fa39 	bl	800918c <_localeconv_r>
 8007d1a:	f8d0 a000 	ldr.w	sl, [r0]
 8007d1e:	4650      	mov	r0, sl
 8007d20:	f7f8 fa5e 	bl	80001e0 <strlen>
 8007d24:	2300      	movs	r3, #0
 8007d26:	930a      	str	r3, [sp, #40]	; 0x28
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d34:	3307      	adds	r3, #7
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	f103 0208 	add.w	r2, r3, #8
 8007d3e:	f8c8 2000 	str.w	r2, [r8]
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d52:	9307      	str	r3, [sp, #28]
 8007d54:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d58:	ee08 0a10 	vmov	s16, r0
 8007d5c:	4b9f      	ldr	r3, [pc, #636]	; (8007fdc <_printf_float+0x2dc>)
 8007d5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d66:	f7f8 fee9 	bl	8000b3c <__aeabi_dcmpun>
 8007d6a:	bb88      	cbnz	r0, 8007dd0 <_printf_float+0xd0>
 8007d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d70:	4b9a      	ldr	r3, [pc, #616]	; (8007fdc <_printf_float+0x2dc>)
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d76:	f7f8 fec3 	bl	8000b00 <__aeabi_dcmple>
 8007d7a:	bb48      	cbnz	r0, 8007dd0 <_printf_float+0xd0>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4640      	mov	r0, r8
 8007d82:	4649      	mov	r1, r9
 8007d84:	f7f8 feb2 	bl	8000aec <__aeabi_dcmplt>
 8007d88:	b110      	cbz	r0, 8007d90 <_printf_float+0x90>
 8007d8a:	232d      	movs	r3, #45	; 0x2d
 8007d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d90:	4b93      	ldr	r3, [pc, #588]	; (8007fe0 <_printf_float+0x2e0>)
 8007d92:	4894      	ldr	r0, [pc, #592]	; (8007fe4 <_printf_float+0x2e4>)
 8007d94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d98:	bf94      	ite	ls
 8007d9a:	4698      	movls	r8, r3
 8007d9c:	4680      	movhi	r8, r0
 8007d9e:	2303      	movs	r3, #3
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	9b05      	ldr	r3, [sp, #20]
 8007da4:	f023 0204 	bic.w	r2, r3, #4
 8007da8:	6022      	str	r2, [r4, #0]
 8007daa:	f04f 0900 	mov.w	r9, #0
 8007dae:	9700      	str	r7, [sp, #0]
 8007db0:	4633      	mov	r3, r6
 8007db2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007db4:	4621      	mov	r1, r4
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f9d8 	bl	800816c <_printf_common>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f040 8090 	bne.w	8007ee2 <_printf_float+0x1e2>
 8007dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc6:	b00d      	add	sp, #52	; 0x34
 8007dc8:	ecbd 8b02 	vpop	{d8}
 8007dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	f7f8 feb0 	bl	8000b3c <__aeabi_dcmpun>
 8007ddc:	b140      	cbz	r0, 8007df0 <_printf_float+0xf0>
 8007dde:	464b      	mov	r3, r9
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	bfbc      	itt	lt
 8007de4:	232d      	movlt	r3, #45	; 0x2d
 8007de6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dea:	487f      	ldr	r0, [pc, #508]	; (8007fe8 <_printf_float+0x2e8>)
 8007dec:	4b7f      	ldr	r3, [pc, #508]	; (8007fec <_printf_float+0x2ec>)
 8007dee:	e7d1      	b.n	8007d94 <_printf_float+0x94>
 8007df0:	6863      	ldr	r3, [r4, #4]
 8007df2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007df6:	9206      	str	r2, [sp, #24]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	d13f      	bne.n	8007e7c <_printf_float+0x17c>
 8007dfc:	2306      	movs	r3, #6
 8007dfe:	6063      	str	r3, [r4, #4]
 8007e00:	9b05      	ldr	r3, [sp, #20]
 8007e02:	6861      	ldr	r1, [r4, #4]
 8007e04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9303      	str	r3, [sp, #12]
 8007e0c:	ab0a      	add	r3, sp, #40	; 0x28
 8007e0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e12:	ab09      	add	r3, sp, #36	; 0x24
 8007e14:	ec49 8b10 	vmov	d0, r8, r9
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	6022      	str	r2, [r4, #0]
 8007e1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e20:	4628      	mov	r0, r5
 8007e22:	f7ff fecd 	bl	8007bc0 <__cvt>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e2a:	2b47      	cmp	r3, #71	; 0x47
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	d108      	bne.n	8007e42 <_printf_float+0x142>
 8007e30:	1cc8      	adds	r0, r1, #3
 8007e32:	db02      	blt.n	8007e3a <_printf_float+0x13a>
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	4299      	cmp	r1, r3
 8007e38:	dd41      	ble.n	8007ebe <_printf_float+0x1be>
 8007e3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e3e:	fa5f fb8b 	uxtb.w	fp, fp
 8007e42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e46:	d820      	bhi.n	8007e8a <_printf_float+0x18a>
 8007e48:	3901      	subs	r1, #1
 8007e4a:	465a      	mov	r2, fp
 8007e4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e50:	9109      	str	r1, [sp, #36]	; 0x24
 8007e52:	f7ff ff17 	bl	8007c84 <__exponent>
 8007e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e58:	1813      	adds	r3, r2, r0
 8007e5a:	2a01      	cmp	r2, #1
 8007e5c:	4681      	mov	r9, r0
 8007e5e:	6123      	str	r3, [r4, #16]
 8007e60:	dc02      	bgt.n	8007e68 <_printf_float+0x168>
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	07d2      	lsls	r2, r2, #31
 8007e66:	d501      	bpl.n	8007e6c <_printf_float+0x16c>
 8007e68:	3301      	adds	r3, #1
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d09c      	beq.n	8007dae <_printf_float+0xae>
 8007e74:	232d      	movs	r3, #45	; 0x2d
 8007e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e7a:	e798      	b.n	8007dae <_printf_float+0xae>
 8007e7c:	9a06      	ldr	r2, [sp, #24]
 8007e7e:	2a47      	cmp	r2, #71	; 0x47
 8007e80:	d1be      	bne.n	8007e00 <_printf_float+0x100>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1bc      	bne.n	8007e00 <_printf_float+0x100>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e7b9      	b.n	8007dfe <_printf_float+0xfe>
 8007e8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e8e:	d118      	bne.n	8007ec2 <_printf_float+0x1c2>
 8007e90:	2900      	cmp	r1, #0
 8007e92:	6863      	ldr	r3, [r4, #4]
 8007e94:	dd0b      	ble.n	8007eae <_printf_float+0x1ae>
 8007e96:	6121      	str	r1, [r4, #16]
 8007e98:	b913      	cbnz	r3, 8007ea0 <_printf_float+0x1a0>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	07d0      	lsls	r0, r2, #31
 8007e9e:	d502      	bpl.n	8007ea6 <_printf_float+0x1a6>
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	440b      	add	r3, r1
 8007ea4:	6123      	str	r3, [r4, #16]
 8007ea6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ea8:	f04f 0900 	mov.w	r9, #0
 8007eac:	e7de      	b.n	8007e6c <_printf_float+0x16c>
 8007eae:	b913      	cbnz	r3, 8007eb6 <_printf_float+0x1b6>
 8007eb0:	6822      	ldr	r2, [r4, #0]
 8007eb2:	07d2      	lsls	r2, r2, #31
 8007eb4:	d501      	bpl.n	8007eba <_printf_float+0x1ba>
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	e7f4      	b.n	8007ea4 <_printf_float+0x1a4>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7f2      	b.n	8007ea4 <_printf_float+0x1a4>
 8007ebe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	db05      	blt.n	8007ed4 <_printf_float+0x1d4>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	6121      	str	r1, [r4, #16]
 8007ecc:	07d8      	lsls	r0, r3, #31
 8007ece:	d5ea      	bpl.n	8007ea6 <_printf_float+0x1a6>
 8007ed0:	1c4b      	adds	r3, r1, #1
 8007ed2:	e7e7      	b.n	8007ea4 <_printf_float+0x1a4>
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	bfd4      	ite	le
 8007ed8:	f1c1 0202 	rsble	r2, r1, #2
 8007edc:	2201      	movgt	r2, #1
 8007ede:	4413      	add	r3, r2
 8007ee0:	e7e0      	b.n	8007ea4 <_printf_float+0x1a4>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	055a      	lsls	r2, r3, #21
 8007ee6:	d407      	bmi.n	8007ef8 <_printf_float+0x1f8>
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	4642      	mov	r2, r8
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	d12c      	bne.n	8007f50 <_printf_float+0x250>
 8007ef6:	e764      	b.n	8007dc2 <_printf_float+0xc2>
 8007ef8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007efc:	f240 80e0 	bls.w	80080c0 <_printf_float+0x3c0>
 8007f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	f7f8 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d034      	beq.n	8007f7a <_printf_float+0x27a>
 8007f10:	4a37      	ldr	r2, [pc, #220]	; (8007ff0 <_printf_float+0x2f0>)
 8007f12:	2301      	movs	r3, #1
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f af51 	beq.w	8007dc2 <_printf_float+0xc2>
 8007f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f24:	429a      	cmp	r2, r3
 8007f26:	db02      	blt.n	8007f2e <_printf_float+0x22e>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	07d8      	lsls	r0, r3, #31
 8007f2c:	d510      	bpl.n	8007f50 <_printf_float+0x250>
 8007f2e:	ee18 3a10 	vmov	r3, s16
 8007f32:	4652      	mov	r2, sl
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f43f af41 	beq.w	8007dc2 <_printf_float+0xc2>
 8007f40:	f04f 0800 	mov.w	r8, #0
 8007f44:	f104 091a 	add.w	r9, r4, #26
 8007f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	4543      	cmp	r3, r8
 8007f4e:	dc09      	bgt.n	8007f64 <_printf_float+0x264>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	079b      	lsls	r3, r3, #30
 8007f54:	f100 8105 	bmi.w	8008162 <_printf_float+0x462>
 8007f58:	68e0      	ldr	r0, [r4, #12]
 8007f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f5c:	4298      	cmp	r0, r3
 8007f5e:	bfb8      	it	lt
 8007f60:	4618      	movlt	r0, r3
 8007f62:	e730      	b.n	8007dc6 <_printf_float+0xc6>
 8007f64:	2301      	movs	r3, #1
 8007f66:	464a      	mov	r2, r9
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af27 	beq.w	8007dc2 <_printf_float+0xc2>
 8007f74:	f108 0801 	add.w	r8, r8, #1
 8007f78:	e7e6      	b.n	8007f48 <_printf_float+0x248>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dc39      	bgt.n	8007ff4 <_printf_float+0x2f4>
 8007f80:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <_printf_float+0x2f0>)
 8007f82:	2301      	movs	r3, #1
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f af19 	beq.w	8007dc2 <_printf_float+0xc2>
 8007f90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f94:	4313      	orrs	r3, r2
 8007f96:	d102      	bne.n	8007f9e <_printf_float+0x29e>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07d9      	lsls	r1, r3, #31
 8007f9c:	d5d8      	bpl.n	8007f50 <_printf_float+0x250>
 8007f9e:	ee18 3a10 	vmov	r3, s16
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af09 	beq.w	8007dc2 <_printf_float+0xc2>
 8007fb0:	f04f 0900 	mov.w	r9, #0
 8007fb4:	f104 0a1a 	add.w	sl, r4, #26
 8007fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fba:	425b      	negs	r3, r3
 8007fbc:	454b      	cmp	r3, r9
 8007fbe:	dc01      	bgt.n	8007fc4 <_printf_float+0x2c4>
 8007fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc2:	e792      	b.n	8007eea <_printf_float+0x1ea>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4652      	mov	r2, sl
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4628      	mov	r0, r5
 8007fcc:	47b8      	blx	r7
 8007fce:	3001      	adds	r0, #1
 8007fd0:	f43f aef7 	beq.w	8007dc2 <_printf_float+0xc2>
 8007fd4:	f109 0901 	add.w	r9, r9, #1
 8007fd8:	e7ee      	b.n	8007fb8 <_printf_float+0x2b8>
 8007fda:	bf00      	nop
 8007fdc:	7fefffff 	.word	0x7fefffff
 8007fe0:	0800a684 	.word	0x0800a684
 8007fe4:	0800a688 	.word	0x0800a688
 8007fe8:	0800a690 	.word	0x0800a690
 8007fec:	0800a68c 	.word	0x0800a68c
 8007ff0:	0800a694 	.word	0x0800a694
 8007ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	bfa8      	it	ge
 8007ffc:	461a      	movge	r2, r3
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	4691      	mov	r9, r2
 8008002:	dc37      	bgt.n	8008074 <_printf_float+0x374>
 8008004:	f04f 0b00 	mov.w	fp, #0
 8008008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800800c:	f104 021a 	add.w	r2, r4, #26
 8008010:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	eba3 0309 	sub.w	r3, r3, r9
 8008018:	455b      	cmp	r3, fp
 800801a:	dc33      	bgt.n	8008084 <_printf_float+0x384>
 800801c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008020:	429a      	cmp	r2, r3
 8008022:	db3b      	blt.n	800809c <_printf_float+0x39c>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	07da      	lsls	r2, r3, #31
 8008028:	d438      	bmi.n	800809c <_printf_float+0x39c>
 800802a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802c:	9a05      	ldr	r2, [sp, #20]
 800802e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008030:	1a9a      	subs	r2, r3, r2
 8008032:	eba3 0901 	sub.w	r9, r3, r1
 8008036:	4591      	cmp	r9, r2
 8008038:	bfa8      	it	ge
 800803a:	4691      	movge	r9, r2
 800803c:	f1b9 0f00 	cmp.w	r9, #0
 8008040:	dc35      	bgt.n	80080ae <_printf_float+0x3ae>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800804a:	f104 0a1a 	add.w	sl, r4, #26
 800804e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	eba3 0309 	sub.w	r3, r3, r9
 8008058:	4543      	cmp	r3, r8
 800805a:	f77f af79 	ble.w	8007f50 <_printf_float+0x250>
 800805e:	2301      	movs	r3, #1
 8008060:	4652      	mov	r2, sl
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	47b8      	blx	r7
 8008068:	3001      	adds	r0, #1
 800806a:	f43f aeaa 	beq.w	8007dc2 <_printf_float+0xc2>
 800806e:	f108 0801 	add.w	r8, r8, #1
 8008072:	e7ec      	b.n	800804e <_printf_float+0x34e>
 8008074:	4613      	mov	r3, r2
 8008076:	4631      	mov	r1, r6
 8008078:	4642      	mov	r2, r8
 800807a:	4628      	mov	r0, r5
 800807c:	47b8      	blx	r7
 800807e:	3001      	adds	r0, #1
 8008080:	d1c0      	bne.n	8008004 <_printf_float+0x304>
 8008082:	e69e      	b.n	8007dc2 <_printf_float+0xc2>
 8008084:	2301      	movs	r3, #1
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	9205      	str	r2, [sp, #20]
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	f43f ae97 	beq.w	8007dc2 <_printf_float+0xc2>
 8008094:	9a05      	ldr	r2, [sp, #20]
 8008096:	f10b 0b01 	add.w	fp, fp, #1
 800809a:	e7b9      	b.n	8008010 <_printf_float+0x310>
 800809c:	ee18 3a10 	vmov	r3, s16
 80080a0:	4652      	mov	r2, sl
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	d1be      	bne.n	800802a <_printf_float+0x32a>
 80080ac:	e689      	b.n	8007dc2 <_printf_float+0xc2>
 80080ae:	9a05      	ldr	r2, [sp, #20]
 80080b0:	464b      	mov	r3, r9
 80080b2:	4442      	add	r2, r8
 80080b4:	4631      	mov	r1, r6
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	d1c1      	bne.n	8008042 <_printf_float+0x342>
 80080be:	e680      	b.n	8007dc2 <_printf_float+0xc2>
 80080c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c2:	2a01      	cmp	r2, #1
 80080c4:	dc01      	bgt.n	80080ca <_printf_float+0x3ca>
 80080c6:	07db      	lsls	r3, r3, #31
 80080c8:	d538      	bpl.n	800813c <_printf_float+0x43c>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4642      	mov	r2, r8
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f ae74 	beq.w	8007dc2 <_printf_float+0xc2>
 80080da:	ee18 3a10 	vmov	r3, s16
 80080de:	4652      	mov	r2, sl
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f ae6b 	beq.w	8007dc2 <_printf_float+0xc2>
 80080ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080f0:	2200      	movs	r2, #0
 80080f2:	2300      	movs	r3, #0
 80080f4:	f7f8 fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80080f8:	b9d8      	cbnz	r0, 8008132 <_printf_float+0x432>
 80080fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fc:	f108 0201 	add.w	r2, r8, #1
 8008100:	3b01      	subs	r3, #1
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	d10e      	bne.n	800812a <_printf_float+0x42a>
 800810c:	e659      	b.n	8007dc2 <_printf_float+0xc2>
 800810e:	2301      	movs	r3, #1
 8008110:	4652      	mov	r2, sl
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	f43f ae52 	beq.w	8007dc2 <_printf_float+0xc2>
 800811e:	f108 0801 	add.w	r8, r8, #1
 8008122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008124:	3b01      	subs	r3, #1
 8008126:	4543      	cmp	r3, r8
 8008128:	dcf1      	bgt.n	800810e <_printf_float+0x40e>
 800812a:	464b      	mov	r3, r9
 800812c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008130:	e6dc      	b.n	8007eec <_printf_float+0x1ec>
 8008132:	f04f 0800 	mov.w	r8, #0
 8008136:	f104 0a1a 	add.w	sl, r4, #26
 800813a:	e7f2      	b.n	8008122 <_printf_float+0x422>
 800813c:	2301      	movs	r3, #1
 800813e:	4642      	mov	r2, r8
 8008140:	e7df      	b.n	8008102 <_printf_float+0x402>
 8008142:	2301      	movs	r3, #1
 8008144:	464a      	mov	r2, r9
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae38 	beq.w	8007dc2 <_printf_float+0xc2>
 8008152:	f108 0801 	add.w	r8, r8, #1
 8008156:	68e3      	ldr	r3, [r4, #12]
 8008158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800815a:	1a5b      	subs	r3, r3, r1
 800815c:	4543      	cmp	r3, r8
 800815e:	dcf0      	bgt.n	8008142 <_printf_float+0x442>
 8008160:	e6fa      	b.n	8007f58 <_printf_float+0x258>
 8008162:	f04f 0800 	mov.w	r8, #0
 8008166:	f104 0919 	add.w	r9, r4, #25
 800816a:	e7f4      	b.n	8008156 <_printf_float+0x456>

0800816c <_printf_common>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	4616      	mov	r6, r2
 8008172:	4699      	mov	r9, r3
 8008174:	688a      	ldr	r2, [r1, #8]
 8008176:	690b      	ldr	r3, [r1, #16]
 8008178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800817c:	4293      	cmp	r3, r2
 800817e:	bfb8      	it	lt
 8008180:	4613      	movlt	r3, r2
 8008182:	6033      	str	r3, [r6, #0]
 8008184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008188:	4607      	mov	r7, r0
 800818a:	460c      	mov	r4, r1
 800818c:	b10a      	cbz	r2, 8008192 <_printf_common+0x26>
 800818e:	3301      	adds	r3, #1
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	0699      	lsls	r1, r3, #26
 8008196:	bf42      	ittt	mi
 8008198:	6833      	ldrmi	r3, [r6, #0]
 800819a:	3302      	addmi	r3, #2
 800819c:	6033      	strmi	r3, [r6, #0]
 800819e:	6825      	ldr	r5, [r4, #0]
 80081a0:	f015 0506 	ands.w	r5, r5, #6
 80081a4:	d106      	bne.n	80081b4 <_printf_common+0x48>
 80081a6:	f104 0a19 	add.w	sl, r4, #25
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	6832      	ldr	r2, [r6, #0]
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dc26      	bgt.n	8008202 <_printf_common+0x96>
 80081b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081b8:	1e13      	subs	r3, r2, #0
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	bf18      	it	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	0692      	lsls	r2, r2, #26
 80081c2:	d42b      	bmi.n	800821c <_printf_common+0xb0>
 80081c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c8:	4649      	mov	r1, r9
 80081ca:	4638      	mov	r0, r7
 80081cc:	47c0      	blx	r8
 80081ce:	3001      	adds	r0, #1
 80081d0:	d01e      	beq.n	8008210 <_printf_common+0xa4>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	68e5      	ldr	r5, [r4, #12]
 80081d6:	6832      	ldr	r2, [r6, #0]
 80081d8:	f003 0306 	and.w	r3, r3, #6
 80081dc:	2b04      	cmp	r3, #4
 80081de:	bf08      	it	eq
 80081e0:	1aad      	subeq	r5, r5, r2
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	6922      	ldr	r2, [r4, #16]
 80081e6:	bf0c      	ite	eq
 80081e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081ec:	2500      	movne	r5, #0
 80081ee:	4293      	cmp	r3, r2
 80081f0:	bfc4      	itt	gt
 80081f2:	1a9b      	subgt	r3, r3, r2
 80081f4:	18ed      	addgt	r5, r5, r3
 80081f6:	2600      	movs	r6, #0
 80081f8:	341a      	adds	r4, #26
 80081fa:	42b5      	cmp	r5, r6
 80081fc:	d11a      	bne.n	8008234 <_printf_common+0xc8>
 80081fe:	2000      	movs	r0, #0
 8008200:	e008      	b.n	8008214 <_printf_common+0xa8>
 8008202:	2301      	movs	r3, #1
 8008204:	4652      	mov	r2, sl
 8008206:	4649      	mov	r1, r9
 8008208:	4638      	mov	r0, r7
 800820a:	47c0      	blx	r8
 800820c:	3001      	adds	r0, #1
 800820e:	d103      	bne.n	8008218 <_printf_common+0xac>
 8008210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008218:	3501      	adds	r5, #1
 800821a:	e7c6      	b.n	80081aa <_printf_common+0x3e>
 800821c:	18e1      	adds	r1, r4, r3
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	2030      	movs	r0, #48	; 0x30
 8008222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008226:	4422      	add	r2, r4
 8008228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800822c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008230:	3302      	adds	r3, #2
 8008232:	e7c7      	b.n	80081c4 <_printf_common+0x58>
 8008234:	2301      	movs	r3, #1
 8008236:	4622      	mov	r2, r4
 8008238:	4649      	mov	r1, r9
 800823a:	4638      	mov	r0, r7
 800823c:	47c0      	blx	r8
 800823e:	3001      	adds	r0, #1
 8008240:	d0e6      	beq.n	8008210 <_printf_common+0xa4>
 8008242:	3601      	adds	r6, #1
 8008244:	e7d9      	b.n	80081fa <_printf_common+0x8e>
	...

08008248 <_printf_i>:
 8008248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	7e0f      	ldrb	r7, [r1, #24]
 800824e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008250:	2f78      	cmp	r7, #120	; 0x78
 8008252:	4691      	mov	r9, r2
 8008254:	4680      	mov	r8, r0
 8008256:	460c      	mov	r4, r1
 8008258:	469a      	mov	sl, r3
 800825a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800825e:	d807      	bhi.n	8008270 <_printf_i+0x28>
 8008260:	2f62      	cmp	r7, #98	; 0x62
 8008262:	d80a      	bhi.n	800827a <_printf_i+0x32>
 8008264:	2f00      	cmp	r7, #0
 8008266:	f000 80d8 	beq.w	800841a <_printf_i+0x1d2>
 800826a:	2f58      	cmp	r7, #88	; 0x58
 800826c:	f000 80a3 	beq.w	80083b6 <_printf_i+0x16e>
 8008270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008278:	e03a      	b.n	80082f0 <_printf_i+0xa8>
 800827a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800827e:	2b15      	cmp	r3, #21
 8008280:	d8f6      	bhi.n	8008270 <_printf_i+0x28>
 8008282:	a101      	add	r1, pc, #4	; (adr r1, 8008288 <_printf_i+0x40>)
 8008284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008288:	080082e1 	.word	0x080082e1
 800828c:	080082f5 	.word	0x080082f5
 8008290:	08008271 	.word	0x08008271
 8008294:	08008271 	.word	0x08008271
 8008298:	08008271 	.word	0x08008271
 800829c:	08008271 	.word	0x08008271
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	08008271 	.word	0x08008271
 80082a8:	08008271 	.word	0x08008271
 80082ac:	08008271 	.word	0x08008271
 80082b0:	08008271 	.word	0x08008271
 80082b4:	08008401 	.word	0x08008401
 80082b8:	08008325 	.word	0x08008325
 80082bc:	080083e3 	.word	0x080083e3
 80082c0:	08008271 	.word	0x08008271
 80082c4:	08008271 	.word	0x08008271
 80082c8:	08008423 	.word	0x08008423
 80082cc:	08008271 	.word	0x08008271
 80082d0:	08008325 	.word	0x08008325
 80082d4:	08008271 	.word	0x08008271
 80082d8:	08008271 	.word	0x08008271
 80082dc:	080083eb 	.word	0x080083eb
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	1d1a      	adds	r2, r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0a3      	b.n	800843c <_printf_i+0x1f4>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	6829      	ldr	r1, [r5, #0]
 80082f8:	0606      	lsls	r6, r0, #24
 80082fa:	f101 0304 	add.w	r3, r1, #4
 80082fe:	d50a      	bpl.n	8008316 <_printf_i+0xce>
 8008300:	680e      	ldr	r6, [r1, #0]
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	2e00      	cmp	r6, #0
 8008306:	da03      	bge.n	8008310 <_printf_i+0xc8>
 8008308:	232d      	movs	r3, #45	; 0x2d
 800830a:	4276      	negs	r6, r6
 800830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008310:	485e      	ldr	r0, [pc, #376]	; (800848c <_printf_i+0x244>)
 8008312:	230a      	movs	r3, #10
 8008314:	e019      	b.n	800834a <_printf_i+0x102>
 8008316:	680e      	ldr	r6, [r1, #0]
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800831e:	bf18      	it	ne
 8008320:	b236      	sxthne	r6, r6
 8008322:	e7ef      	b.n	8008304 <_printf_i+0xbc>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	1d19      	adds	r1, r3, #4
 800832a:	6029      	str	r1, [r5, #0]
 800832c:	0601      	lsls	r1, r0, #24
 800832e:	d501      	bpl.n	8008334 <_printf_i+0xec>
 8008330:	681e      	ldr	r6, [r3, #0]
 8008332:	e002      	b.n	800833a <_printf_i+0xf2>
 8008334:	0646      	lsls	r6, r0, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0xe8>
 8008338:	881e      	ldrh	r6, [r3, #0]
 800833a:	4854      	ldr	r0, [pc, #336]	; (800848c <_printf_i+0x244>)
 800833c:	2f6f      	cmp	r7, #111	; 0x6f
 800833e:	bf0c      	ite	eq
 8008340:	2308      	moveq	r3, #8
 8008342:	230a      	movne	r3, #10
 8008344:	2100      	movs	r1, #0
 8008346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800834a:	6865      	ldr	r5, [r4, #4]
 800834c:	60a5      	str	r5, [r4, #8]
 800834e:	2d00      	cmp	r5, #0
 8008350:	bfa2      	ittt	ge
 8008352:	6821      	ldrge	r1, [r4, #0]
 8008354:	f021 0104 	bicge.w	r1, r1, #4
 8008358:	6021      	strge	r1, [r4, #0]
 800835a:	b90e      	cbnz	r6, 8008360 <_printf_i+0x118>
 800835c:	2d00      	cmp	r5, #0
 800835e:	d04d      	beq.n	80083fc <_printf_i+0x1b4>
 8008360:	4615      	mov	r5, r2
 8008362:	fbb6 f1f3 	udiv	r1, r6, r3
 8008366:	fb03 6711 	mls	r7, r3, r1, r6
 800836a:	5dc7      	ldrb	r7, [r0, r7]
 800836c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008370:	4637      	mov	r7, r6
 8008372:	42bb      	cmp	r3, r7
 8008374:	460e      	mov	r6, r1
 8008376:	d9f4      	bls.n	8008362 <_printf_i+0x11a>
 8008378:	2b08      	cmp	r3, #8
 800837a:	d10b      	bne.n	8008394 <_printf_i+0x14c>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	07de      	lsls	r6, r3, #31
 8008380:	d508      	bpl.n	8008394 <_printf_i+0x14c>
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	6861      	ldr	r1, [r4, #4]
 8008386:	4299      	cmp	r1, r3
 8008388:	bfde      	ittt	le
 800838a:	2330      	movle	r3, #48	; 0x30
 800838c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008390:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008394:	1b52      	subs	r2, r2, r5
 8008396:	6122      	str	r2, [r4, #16]
 8008398:	f8cd a000 	str.w	sl, [sp]
 800839c:	464b      	mov	r3, r9
 800839e:	aa03      	add	r2, sp, #12
 80083a0:	4621      	mov	r1, r4
 80083a2:	4640      	mov	r0, r8
 80083a4:	f7ff fee2 	bl	800816c <_printf_common>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d14c      	bne.n	8008446 <_printf_i+0x1fe>
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083b0:	b004      	add	sp, #16
 80083b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b6:	4835      	ldr	r0, [pc, #212]	; (800848c <_printf_i+0x244>)
 80083b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083bc:	6829      	ldr	r1, [r5, #0]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083c4:	6029      	str	r1, [r5, #0]
 80083c6:	061d      	lsls	r5, r3, #24
 80083c8:	d514      	bpl.n	80083f4 <_printf_i+0x1ac>
 80083ca:	07df      	lsls	r7, r3, #31
 80083cc:	bf44      	itt	mi
 80083ce:	f043 0320 	orrmi.w	r3, r3, #32
 80083d2:	6023      	strmi	r3, [r4, #0]
 80083d4:	b91e      	cbnz	r6, 80083de <_printf_i+0x196>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	f023 0320 	bic.w	r3, r3, #32
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	2310      	movs	r3, #16
 80083e0:	e7b0      	b.n	8008344 <_printf_i+0xfc>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	f043 0320 	orr.w	r3, r3, #32
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	2378      	movs	r3, #120	; 0x78
 80083ec:	4828      	ldr	r0, [pc, #160]	; (8008490 <_printf_i+0x248>)
 80083ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083f2:	e7e3      	b.n	80083bc <_printf_i+0x174>
 80083f4:	0659      	lsls	r1, r3, #25
 80083f6:	bf48      	it	mi
 80083f8:	b2b6      	uxthmi	r6, r6
 80083fa:	e7e6      	b.n	80083ca <_printf_i+0x182>
 80083fc:	4615      	mov	r5, r2
 80083fe:	e7bb      	b.n	8008378 <_printf_i+0x130>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	6826      	ldr	r6, [r4, #0]
 8008404:	6961      	ldr	r1, [r4, #20]
 8008406:	1d18      	adds	r0, r3, #4
 8008408:	6028      	str	r0, [r5, #0]
 800840a:	0635      	lsls	r5, r6, #24
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	d501      	bpl.n	8008414 <_printf_i+0x1cc>
 8008410:	6019      	str	r1, [r3, #0]
 8008412:	e002      	b.n	800841a <_printf_i+0x1d2>
 8008414:	0670      	lsls	r0, r6, #25
 8008416:	d5fb      	bpl.n	8008410 <_printf_i+0x1c8>
 8008418:	8019      	strh	r1, [r3, #0]
 800841a:	2300      	movs	r3, #0
 800841c:	6123      	str	r3, [r4, #16]
 800841e:	4615      	mov	r5, r2
 8008420:	e7ba      	b.n	8008398 <_printf_i+0x150>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	1d1a      	adds	r2, r3, #4
 8008426:	602a      	str	r2, [r5, #0]
 8008428:	681d      	ldr	r5, [r3, #0]
 800842a:	6862      	ldr	r2, [r4, #4]
 800842c:	2100      	movs	r1, #0
 800842e:	4628      	mov	r0, r5
 8008430:	f7f7 fede 	bl	80001f0 <memchr>
 8008434:	b108      	cbz	r0, 800843a <_printf_i+0x1f2>
 8008436:	1b40      	subs	r0, r0, r5
 8008438:	6060      	str	r0, [r4, #4]
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	2300      	movs	r3, #0
 8008440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008444:	e7a8      	b.n	8008398 <_printf_i+0x150>
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	462a      	mov	r2, r5
 800844a:	4649      	mov	r1, r9
 800844c:	4640      	mov	r0, r8
 800844e:	47d0      	blx	sl
 8008450:	3001      	adds	r0, #1
 8008452:	d0ab      	beq.n	80083ac <_printf_i+0x164>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	079b      	lsls	r3, r3, #30
 8008458:	d413      	bmi.n	8008482 <_printf_i+0x23a>
 800845a:	68e0      	ldr	r0, [r4, #12]
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	4298      	cmp	r0, r3
 8008460:	bfb8      	it	lt
 8008462:	4618      	movlt	r0, r3
 8008464:	e7a4      	b.n	80083b0 <_printf_i+0x168>
 8008466:	2301      	movs	r3, #1
 8008468:	4632      	mov	r2, r6
 800846a:	4649      	mov	r1, r9
 800846c:	4640      	mov	r0, r8
 800846e:	47d0      	blx	sl
 8008470:	3001      	adds	r0, #1
 8008472:	d09b      	beq.n	80083ac <_printf_i+0x164>
 8008474:	3501      	adds	r5, #1
 8008476:	68e3      	ldr	r3, [r4, #12]
 8008478:	9903      	ldr	r1, [sp, #12]
 800847a:	1a5b      	subs	r3, r3, r1
 800847c:	42ab      	cmp	r3, r5
 800847e:	dcf2      	bgt.n	8008466 <_printf_i+0x21e>
 8008480:	e7eb      	b.n	800845a <_printf_i+0x212>
 8008482:	2500      	movs	r5, #0
 8008484:	f104 0619 	add.w	r6, r4, #25
 8008488:	e7f5      	b.n	8008476 <_printf_i+0x22e>
 800848a:	bf00      	nop
 800848c:	0800a696 	.word	0x0800a696
 8008490:	0800a6a7 	.word	0x0800a6a7

08008494 <quorem>:
 8008494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	6903      	ldr	r3, [r0, #16]
 800849a:	690c      	ldr	r4, [r1, #16]
 800849c:	42a3      	cmp	r3, r4
 800849e:	4607      	mov	r7, r0
 80084a0:	f2c0 8081 	blt.w	80085a6 <quorem+0x112>
 80084a4:	3c01      	subs	r4, #1
 80084a6:	f101 0814 	add.w	r8, r1, #20
 80084aa:	f100 0514 	add.w	r5, r0, #20
 80084ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084bc:	3301      	adds	r3, #1
 80084be:	429a      	cmp	r2, r3
 80084c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80084cc:	d331      	bcc.n	8008532 <quorem+0x9e>
 80084ce:	f04f 0e00 	mov.w	lr, #0
 80084d2:	4640      	mov	r0, r8
 80084d4:	46ac      	mov	ip, r5
 80084d6:	46f2      	mov	sl, lr
 80084d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80084dc:	b293      	uxth	r3, r2
 80084de:	fb06 e303 	mla	r3, r6, r3, lr
 80084e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	ebaa 0303 	sub.w	r3, sl, r3
 80084ec:	f8dc a000 	ldr.w	sl, [ip]
 80084f0:	0c12      	lsrs	r2, r2, #16
 80084f2:	fa13 f38a 	uxtah	r3, r3, sl
 80084f6:	fb06 e202 	mla	r2, r6, r2, lr
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9b00      	ldr	r3, [sp, #0]
 80084fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008502:	b292      	uxth	r2, r2
 8008504:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800850c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008510:	4581      	cmp	r9, r0
 8008512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008516:	f84c 3b04 	str.w	r3, [ip], #4
 800851a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800851e:	d2db      	bcs.n	80084d8 <quorem+0x44>
 8008520:	f855 300b 	ldr.w	r3, [r5, fp]
 8008524:	b92b      	cbnz	r3, 8008532 <quorem+0x9e>
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	3b04      	subs	r3, #4
 800852a:	429d      	cmp	r5, r3
 800852c:	461a      	mov	r2, r3
 800852e:	d32e      	bcc.n	800858e <quorem+0xfa>
 8008530:	613c      	str	r4, [r7, #16]
 8008532:	4638      	mov	r0, r7
 8008534:	f001 f8c6 	bl	80096c4 <__mcmp>
 8008538:	2800      	cmp	r0, #0
 800853a:	db24      	blt.n	8008586 <quorem+0xf2>
 800853c:	3601      	adds	r6, #1
 800853e:	4628      	mov	r0, r5
 8008540:	f04f 0c00 	mov.w	ip, #0
 8008544:	f858 2b04 	ldr.w	r2, [r8], #4
 8008548:	f8d0 e000 	ldr.w	lr, [r0]
 800854c:	b293      	uxth	r3, r2
 800854e:	ebac 0303 	sub.w	r3, ip, r3
 8008552:	0c12      	lsrs	r2, r2, #16
 8008554:	fa13 f38e 	uxtah	r3, r3, lr
 8008558:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800855c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008560:	b29b      	uxth	r3, r3
 8008562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008566:	45c1      	cmp	r9, r8
 8008568:	f840 3b04 	str.w	r3, [r0], #4
 800856c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008570:	d2e8      	bcs.n	8008544 <quorem+0xb0>
 8008572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800857a:	b922      	cbnz	r2, 8008586 <quorem+0xf2>
 800857c:	3b04      	subs	r3, #4
 800857e:	429d      	cmp	r5, r3
 8008580:	461a      	mov	r2, r3
 8008582:	d30a      	bcc.n	800859a <quorem+0x106>
 8008584:	613c      	str	r4, [r7, #16]
 8008586:	4630      	mov	r0, r6
 8008588:	b003      	add	sp, #12
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	3b04      	subs	r3, #4
 8008592:	2a00      	cmp	r2, #0
 8008594:	d1cc      	bne.n	8008530 <quorem+0x9c>
 8008596:	3c01      	subs	r4, #1
 8008598:	e7c7      	b.n	800852a <quorem+0x96>
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	3b04      	subs	r3, #4
 800859e:	2a00      	cmp	r2, #0
 80085a0:	d1f0      	bne.n	8008584 <quorem+0xf0>
 80085a2:	3c01      	subs	r4, #1
 80085a4:	e7eb      	b.n	800857e <quorem+0xea>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e7ee      	b.n	8008588 <quorem+0xf4>
 80085aa:	0000      	movs	r0, r0
 80085ac:	0000      	movs	r0, r0
	...

080085b0 <_dtoa_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	ed2d 8b04 	vpush	{d8-d9}
 80085b8:	ec57 6b10 	vmov	r6, r7, d0
 80085bc:	b093      	sub	sp, #76	; 0x4c
 80085be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085c4:	9106      	str	r1, [sp, #24]
 80085c6:	ee10 aa10 	vmov	sl, s0
 80085ca:	4604      	mov	r4, r0
 80085cc:	9209      	str	r2, [sp, #36]	; 0x24
 80085ce:	930c      	str	r3, [sp, #48]	; 0x30
 80085d0:	46bb      	mov	fp, r7
 80085d2:	b975      	cbnz	r5, 80085f2 <_dtoa_r+0x42>
 80085d4:	2010      	movs	r0, #16
 80085d6:	f000 fddd 	bl	8009194 <malloc>
 80085da:	4602      	mov	r2, r0
 80085dc:	6260      	str	r0, [r4, #36]	; 0x24
 80085de:	b920      	cbnz	r0, 80085ea <_dtoa_r+0x3a>
 80085e0:	4ba7      	ldr	r3, [pc, #668]	; (8008880 <_dtoa_r+0x2d0>)
 80085e2:	21ea      	movs	r1, #234	; 0xea
 80085e4:	48a7      	ldr	r0, [pc, #668]	; (8008884 <_dtoa_r+0x2d4>)
 80085e6:	f001 fa75 	bl	8009ad4 <__assert_func>
 80085ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085ee:	6005      	str	r5, [r0, #0]
 80085f0:	60c5      	str	r5, [r0, #12]
 80085f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f4:	6819      	ldr	r1, [r3, #0]
 80085f6:	b151      	cbz	r1, 800860e <_dtoa_r+0x5e>
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	604a      	str	r2, [r1, #4]
 80085fc:	2301      	movs	r3, #1
 80085fe:	4093      	lsls	r3, r2
 8008600:	608b      	str	r3, [r1, #8]
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fe1c 	bl	8009240 <_Bfree>
 8008608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	1e3b      	subs	r3, r7, #0
 8008610:	bfaa      	itet	ge
 8008612:	2300      	movge	r3, #0
 8008614:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008618:	f8c8 3000 	strge.w	r3, [r8]
 800861c:	4b9a      	ldr	r3, [pc, #616]	; (8008888 <_dtoa_r+0x2d8>)
 800861e:	bfbc      	itt	lt
 8008620:	2201      	movlt	r2, #1
 8008622:	f8c8 2000 	strlt.w	r2, [r8]
 8008626:	ea33 030b 	bics.w	r3, r3, fp
 800862a:	d11b      	bne.n	8008664 <_dtoa_r+0xb4>
 800862c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008638:	4333      	orrs	r3, r6
 800863a:	f000 8592 	beq.w	8009162 <_dtoa_r+0xbb2>
 800863e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008640:	b963      	cbnz	r3, 800865c <_dtoa_r+0xac>
 8008642:	4b92      	ldr	r3, [pc, #584]	; (800888c <_dtoa_r+0x2dc>)
 8008644:	e022      	b.n	800868c <_dtoa_r+0xdc>
 8008646:	4b92      	ldr	r3, [pc, #584]	; (8008890 <_dtoa_r+0x2e0>)
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	3308      	adds	r3, #8
 800864c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	b013      	add	sp, #76	; 0x4c
 8008654:	ecbd 8b04 	vpop	{d8-d9}
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	4b8b      	ldr	r3, [pc, #556]	; (800888c <_dtoa_r+0x2dc>)
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	3303      	adds	r3, #3
 8008662:	e7f3      	b.n	800864c <_dtoa_r+0x9c>
 8008664:	2200      	movs	r2, #0
 8008666:	2300      	movs	r3, #0
 8008668:	4650      	mov	r0, sl
 800866a:	4659      	mov	r1, fp
 800866c:	f7f8 fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8008670:	ec4b ab19 	vmov	d9, sl, fp
 8008674:	4680      	mov	r8, r0
 8008676:	b158      	cbz	r0, 8008690 <_dtoa_r+0xe0>
 8008678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800867a:	2301      	movs	r3, #1
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 856b 	beq.w	800915c <_dtoa_r+0xbac>
 8008686:	4883      	ldr	r0, [pc, #524]	; (8008894 <_dtoa_r+0x2e4>)
 8008688:	6018      	str	r0, [r3, #0]
 800868a:	1e43      	subs	r3, r0, #1
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	e7df      	b.n	8008650 <_dtoa_r+0xa0>
 8008690:	ec4b ab10 	vmov	d0, sl, fp
 8008694:	aa10      	add	r2, sp, #64	; 0x40
 8008696:	a911      	add	r1, sp, #68	; 0x44
 8008698:	4620      	mov	r0, r4
 800869a:	f001 f8b9 	bl	8009810 <__d2b>
 800869e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80086a2:	ee08 0a10 	vmov	s16, r0
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	f000 8084 	beq.w	80087b4 <_dtoa_r+0x204>
 80086ac:	ee19 3a90 	vmov	r3, s19
 80086b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80086b8:	4656      	mov	r6, sl
 80086ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80086be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80086c6:	4b74      	ldr	r3, [pc, #464]	; (8008898 <_dtoa_r+0x2e8>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	4630      	mov	r0, r6
 80086cc:	4639      	mov	r1, r7
 80086ce:	f7f7 fde3 	bl	8000298 <__aeabi_dsub>
 80086d2:	a365      	add	r3, pc, #404	; (adr r3, 8008868 <_dtoa_r+0x2b8>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f7 ff96 	bl	8000608 <__aeabi_dmul>
 80086dc:	a364      	add	r3, pc, #400	; (adr r3, 8008870 <_dtoa_r+0x2c0>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 fddb 	bl	800029c <__adddf3>
 80086e6:	4606      	mov	r6, r0
 80086e8:	4628      	mov	r0, r5
 80086ea:	460f      	mov	r7, r1
 80086ec:	f7f7 ff22 	bl	8000534 <__aeabi_i2d>
 80086f0:	a361      	add	r3, pc, #388	; (adr r3, 8008878 <_dtoa_r+0x2c8>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 ff87 	bl	8000608 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4630      	mov	r0, r6
 8008700:	4639      	mov	r1, r7
 8008702:	f7f7 fdcb 	bl	800029c <__adddf3>
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	f7f8 fa2d 	bl	8000b68 <__aeabi_d2iz>
 800870e:	2200      	movs	r2, #0
 8008710:	9000      	str	r0, [sp, #0]
 8008712:	2300      	movs	r3, #0
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800871c:	b150      	cbz	r0, 8008734 <_dtoa_r+0x184>
 800871e:	9800      	ldr	r0, [sp, #0]
 8008720:	f7f7 ff08 	bl	8000534 <__aeabi_i2d>
 8008724:	4632      	mov	r2, r6
 8008726:	463b      	mov	r3, r7
 8008728:	f7f8 f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800872c:	b910      	cbnz	r0, 8008734 <_dtoa_r+0x184>
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	3b01      	subs	r3, #1
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	9b00      	ldr	r3, [sp, #0]
 8008736:	2b16      	cmp	r3, #22
 8008738:	d85a      	bhi.n	80087f0 <_dtoa_r+0x240>
 800873a:	9a00      	ldr	r2, [sp, #0]
 800873c:	4b57      	ldr	r3, [pc, #348]	; (800889c <_dtoa_r+0x2ec>)
 800873e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	ec51 0b19 	vmov	r0, r1, d9
 800874a:	f7f8 f9cf 	bl	8000aec <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	d050      	beq.n	80087f4 <_dtoa_r+0x244>
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	930b      	str	r3, [sp, #44]	; 0x2c
 800875c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800875e:	1b5d      	subs	r5, r3, r5
 8008760:	1e6b      	subs	r3, r5, #1
 8008762:	9305      	str	r3, [sp, #20]
 8008764:	bf45      	ittet	mi
 8008766:	f1c5 0301 	rsbmi	r3, r5, #1
 800876a:	9304      	strmi	r3, [sp, #16]
 800876c:	2300      	movpl	r3, #0
 800876e:	2300      	movmi	r3, #0
 8008770:	bf4c      	ite	mi
 8008772:	9305      	strmi	r3, [sp, #20]
 8008774:	9304      	strpl	r3, [sp, #16]
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	db3d      	blt.n	80087f8 <_dtoa_r+0x248>
 800877c:	9b05      	ldr	r3, [sp, #20]
 800877e:	9a00      	ldr	r2, [sp, #0]
 8008780:	920a      	str	r2, [sp, #40]	; 0x28
 8008782:	4413      	add	r3, r2
 8008784:	9305      	str	r3, [sp, #20]
 8008786:	2300      	movs	r3, #0
 8008788:	9307      	str	r3, [sp, #28]
 800878a:	9b06      	ldr	r3, [sp, #24]
 800878c:	2b09      	cmp	r3, #9
 800878e:	f200 8089 	bhi.w	80088a4 <_dtoa_r+0x2f4>
 8008792:	2b05      	cmp	r3, #5
 8008794:	bfc4      	itt	gt
 8008796:	3b04      	subgt	r3, #4
 8008798:	9306      	strgt	r3, [sp, #24]
 800879a:	9b06      	ldr	r3, [sp, #24]
 800879c:	f1a3 0302 	sub.w	r3, r3, #2
 80087a0:	bfcc      	ite	gt
 80087a2:	2500      	movgt	r5, #0
 80087a4:	2501      	movle	r5, #1
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	f200 8087 	bhi.w	80088ba <_dtoa_r+0x30a>
 80087ac:	e8df f003 	tbb	[pc, r3]
 80087b0:	59383a2d 	.word	0x59383a2d
 80087b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087b8:	441d      	add	r5, r3
 80087ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087be:	2b20      	cmp	r3, #32
 80087c0:	bfc1      	itttt	gt
 80087c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80087ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80087ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80087d2:	bfda      	itte	le
 80087d4:	f1c3 0320 	rsble	r3, r3, #32
 80087d8:	fa06 f003 	lslle.w	r0, r6, r3
 80087dc:	4318      	orrgt	r0, r3
 80087de:	f7f7 fe99 	bl	8000514 <__aeabi_ui2d>
 80087e2:	2301      	movs	r3, #1
 80087e4:	4606      	mov	r6, r0
 80087e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80087ea:	3d01      	subs	r5, #1
 80087ec:	930e      	str	r3, [sp, #56]	; 0x38
 80087ee:	e76a      	b.n	80086c6 <_dtoa_r+0x116>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e7b2      	b.n	800875a <_dtoa_r+0x1aa>
 80087f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80087f6:	e7b1      	b.n	800875c <_dtoa_r+0x1ac>
 80087f8:	9b04      	ldr	r3, [sp, #16]
 80087fa:	9a00      	ldr	r2, [sp, #0]
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	9304      	str	r3, [sp, #16]
 8008800:	4253      	negs	r3, r2
 8008802:	9307      	str	r3, [sp, #28]
 8008804:	2300      	movs	r3, #0
 8008806:	930a      	str	r3, [sp, #40]	; 0x28
 8008808:	e7bf      	b.n	800878a <_dtoa_r+0x1da>
 800880a:	2300      	movs	r3, #0
 800880c:	9308      	str	r3, [sp, #32]
 800880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc55      	bgt.n	80088c0 <_dtoa_r+0x310>
 8008814:	2301      	movs	r3, #1
 8008816:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800881a:	461a      	mov	r2, r3
 800881c:	9209      	str	r2, [sp, #36]	; 0x24
 800881e:	e00c      	b.n	800883a <_dtoa_r+0x28a>
 8008820:	2301      	movs	r3, #1
 8008822:	e7f3      	b.n	800880c <_dtoa_r+0x25c>
 8008824:	2300      	movs	r3, #0
 8008826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008828:	9308      	str	r3, [sp, #32]
 800882a:	9b00      	ldr	r3, [sp, #0]
 800882c:	4413      	add	r3, r2
 800882e:	9302      	str	r3, [sp, #8]
 8008830:	3301      	adds	r3, #1
 8008832:	2b01      	cmp	r3, #1
 8008834:	9303      	str	r3, [sp, #12]
 8008836:	bfb8      	it	lt
 8008838:	2301      	movlt	r3, #1
 800883a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800883c:	2200      	movs	r2, #0
 800883e:	6042      	str	r2, [r0, #4]
 8008840:	2204      	movs	r2, #4
 8008842:	f102 0614 	add.w	r6, r2, #20
 8008846:	429e      	cmp	r6, r3
 8008848:	6841      	ldr	r1, [r0, #4]
 800884a:	d93d      	bls.n	80088c8 <_dtoa_r+0x318>
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fcb7 	bl	80091c0 <_Balloc>
 8008852:	9001      	str	r0, [sp, #4]
 8008854:	2800      	cmp	r0, #0
 8008856:	d13b      	bne.n	80088d0 <_dtoa_r+0x320>
 8008858:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <_dtoa_r+0x2f0>)
 800885a:	4602      	mov	r2, r0
 800885c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008860:	e6c0      	b.n	80085e4 <_dtoa_r+0x34>
 8008862:	2301      	movs	r3, #1
 8008864:	e7df      	b.n	8008826 <_dtoa_r+0x276>
 8008866:	bf00      	nop
 8008868:	636f4361 	.word	0x636f4361
 800886c:	3fd287a7 	.word	0x3fd287a7
 8008870:	8b60c8b3 	.word	0x8b60c8b3
 8008874:	3fc68a28 	.word	0x3fc68a28
 8008878:	509f79fb 	.word	0x509f79fb
 800887c:	3fd34413 	.word	0x3fd34413
 8008880:	0800a6c5 	.word	0x0800a6c5
 8008884:	0800a6dc 	.word	0x0800a6dc
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	0800a6c1 	.word	0x0800a6c1
 8008890:	0800a6b8 	.word	0x0800a6b8
 8008894:	0800a695 	.word	0x0800a695
 8008898:	3ff80000 	.word	0x3ff80000
 800889c:	0800a7d0 	.word	0x0800a7d0
 80088a0:	0800a737 	.word	0x0800a737
 80088a4:	2501      	movs	r5, #1
 80088a6:	2300      	movs	r3, #0
 80088a8:	9306      	str	r3, [sp, #24]
 80088aa:	9508      	str	r5, [sp, #32]
 80088ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	2312      	movs	r3, #18
 80088b8:	e7b0      	b.n	800881c <_dtoa_r+0x26c>
 80088ba:	2301      	movs	r3, #1
 80088bc:	9308      	str	r3, [sp, #32]
 80088be:	e7f5      	b.n	80088ac <_dtoa_r+0x2fc>
 80088c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088c6:	e7b8      	b.n	800883a <_dtoa_r+0x28a>
 80088c8:	3101      	adds	r1, #1
 80088ca:	6041      	str	r1, [r0, #4]
 80088cc:	0052      	lsls	r2, r2, #1
 80088ce:	e7b8      	b.n	8008842 <_dtoa_r+0x292>
 80088d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d2:	9a01      	ldr	r2, [sp, #4]
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	9b03      	ldr	r3, [sp, #12]
 80088d8:	2b0e      	cmp	r3, #14
 80088da:	f200 809d 	bhi.w	8008a18 <_dtoa_r+0x468>
 80088de:	2d00      	cmp	r5, #0
 80088e0:	f000 809a 	beq.w	8008a18 <_dtoa_r+0x468>
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dd32      	ble.n	8008950 <_dtoa_r+0x3a0>
 80088ea:	4ab7      	ldr	r2, [pc, #732]	; (8008bc8 <_dtoa_r+0x618>)
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	05d8      	lsls	r0, r3, #23
 80088fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008900:	d516      	bpl.n	8008930 <_dtoa_r+0x380>
 8008902:	4bb2      	ldr	r3, [pc, #712]	; (8008bcc <_dtoa_r+0x61c>)
 8008904:	ec51 0b19 	vmov	r0, r1, d9
 8008908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800890c:	f7f7 ffa6 	bl	800085c <__aeabi_ddiv>
 8008910:	f007 070f 	and.w	r7, r7, #15
 8008914:	4682      	mov	sl, r0
 8008916:	468b      	mov	fp, r1
 8008918:	2503      	movs	r5, #3
 800891a:	4eac      	ldr	r6, [pc, #688]	; (8008bcc <_dtoa_r+0x61c>)
 800891c:	b957      	cbnz	r7, 8008934 <_dtoa_r+0x384>
 800891e:	4642      	mov	r2, r8
 8008920:	464b      	mov	r3, r9
 8008922:	4650      	mov	r0, sl
 8008924:	4659      	mov	r1, fp
 8008926:	f7f7 ff99 	bl	800085c <__aeabi_ddiv>
 800892a:	4682      	mov	sl, r0
 800892c:	468b      	mov	fp, r1
 800892e:	e028      	b.n	8008982 <_dtoa_r+0x3d2>
 8008930:	2502      	movs	r5, #2
 8008932:	e7f2      	b.n	800891a <_dtoa_r+0x36a>
 8008934:	07f9      	lsls	r1, r7, #31
 8008936:	d508      	bpl.n	800894a <_dtoa_r+0x39a>
 8008938:	4640      	mov	r0, r8
 800893a:	4649      	mov	r1, r9
 800893c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008940:	f7f7 fe62 	bl	8000608 <__aeabi_dmul>
 8008944:	3501      	adds	r5, #1
 8008946:	4680      	mov	r8, r0
 8008948:	4689      	mov	r9, r1
 800894a:	107f      	asrs	r7, r7, #1
 800894c:	3608      	adds	r6, #8
 800894e:	e7e5      	b.n	800891c <_dtoa_r+0x36c>
 8008950:	f000 809b 	beq.w	8008a8a <_dtoa_r+0x4da>
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	4f9d      	ldr	r7, [pc, #628]	; (8008bcc <_dtoa_r+0x61c>)
 8008958:	425e      	negs	r6, r3
 800895a:	4b9b      	ldr	r3, [pc, #620]	; (8008bc8 <_dtoa_r+0x618>)
 800895c:	f006 020f 	and.w	r2, r6, #15
 8008960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	ec51 0b19 	vmov	r0, r1, d9
 800896c:	f7f7 fe4c 	bl	8000608 <__aeabi_dmul>
 8008970:	1136      	asrs	r6, r6, #4
 8008972:	4682      	mov	sl, r0
 8008974:	468b      	mov	fp, r1
 8008976:	2300      	movs	r3, #0
 8008978:	2502      	movs	r5, #2
 800897a:	2e00      	cmp	r6, #0
 800897c:	d17a      	bne.n	8008a74 <_dtoa_r+0x4c4>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1d3      	bne.n	800892a <_dtoa_r+0x37a>
 8008982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8082 	beq.w	8008a8e <_dtoa_r+0x4de>
 800898a:	4b91      	ldr	r3, [pc, #580]	; (8008bd0 <_dtoa_r+0x620>)
 800898c:	2200      	movs	r2, #0
 800898e:	4650      	mov	r0, sl
 8008990:	4659      	mov	r1, fp
 8008992:	f7f8 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	d079      	beq.n	8008a8e <_dtoa_r+0x4de>
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d076      	beq.n	8008a8e <_dtoa_r+0x4de>
 80089a0:	9b02      	ldr	r3, [sp, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dd36      	ble.n	8008a14 <_dtoa_r+0x464>
 80089a6:	9b00      	ldr	r3, [sp, #0]
 80089a8:	4650      	mov	r0, sl
 80089aa:	4659      	mov	r1, fp
 80089ac:	1e5f      	subs	r7, r3, #1
 80089ae:	2200      	movs	r2, #0
 80089b0:	4b88      	ldr	r3, [pc, #544]	; (8008bd4 <_dtoa_r+0x624>)
 80089b2:	f7f7 fe29 	bl	8000608 <__aeabi_dmul>
 80089b6:	9e02      	ldr	r6, [sp, #8]
 80089b8:	4682      	mov	sl, r0
 80089ba:	468b      	mov	fp, r1
 80089bc:	3501      	adds	r5, #1
 80089be:	4628      	mov	r0, r5
 80089c0:	f7f7 fdb8 	bl	8000534 <__aeabi_i2d>
 80089c4:	4652      	mov	r2, sl
 80089c6:	465b      	mov	r3, fp
 80089c8:	f7f7 fe1e 	bl	8000608 <__aeabi_dmul>
 80089cc:	4b82      	ldr	r3, [pc, #520]	; (8008bd8 <_dtoa_r+0x628>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	f7f7 fc64 	bl	800029c <__adddf3>
 80089d4:	46d0      	mov	r8, sl
 80089d6:	46d9      	mov	r9, fp
 80089d8:	4682      	mov	sl, r0
 80089da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80089de:	2e00      	cmp	r6, #0
 80089e0:	d158      	bne.n	8008a94 <_dtoa_r+0x4e4>
 80089e2:	4b7e      	ldr	r3, [pc, #504]	; (8008bdc <_dtoa_r+0x62c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	4640      	mov	r0, r8
 80089e8:	4649      	mov	r1, r9
 80089ea:	f7f7 fc55 	bl	8000298 <__aeabi_dsub>
 80089ee:	4652      	mov	r2, sl
 80089f0:	465b      	mov	r3, fp
 80089f2:	4680      	mov	r8, r0
 80089f4:	4689      	mov	r9, r1
 80089f6:	f7f8 f897 	bl	8000b28 <__aeabi_dcmpgt>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f040 8295 	bne.w	8008f2a <_dtoa_r+0x97a>
 8008a00:	4652      	mov	r2, sl
 8008a02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f8 f86f 	bl	8000aec <__aeabi_dcmplt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f040 8289 	bne.w	8008f26 <_dtoa_r+0x976>
 8008a14:	ec5b ab19 	vmov	sl, fp, d9
 8008a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f2c0 8148 	blt.w	8008cb0 <_dtoa_r+0x700>
 8008a20:	9a00      	ldr	r2, [sp, #0]
 8008a22:	2a0e      	cmp	r2, #14
 8008a24:	f300 8144 	bgt.w	8008cb0 <_dtoa_r+0x700>
 8008a28:	4b67      	ldr	r3, [pc, #412]	; (8008bc8 <_dtoa_r+0x618>)
 8008a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f280 80d5 	bge.w	8008be4 <_dtoa_r+0x634>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f300 80d1 	bgt.w	8008be4 <_dtoa_r+0x634>
 8008a42:	f040 826f 	bne.w	8008f24 <_dtoa_r+0x974>
 8008a46:	4b65      	ldr	r3, [pc, #404]	; (8008bdc <_dtoa_r+0x62c>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	f7f7 fddb 	bl	8000608 <__aeabi_dmul>
 8008a52:	4652      	mov	r2, sl
 8008a54:	465b      	mov	r3, fp
 8008a56:	f7f8 f85d 	bl	8000b14 <__aeabi_dcmpge>
 8008a5a:	9e03      	ldr	r6, [sp, #12]
 8008a5c:	4637      	mov	r7, r6
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f040 8245 	bne.w	8008eee <_dtoa_r+0x93e>
 8008a64:	9d01      	ldr	r5, [sp, #4]
 8008a66:	2331      	movs	r3, #49	; 0x31
 8008a68:	f805 3b01 	strb.w	r3, [r5], #1
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	e240      	b.n	8008ef6 <_dtoa_r+0x946>
 8008a74:	07f2      	lsls	r2, r6, #31
 8008a76:	d505      	bpl.n	8008a84 <_dtoa_r+0x4d4>
 8008a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7c:	f7f7 fdc4 	bl	8000608 <__aeabi_dmul>
 8008a80:	3501      	adds	r5, #1
 8008a82:	2301      	movs	r3, #1
 8008a84:	1076      	asrs	r6, r6, #1
 8008a86:	3708      	adds	r7, #8
 8008a88:	e777      	b.n	800897a <_dtoa_r+0x3ca>
 8008a8a:	2502      	movs	r5, #2
 8008a8c:	e779      	b.n	8008982 <_dtoa_r+0x3d2>
 8008a8e:	9f00      	ldr	r7, [sp, #0]
 8008a90:	9e03      	ldr	r6, [sp, #12]
 8008a92:	e794      	b.n	80089be <_dtoa_r+0x40e>
 8008a94:	9901      	ldr	r1, [sp, #4]
 8008a96:	4b4c      	ldr	r3, [pc, #304]	; (8008bc8 <_dtoa_r+0x618>)
 8008a98:	4431      	add	r1, r6
 8008a9a:	910d      	str	r1, [sp, #52]	; 0x34
 8008a9c:	9908      	ldr	r1, [sp, #32]
 8008a9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d043      	beq.n	8008b32 <_dtoa_r+0x582>
 8008aaa:	494d      	ldr	r1, [pc, #308]	; (8008be0 <_dtoa_r+0x630>)
 8008aac:	2000      	movs	r0, #0
 8008aae:	f7f7 fed5 	bl	800085c <__aeabi_ddiv>
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	f7f7 fbef 	bl	8000298 <__aeabi_dsub>
 8008aba:	9d01      	ldr	r5, [sp, #4]
 8008abc:	4682      	mov	sl, r0
 8008abe:	468b      	mov	fp, r1
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7f8 f850 	bl	8000b68 <__aeabi_d2iz>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	f7f7 fd33 	bl	8000534 <__aeabi_i2d>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f7f7 fbdf 	bl	8000298 <__aeabi_dsub>
 8008ada:	3630      	adds	r6, #48	; 0x30
 8008adc:	f805 6b01 	strb.w	r6, [r5], #1
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4689      	mov	r9, r1
 8008ae8:	f7f8 f800 	bl	8000aec <__aeabi_dcmplt>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d163      	bne.n	8008bb8 <_dtoa_r+0x608>
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	4936      	ldr	r1, [pc, #216]	; (8008bd0 <_dtoa_r+0x620>)
 8008af6:	2000      	movs	r0, #0
 8008af8:	f7f7 fbce 	bl	8000298 <__aeabi_dsub>
 8008afc:	4652      	mov	r2, sl
 8008afe:	465b      	mov	r3, fp
 8008b00:	f7f7 fff4 	bl	8000aec <__aeabi_dcmplt>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f040 80b5 	bne.w	8008c74 <_dtoa_r+0x6c4>
 8008b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	d081      	beq.n	8008a14 <_dtoa_r+0x464>
 8008b10:	4b30      	ldr	r3, [pc, #192]	; (8008bd4 <_dtoa_r+0x624>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 fd76 	bl	8000608 <__aeabi_dmul>
 8008b1c:	4b2d      	ldr	r3, [pc, #180]	; (8008bd4 <_dtoa_r+0x624>)
 8008b1e:	4682      	mov	sl, r0
 8008b20:	468b      	mov	fp, r1
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	2200      	movs	r2, #0
 8008b28:	f7f7 fd6e 	bl	8000608 <__aeabi_dmul>
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	e7c6      	b.n	8008ac0 <_dtoa_r+0x510>
 8008b32:	4650      	mov	r0, sl
 8008b34:	4659      	mov	r1, fp
 8008b36:	f7f7 fd67 	bl	8000608 <__aeabi_dmul>
 8008b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b3c:	9d01      	ldr	r5, [sp, #4]
 8008b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b40:	4682      	mov	sl, r0
 8008b42:	468b      	mov	fp, r1
 8008b44:	4649      	mov	r1, r9
 8008b46:	4640      	mov	r0, r8
 8008b48:	f7f8 f80e 	bl	8000b68 <__aeabi_d2iz>
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	f7f7 fcf1 	bl	8000534 <__aeabi_i2d>
 8008b52:	3630      	adds	r6, #48	; 0x30
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fb9c 	bl	8000298 <__aeabi_dsub>
 8008b60:	f805 6b01 	strb.w	r6, [r5], #1
 8008b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b66:	429d      	cmp	r5, r3
 8008b68:	4680      	mov	r8, r0
 8008b6a:	4689      	mov	r9, r1
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	d124      	bne.n	8008bbc <_dtoa_r+0x60c>
 8008b72:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <_dtoa_r+0x630>)
 8008b74:	4650      	mov	r0, sl
 8008b76:	4659      	mov	r1, fp
 8008b78:	f7f7 fb90 	bl	800029c <__adddf3>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4640      	mov	r0, r8
 8008b82:	4649      	mov	r1, r9
 8008b84:	f7f7 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d173      	bne.n	8008c74 <_dtoa_r+0x6c4>
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	465b      	mov	r3, fp
 8008b90:	4913      	ldr	r1, [pc, #76]	; (8008be0 <_dtoa_r+0x630>)
 8008b92:	2000      	movs	r0, #0
 8008b94:	f7f7 fb80 	bl	8000298 <__aeabi_dsub>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	f7f7 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f43f af35 	beq.w	8008a14 <_dtoa_r+0x464>
 8008baa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bac:	1e6b      	subs	r3, r5, #1
 8008bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bb4:	2b30      	cmp	r3, #48	; 0x30
 8008bb6:	d0f8      	beq.n	8008baa <_dtoa_r+0x5fa>
 8008bb8:	9700      	str	r7, [sp, #0]
 8008bba:	e049      	b.n	8008c50 <_dtoa_r+0x6a0>
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <_dtoa_r+0x624>)
 8008bbe:	f7f7 fd23 	bl	8000608 <__aeabi_dmul>
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	e7bd      	b.n	8008b44 <_dtoa_r+0x594>
 8008bc8:	0800a7d0 	.word	0x0800a7d0
 8008bcc:	0800a7a8 	.word	0x0800a7a8
 8008bd0:	3ff00000 	.word	0x3ff00000
 8008bd4:	40240000 	.word	0x40240000
 8008bd8:	401c0000 	.word	0x401c0000
 8008bdc:	40140000 	.word	0x40140000
 8008be0:	3fe00000 	.word	0x3fe00000
 8008be4:	9d01      	ldr	r5, [sp, #4]
 8008be6:	4656      	mov	r6, sl
 8008be8:	465f      	mov	r7, fp
 8008bea:	4642      	mov	r2, r8
 8008bec:	464b      	mov	r3, r9
 8008bee:	4630      	mov	r0, r6
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	f7f7 fe33 	bl	800085c <__aeabi_ddiv>
 8008bf6:	f7f7 ffb7 	bl	8000b68 <__aeabi_d2iz>
 8008bfa:	4682      	mov	sl, r0
 8008bfc:	f7f7 fc9a 	bl	8000534 <__aeabi_i2d>
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	f7f7 fd00 	bl	8000608 <__aeabi_dmul>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c14:	f7f7 fb40 	bl	8000298 <__aeabi_dsub>
 8008c18:	f805 6b01 	strb.w	r6, [r5], #1
 8008c1c:	9e01      	ldr	r6, [sp, #4]
 8008c1e:	9f03      	ldr	r7, [sp, #12]
 8008c20:	1bae      	subs	r6, r5, r6
 8008c22:	42b7      	cmp	r7, r6
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	d135      	bne.n	8008c96 <_dtoa_r+0x6e6>
 8008c2a:	f7f7 fb37 	bl	800029c <__adddf3>
 8008c2e:	4642      	mov	r2, r8
 8008c30:	464b      	mov	r3, r9
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	f7f7 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 8008c3a:	b9d0      	cbnz	r0, 8008c72 <_dtoa_r+0x6c2>
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7f7 ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c48:	b110      	cbz	r0, 8008c50 <_dtoa_r+0x6a0>
 8008c4a:	f01a 0f01 	tst.w	sl, #1
 8008c4e:	d110      	bne.n	8008c72 <_dtoa_r+0x6c2>
 8008c50:	4620      	mov	r0, r4
 8008c52:	ee18 1a10 	vmov	r1, s16
 8008c56:	f000 faf3 	bl	8009240 <_Bfree>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9800      	ldr	r0, [sp, #0]
 8008c5e:	702b      	strb	r3, [r5, #0]
 8008c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c62:	3001      	adds	r0, #1
 8008c64:	6018      	str	r0, [r3, #0]
 8008c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f43f acf1 	beq.w	8008650 <_dtoa_r+0xa0>
 8008c6e:	601d      	str	r5, [r3, #0]
 8008c70:	e4ee      	b.n	8008650 <_dtoa_r+0xa0>
 8008c72:	9f00      	ldr	r7, [sp, #0]
 8008c74:	462b      	mov	r3, r5
 8008c76:	461d      	mov	r5, r3
 8008c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c7c:	2a39      	cmp	r2, #57	; 0x39
 8008c7e:	d106      	bne.n	8008c8e <_dtoa_r+0x6de>
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d1f7      	bne.n	8008c76 <_dtoa_r+0x6c6>
 8008c86:	9901      	ldr	r1, [sp, #4]
 8008c88:	2230      	movs	r2, #48	; 0x30
 8008c8a:	3701      	adds	r7, #1
 8008c8c:	700a      	strb	r2, [r1, #0]
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	3201      	adds	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e790      	b.n	8008bb8 <_dtoa_r+0x608>
 8008c96:	4ba6      	ldr	r3, [pc, #664]	; (8008f30 <_dtoa_r+0x980>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f7f7 fcb5 	bl	8000608 <__aeabi_dmul>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	f7f7 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d09d      	beq.n	8008bea <_dtoa_r+0x63a>
 8008cae:	e7cf      	b.n	8008c50 <_dtoa_r+0x6a0>
 8008cb0:	9a08      	ldr	r2, [sp, #32]
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	f000 80d7 	beq.w	8008e66 <_dtoa_r+0x8b6>
 8008cb8:	9a06      	ldr	r2, [sp, #24]
 8008cba:	2a01      	cmp	r2, #1
 8008cbc:	f300 80ba 	bgt.w	8008e34 <_dtoa_r+0x884>
 8008cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	f000 80b2 	beq.w	8008e2c <_dtoa_r+0x87c>
 8008cc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ccc:	9e07      	ldr	r6, [sp, #28]
 8008cce:	9d04      	ldr	r5, [sp, #16]
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	441a      	add	r2, r3
 8008cd4:	9204      	str	r2, [sp, #16]
 8008cd6:	9a05      	ldr	r2, [sp, #20]
 8008cd8:	2101      	movs	r1, #1
 8008cda:	441a      	add	r2, r3
 8008cdc:	4620      	mov	r0, r4
 8008cde:	9205      	str	r2, [sp, #20]
 8008ce0:	f000 fb66 	bl	80093b0 <__i2b>
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	dd0c      	ble.n	8008d04 <_dtoa_r+0x754>
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd09      	ble.n	8008d04 <_dtoa_r+0x754>
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	9a04      	ldr	r2, [sp, #16]
 8008cf4:	bfa8      	it	ge
 8008cf6:	462b      	movge	r3, r5
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	9204      	str	r2, [sp, #16]
 8008cfc:	9a05      	ldr	r2, [sp, #20]
 8008cfe:	1aed      	subs	r5, r5, r3
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	9b07      	ldr	r3, [sp, #28]
 8008d06:	b31b      	cbz	r3, 8008d50 <_dtoa_r+0x7a0>
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80af 	beq.w	8008e6e <_dtoa_r+0x8be>
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	dd13      	ble.n	8008d3c <_dtoa_r+0x78c>
 8008d14:	4639      	mov	r1, r7
 8008d16:	4632      	mov	r2, r6
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fc09 	bl	8009530 <__pow5mult>
 8008d1e:	ee18 2a10 	vmov	r2, s16
 8008d22:	4601      	mov	r1, r0
 8008d24:	4607      	mov	r7, r0
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 fb58 	bl	80093dc <__multiply>
 8008d2c:	ee18 1a10 	vmov	r1, s16
 8008d30:	4680      	mov	r8, r0
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fa84 	bl	8009240 <_Bfree>
 8008d38:	ee08 8a10 	vmov	s16, r8
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	1b9a      	subs	r2, r3, r6
 8008d40:	d006      	beq.n	8008d50 <_dtoa_r+0x7a0>
 8008d42:	ee18 1a10 	vmov	r1, s16
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fbf2 	bl	8009530 <__pow5mult>
 8008d4c:	ee08 0a10 	vmov	s16, r0
 8008d50:	2101      	movs	r1, #1
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fb2c 	bl	80093b0 <__i2b>
 8008d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	f340 8088 	ble.w	8008e72 <_dtoa_r+0x8c2>
 8008d62:	461a      	mov	r2, r3
 8008d64:	4601      	mov	r1, r0
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 fbe2 	bl	8009530 <__pow5mult>
 8008d6c:	9b06      	ldr	r3, [sp, #24]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	4606      	mov	r6, r0
 8008d72:	f340 8081 	ble.w	8008e78 <_dtoa_r+0x8c8>
 8008d76:	f04f 0800 	mov.w	r8, #0
 8008d7a:	6933      	ldr	r3, [r6, #16]
 8008d7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d80:	6918      	ldr	r0, [r3, #16]
 8008d82:	f000 fac5 	bl	8009310 <__hi0bits>
 8008d86:	f1c0 0020 	rsb	r0, r0, #32
 8008d8a:	9b05      	ldr	r3, [sp, #20]
 8008d8c:	4418      	add	r0, r3
 8008d8e:	f010 001f 	ands.w	r0, r0, #31
 8008d92:	f000 8092 	beq.w	8008eba <_dtoa_r+0x90a>
 8008d96:	f1c0 0320 	rsb	r3, r0, #32
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	f340 808a 	ble.w	8008eb4 <_dtoa_r+0x904>
 8008da0:	f1c0 001c 	rsb	r0, r0, #28
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	4403      	add	r3, r0
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	9b05      	ldr	r3, [sp, #20]
 8008dac:	4403      	add	r3, r0
 8008dae:	4405      	add	r5, r0
 8008db0:	9305      	str	r3, [sp, #20]
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dd07      	ble.n	8008dc8 <_dtoa_r+0x818>
 8008db8:	ee18 1a10 	vmov	r1, s16
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 fc10 	bl	80095e4 <__lshift>
 8008dc4:	ee08 0a10 	vmov	s16, r0
 8008dc8:	9b05      	ldr	r3, [sp, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dd05      	ble.n	8008dda <_dtoa_r+0x82a>
 8008dce:	4631      	mov	r1, r6
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fc06 	bl	80095e4 <__lshift>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d06e      	beq.n	8008ebe <_dtoa_r+0x90e>
 8008de0:	ee18 0a10 	vmov	r0, s16
 8008de4:	4631      	mov	r1, r6
 8008de6:	f000 fc6d 	bl	80096c4 <__mcmp>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	da67      	bge.n	8008ebe <_dtoa_r+0x90e>
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	ee18 1a10 	vmov	r1, s16
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	220a      	movs	r2, #10
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fa41 	bl	8009284 <__multadd>
 8008e02:	9b08      	ldr	r3, [sp, #32]
 8008e04:	ee08 0a10 	vmov	s16, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 81b1 	beq.w	8009170 <_dtoa_r+0xbc0>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4639      	mov	r1, r7
 8008e12:	220a      	movs	r2, #10
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 fa35 	bl	8009284 <__multadd>
 8008e1a:	9b02      	ldr	r3, [sp, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	4607      	mov	r7, r0
 8008e20:	f300 808e 	bgt.w	8008f40 <_dtoa_r+0x990>
 8008e24:	9b06      	ldr	r3, [sp, #24]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	dc51      	bgt.n	8008ece <_dtoa_r+0x91e>
 8008e2a:	e089      	b.n	8008f40 <_dtoa_r+0x990>
 8008e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e32:	e74b      	b.n	8008ccc <_dtoa_r+0x71c>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	1e5e      	subs	r6, r3, #1
 8008e38:	9b07      	ldr	r3, [sp, #28]
 8008e3a:	42b3      	cmp	r3, r6
 8008e3c:	bfbf      	itttt	lt
 8008e3e:	9b07      	ldrlt	r3, [sp, #28]
 8008e40:	9607      	strlt	r6, [sp, #28]
 8008e42:	1af2      	sublt	r2, r6, r3
 8008e44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008e46:	bfb6      	itet	lt
 8008e48:	189b      	addlt	r3, r3, r2
 8008e4a:	1b9e      	subge	r6, r3, r6
 8008e4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	bfb8      	it	lt
 8008e52:	2600      	movlt	r6, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfb7      	itett	lt
 8008e58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008e5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e60:	1a9d      	sublt	r5, r3, r2
 8008e62:	2300      	movlt	r3, #0
 8008e64:	e734      	b.n	8008cd0 <_dtoa_r+0x720>
 8008e66:	9e07      	ldr	r6, [sp, #28]
 8008e68:	9d04      	ldr	r5, [sp, #16]
 8008e6a:	9f08      	ldr	r7, [sp, #32]
 8008e6c:	e73b      	b.n	8008ce6 <_dtoa_r+0x736>
 8008e6e:	9a07      	ldr	r2, [sp, #28]
 8008e70:	e767      	b.n	8008d42 <_dtoa_r+0x792>
 8008e72:	9b06      	ldr	r3, [sp, #24]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	dc18      	bgt.n	8008eaa <_dtoa_r+0x8fa>
 8008e78:	f1ba 0f00 	cmp.w	sl, #0
 8008e7c:	d115      	bne.n	8008eaa <_dtoa_r+0x8fa>
 8008e7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e82:	b993      	cbnz	r3, 8008eaa <_dtoa_r+0x8fa>
 8008e84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e88:	0d1b      	lsrs	r3, r3, #20
 8008e8a:	051b      	lsls	r3, r3, #20
 8008e8c:	b183      	cbz	r3, 8008eb0 <_dtoa_r+0x900>
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	3301      	adds	r3, #1
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	3301      	adds	r3, #1
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	f04f 0801 	mov.w	r8, #1
 8008e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f47f af6a 	bne.w	8008d7a <_dtoa_r+0x7ca>
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	e76f      	b.n	8008d8a <_dtoa_r+0x7da>
 8008eaa:	f04f 0800 	mov.w	r8, #0
 8008eae:	e7f6      	b.n	8008e9e <_dtoa_r+0x8ee>
 8008eb0:	4698      	mov	r8, r3
 8008eb2:	e7f4      	b.n	8008e9e <_dtoa_r+0x8ee>
 8008eb4:	f43f af7d 	beq.w	8008db2 <_dtoa_r+0x802>
 8008eb8:	4618      	mov	r0, r3
 8008eba:	301c      	adds	r0, #28
 8008ebc:	e772      	b.n	8008da4 <_dtoa_r+0x7f4>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	dc37      	bgt.n	8008f34 <_dtoa_r+0x984>
 8008ec4:	9b06      	ldr	r3, [sp, #24]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	dd34      	ble.n	8008f34 <_dtoa_r+0x984>
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	9302      	str	r3, [sp, #8]
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	b96b      	cbnz	r3, 8008eee <_dtoa_r+0x93e>
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 f9d4 	bl	8009284 <__multadd>
 8008edc:	4601      	mov	r1, r0
 8008ede:	4606      	mov	r6, r0
 8008ee0:	ee18 0a10 	vmov	r0, s16
 8008ee4:	f000 fbee 	bl	80096c4 <__mcmp>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f73f adbb 	bgt.w	8008a64 <_dtoa_r+0x4b4>
 8008eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef0:	9d01      	ldr	r5, [sp, #4]
 8008ef2:	43db      	mvns	r3, r3
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	f04f 0800 	mov.w	r8, #0
 8008efa:	4631      	mov	r1, r6
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 f99f 	bl	8009240 <_Bfree>
 8008f02:	2f00      	cmp	r7, #0
 8008f04:	f43f aea4 	beq.w	8008c50 <_dtoa_r+0x6a0>
 8008f08:	f1b8 0f00 	cmp.w	r8, #0
 8008f0c:	d005      	beq.n	8008f1a <_dtoa_r+0x96a>
 8008f0e:	45b8      	cmp	r8, r7
 8008f10:	d003      	beq.n	8008f1a <_dtoa_r+0x96a>
 8008f12:	4641      	mov	r1, r8
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 f993 	bl	8009240 <_Bfree>
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 f98f 	bl	8009240 <_Bfree>
 8008f22:	e695      	b.n	8008c50 <_dtoa_r+0x6a0>
 8008f24:	2600      	movs	r6, #0
 8008f26:	4637      	mov	r7, r6
 8008f28:	e7e1      	b.n	8008eee <_dtoa_r+0x93e>
 8008f2a:	9700      	str	r7, [sp, #0]
 8008f2c:	4637      	mov	r7, r6
 8008f2e:	e599      	b.n	8008a64 <_dtoa_r+0x4b4>
 8008f30:	40240000 	.word	0x40240000
 8008f34:	9b08      	ldr	r3, [sp, #32]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 80ca 	beq.w	80090d0 <_dtoa_r+0xb20>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	9302      	str	r3, [sp, #8]
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	dd05      	ble.n	8008f50 <_dtoa_r+0x9a0>
 8008f44:	4639      	mov	r1, r7
 8008f46:	462a      	mov	r2, r5
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fb4b 	bl	80095e4 <__lshift>
 8008f4e:	4607      	mov	r7, r0
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	d05b      	beq.n	800900e <_dtoa_r+0xa5e>
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 f931 	bl	80091c0 <_Balloc>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b928      	cbnz	r0, 8008f6e <_dtoa_r+0x9be>
 8008f62:	4b87      	ldr	r3, [pc, #540]	; (8009180 <_dtoa_r+0xbd0>)
 8008f64:	4602      	mov	r2, r0
 8008f66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f6a:	f7ff bb3b 	b.w	80085e4 <_dtoa_r+0x34>
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	3202      	adds	r2, #2
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	f107 010c 	add.w	r1, r7, #12
 8008f78:	300c      	adds	r0, #12
 8008f7a:	f000 f913 	bl	80091a4 <memcpy>
 8008f7e:	2201      	movs	r2, #1
 8008f80:	4629      	mov	r1, r5
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fb2e 	bl	80095e4 <__lshift>
 8008f88:	9b01      	ldr	r3, [sp, #4]
 8008f8a:	f103 0901 	add.w	r9, r3, #1
 8008f8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	f00a 0301 	and.w	r3, sl, #1
 8008f9a:	46b8      	mov	r8, r7
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	ee18 0a10 	vmov	r0, s16
 8008fa6:	f7ff fa75 	bl	8008494 <quorem>
 8008faa:	4641      	mov	r1, r8
 8008fac:	9002      	str	r0, [sp, #8]
 8008fae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fb2:	ee18 0a10 	vmov	r0, s16
 8008fb6:	f000 fb85 	bl	80096c4 <__mcmp>
 8008fba:	463a      	mov	r2, r7
 8008fbc:	9003      	str	r0, [sp, #12]
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fb9b 	bl	80096fc <__mdiff>
 8008fc6:	68c2      	ldr	r2, [r0, #12]
 8008fc8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008fcc:	4605      	mov	r5, r0
 8008fce:	bb02      	cbnz	r2, 8009012 <_dtoa_r+0xa62>
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	ee18 0a10 	vmov	r0, s16
 8008fd6:	f000 fb75 	bl	80096c4 <__mcmp>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4620      	mov	r0, r4
 8008fe0:	9207      	str	r2, [sp, #28]
 8008fe2:	f000 f92d 	bl	8009240 <_Bfree>
 8008fe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008fea:	ea43 0102 	orr.w	r1, r3, r2
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	464d      	mov	r5, r9
 8008ff4:	d10f      	bne.n	8009016 <_dtoa_r+0xa66>
 8008ff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ffa:	d02a      	beq.n	8009052 <_dtoa_r+0xaa2>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	dd02      	ble.n	8009008 <_dtoa_r+0xa58>
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009008:	f88b a000 	strb.w	sl, [fp]
 800900c:	e775      	b.n	8008efa <_dtoa_r+0x94a>
 800900e:	4638      	mov	r0, r7
 8009010:	e7ba      	b.n	8008f88 <_dtoa_r+0x9d8>
 8009012:	2201      	movs	r2, #1
 8009014:	e7e2      	b.n	8008fdc <_dtoa_r+0xa2c>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db04      	blt.n	8009026 <_dtoa_r+0xa76>
 800901c:	9906      	ldr	r1, [sp, #24]
 800901e:	430b      	orrs	r3, r1
 8009020:	9904      	ldr	r1, [sp, #16]
 8009022:	430b      	orrs	r3, r1
 8009024:	d122      	bne.n	800906c <_dtoa_r+0xabc>
 8009026:	2a00      	cmp	r2, #0
 8009028:	ddee      	ble.n	8009008 <_dtoa_r+0xa58>
 800902a:	ee18 1a10 	vmov	r1, s16
 800902e:	2201      	movs	r2, #1
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fad7 	bl	80095e4 <__lshift>
 8009036:	4631      	mov	r1, r6
 8009038:	ee08 0a10 	vmov	s16, r0
 800903c:	f000 fb42 	bl	80096c4 <__mcmp>
 8009040:	2800      	cmp	r0, #0
 8009042:	dc03      	bgt.n	800904c <_dtoa_r+0xa9c>
 8009044:	d1e0      	bne.n	8009008 <_dtoa_r+0xa58>
 8009046:	f01a 0f01 	tst.w	sl, #1
 800904a:	d0dd      	beq.n	8009008 <_dtoa_r+0xa58>
 800904c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009050:	d1d7      	bne.n	8009002 <_dtoa_r+0xa52>
 8009052:	2339      	movs	r3, #57	; 0x39
 8009054:	f88b 3000 	strb.w	r3, [fp]
 8009058:	462b      	mov	r3, r5
 800905a:	461d      	mov	r5, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009062:	2a39      	cmp	r2, #57	; 0x39
 8009064:	d071      	beq.n	800914a <_dtoa_r+0xb9a>
 8009066:	3201      	adds	r2, #1
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e746      	b.n	8008efa <_dtoa_r+0x94a>
 800906c:	2a00      	cmp	r2, #0
 800906e:	dd07      	ble.n	8009080 <_dtoa_r+0xad0>
 8009070:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009074:	d0ed      	beq.n	8009052 <_dtoa_r+0xaa2>
 8009076:	f10a 0301 	add.w	r3, sl, #1
 800907a:	f88b 3000 	strb.w	r3, [fp]
 800907e:	e73c      	b.n	8008efa <_dtoa_r+0x94a>
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009086:	4599      	cmp	r9, r3
 8009088:	d047      	beq.n	800911a <_dtoa_r+0xb6a>
 800908a:	ee18 1a10 	vmov	r1, s16
 800908e:	2300      	movs	r3, #0
 8009090:	220a      	movs	r2, #10
 8009092:	4620      	mov	r0, r4
 8009094:	f000 f8f6 	bl	8009284 <__multadd>
 8009098:	45b8      	cmp	r8, r7
 800909a:	ee08 0a10 	vmov	s16, r0
 800909e:	f04f 0300 	mov.w	r3, #0
 80090a2:	f04f 020a 	mov.w	r2, #10
 80090a6:	4641      	mov	r1, r8
 80090a8:	4620      	mov	r0, r4
 80090aa:	d106      	bne.n	80090ba <_dtoa_r+0xb0a>
 80090ac:	f000 f8ea 	bl	8009284 <__multadd>
 80090b0:	4680      	mov	r8, r0
 80090b2:	4607      	mov	r7, r0
 80090b4:	f109 0901 	add.w	r9, r9, #1
 80090b8:	e772      	b.n	8008fa0 <_dtoa_r+0x9f0>
 80090ba:	f000 f8e3 	bl	8009284 <__multadd>
 80090be:	4639      	mov	r1, r7
 80090c0:	4680      	mov	r8, r0
 80090c2:	2300      	movs	r3, #0
 80090c4:	220a      	movs	r2, #10
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 f8dc 	bl	8009284 <__multadd>
 80090cc:	4607      	mov	r7, r0
 80090ce:	e7f1      	b.n	80090b4 <_dtoa_r+0xb04>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	9d01      	ldr	r5, [sp, #4]
 80090d6:	ee18 0a10 	vmov	r0, s16
 80090da:	4631      	mov	r1, r6
 80090dc:	f7ff f9da 	bl	8008494 <quorem>
 80090e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	f805 ab01 	strb.w	sl, [r5], #1
 80090ea:	1aea      	subs	r2, r5, r3
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	4293      	cmp	r3, r2
 80090f0:	dd09      	ble.n	8009106 <_dtoa_r+0xb56>
 80090f2:	ee18 1a10 	vmov	r1, s16
 80090f6:	2300      	movs	r3, #0
 80090f8:	220a      	movs	r2, #10
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 f8c2 	bl	8009284 <__multadd>
 8009100:	ee08 0a10 	vmov	s16, r0
 8009104:	e7e7      	b.n	80090d6 <_dtoa_r+0xb26>
 8009106:	9b02      	ldr	r3, [sp, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfc8      	it	gt
 800910c:	461d      	movgt	r5, r3
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	bfd8      	it	le
 8009112:	2501      	movle	r5, #1
 8009114:	441d      	add	r5, r3
 8009116:	f04f 0800 	mov.w	r8, #0
 800911a:	ee18 1a10 	vmov	r1, s16
 800911e:	2201      	movs	r2, #1
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fa5f 	bl	80095e4 <__lshift>
 8009126:	4631      	mov	r1, r6
 8009128:	ee08 0a10 	vmov	s16, r0
 800912c:	f000 faca 	bl	80096c4 <__mcmp>
 8009130:	2800      	cmp	r0, #0
 8009132:	dc91      	bgt.n	8009058 <_dtoa_r+0xaa8>
 8009134:	d102      	bne.n	800913c <_dtoa_r+0xb8c>
 8009136:	f01a 0f01 	tst.w	sl, #1
 800913a:	d18d      	bne.n	8009058 <_dtoa_r+0xaa8>
 800913c:	462b      	mov	r3, r5
 800913e:	461d      	mov	r5, r3
 8009140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009144:	2a30      	cmp	r2, #48	; 0x30
 8009146:	d0fa      	beq.n	800913e <_dtoa_r+0xb8e>
 8009148:	e6d7      	b.n	8008efa <_dtoa_r+0x94a>
 800914a:	9a01      	ldr	r2, [sp, #4]
 800914c:	429a      	cmp	r2, r3
 800914e:	d184      	bne.n	800905a <_dtoa_r+0xaaa>
 8009150:	9b00      	ldr	r3, [sp, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	2331      	movs	r3, #49	; 0x31
 8009158:	7013      	strb	r3, [r2, #0]
 800915a:	e6ce      	b.n	8008efa <_dtoa_r+0x94a>
 800915c:	4b09      	ldr	r3, [pc, #36]	; (8009184 <_dtoa_r+0xbd4>)
 800915e:	f7ff ba95 	b.w	800868c <_dtoa_r+0xdc>
 8009162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009164:	2b00      	cmp	r3, #0
 8009166:	f47f aa6e 	bne.w	8008646 <_dtoa_r+0x96>
 800916a:	4b07      	ldr	r3, [pc, #28]	; (8009188 <_dtoa_r+0xbd8>)
 800916c:	f7ff ba8e 	b.w	800868c <_dtoa_r+0xdc>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	dcae      	bgt.n	80090d4 <_dtoa_r+0xb24>
 8009176:	9b06      	ldr	r3, [sp, #24]
 8009178:	2b02      	cmp	r3, #2
 800917a:	f73f aea8 	bgt.w	8008ece <_dtoa_r+0x91e>
 800917e:	e7a9      	b.n	80090d4 <_dtoa_r+0xb24>
 8009180:	0800a737 	.word	0x0800a737
 8009184:	0800a694 	.word	0x0800a694
 8009188:	0800a6b8 	.word	0x0800a6b8

0800918c <_localeconv_r>:
 800918c:	4800      	ldr	r0, [pc, #0]	; (8009190 <_localeconv_r+0x4>)
 800918e:	4770      	bx	lr
 8009190:	20000164 	.word	0x20000164

08009194 <malloc>:
 8009194:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <malloc+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f000 bc17 	b.w	80099cc <_malloc_r>
 800919e:	bf00      	nop
 80091a0:	20000010 	.word	0x20000010

080091a4 <memcpy>:
 80091a4:	440a      	add	r2, r1
 80091a6:	4291      	cmp	r1, r2
 80091a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80091ac:	d100      	bne.n	80091b0 <memcpy+0xc>
 80091ae:	4770      	bx	lr
 80091b0:	b510      	push	{r4, lr}
 80091b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ba:	4291      	cmp	r1, r2
 80091bc:	d1f9      	bne.n	80091b2 <memcpy+0xe>
 80091be:	bd10      	pop	{r4, pc}

080091c0 <_Balloc>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091c4:	4604      	mov	r4, r0
 80091c6:	460d      	mov	r5, r1
 80091c8:	b976      	cbnz	r6, 80091e8 <_Balloc+0x28>
 80091ca:	2010      	movs	r0, #16
 80091cc:	f7ff ffe2 	bl	8009194 <malloc>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6260      	str	r0, [r4, #36]	; 0x24
 80091d4:	b920      	cbnz	r0, 80091e0 <_Balloc+0x20>
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <_Balloc+0x78>)
 80091d8:	4818      	ldr	r0, [pc, #96]	; (800923c <_Balloc+0x7c>)
 80091da:	2166      	movs	r1, #102	; 0x66
 80091dc:	f000 fc7a 	bl	8009ad4 <__assert_func>
 80091e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e4:	6006      	str	r6, [r0, #0]
 80091e6:	60c6      	str	r6, [r0, #12]
 80091e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091ea:	68f3      	ldr	r3, [r6, #12]
 80091ec:	b183      	cbz	r3, 8009210 <_Balloc+0x50>
 80091ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091f6:	b9b8      	cbnz	r0, 8009228 <_Balloc+0x68>
 80091f8:	2101      	movs	r1, #1
 80091fa:	fa01 f605 	lsl.w	r6, r1, r5
 80091fe:	1d72      	adds	r2, r6, #5
 8009200:	0092      	lsls	r2, r2, #2
 8009202:	4620      	mov	r0, r4
 8009204:	f000 fb60 	bl	80098c8 <_calloc_r>
 8009208:	b160      	cbz	r0, 8009224 <_Balloc+0x64>
 800920a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800920e:	e00e      	b.n	800922e <_Balloc+0x6e>
 8009210:	2221      	movs	r2, #33	; 0x21
 8009212:	2104      	movs	r1, #4
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fb57 	bl	80098c8 <_calloc_r>
 800921a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800921c:	60f0      	str	r0, [r6, #12]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e4      	bne.n	80091ee <_Balloc+0x2e>
 8009224:	2000      	movs	r0, #0
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	6802      	ldr	r2, [r0, #0]
 800922a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800922e:	2300      	movs	r3, #0
 8009230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009234:	e7f7      	b.n	8009226 <_Balloc+0x66>
 8009236:	bf00      	nop
 8009238:	0800a6c5 	.word	0x0800a6c5
 800923c:	0800a748 	.word	0x0800a748

08009240 <_Bfree>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b976      	cbnz	r6, 8009268 <_Bfree+0x28>
 800924a:	2010      	movs	r0, #16
 800924c:	f7ff ffa2 	bl	8009194 <malloc>
 8009250:	4602      	mov	r2, r0
 8009252:	6268      	str	r0, [r5, #36]	; 0x24
 8009254:	b920      	cbnz	r0, 8009260 <_Bfree+0x20>
 8009256:	4b09      	ldr	r3, [pc, #36]	; (800927c <_Bfree+0x3c>)
 8009258:	4809      	ldr	r0, [pc, #36]	; (8009280 <_Bfree+0x40>)
 800925a:	218a      	movs	r1, #138	; 0x8a
 800925c:	f000 fc3a 	bl	8009ad4 <__assert_func>
 8009260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009264:	6006      	str	r6, [r0, #0]
 8009266:	60c6      	str	r6, [r0, #12]
 8009268:	b13c      	cbz	r4, 800927a <_Bfree+0x3a>
 800926a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800926c:	6862      	ldr	r2, [r4, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009274:	6021      	str	r1, [r4, #0]
 8009276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0800a6c5 	.word	0x0800a6c5
 8009280:	0800a748 	.word	0x0800a748

08009284 <__multadd>:
 8009284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009288:	690d      	ldr	r5, [r1, #16]
 800928a:	4607      	mov	r7, r0
 800928c:	460c      	mov	r4, r1
 800928e:	461e      	mov	r6, r3
 8009290:	f101 0c14 	add.w	ip, r1, #20
 8009294:	2000      	movs	r0, #0
 8009296:	f8dc 3000 	ldr.w	r3, [ip]
 800929a:	b299      	uxth	r1, r3
 800929c:	fb02 6101 	mla	r1, r2, r1, r6
 80092a0:	0c1e      	lsrs	r6, r3, #16
 80092a2:	0c0b      	lsrs	r3, r1, #16
 80092a4:	fb02 3306 	mla	r3, r2, r6, r3
 80092a8:	b289      	uxth	r1, r1
 80092aa:	3001      	adds	r0, #1
 80092ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092b0:	4285      	cmp	r5, r0
 80092b2:	f84c 1b04 	str.w	r1, [ip], #4
 80092b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092ba:	dcec      	bgt.n	8009296 <__multadd+0x12>
 80092bc:	b30e      	cbz	r6, 8009302 <__multadd+0x7e>
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	dc19      	bgt.n	80092f8 <__multadd+0x74>
 80092c4:	6861      	ldr	r1, [r4, #4]
 80092c6:	4638      	mov	r0, r7
 80092c8:	3101      	adds	r1, #1
 80092ca:	f7ff ff79 	bl	80091c0 <_Balloc>
 80092ce:	4680      	mov	r8, r0
 80092d0:	b928      	cbnz	r0, 80092de <__multadd+0x5a>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <__multadd+0x84>)
 80092d6:	480d      	ldr	r0, [pc, #52]	; (800930c <__multadd+0x88>)
 80092d8:	21b5      	movs	r1, #181	; 0xb5
 80092da:	f000 fbfb 	bl	8009ad4 <__assert_func>
 80092de:	6922      	ldr	r2, [r4, #16]
 80092e0:	3202      	adds	r2, #2
 80092e2:	f104 010c 	add.w	r1, r4, #12
 80092e6:	0092      	lsls	r2, r2, #2
 80092e8:	300c      	adds	r0, #12
 80092ea:	f7ff ff5b 	bl	80091a4 <memcpy>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7ff ffa5 	bl	8009240 <_Bfree>
 80092f6:	4644      	mov	r4, r8
 80092f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092fc:	3501      	adds	r5, #1
 80092fe:	615e      	str	r6, [r3, #20]
 8009300:	6125      	str	r5, [r4, #16]
 8009302:	4620      	mov	r0, r4
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009308:	0800a737 	.word	0x0800a737
 800930c:	0800a748 	.word	0x0800a748

08009310 <__hi0bits>:
 8009310:	0c03      	lsrs	r3, r0, #16
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	b9d3      	cbnz	r3, 800934c <__hi0bits+0x3c>
 8009316:	0400      	lsls	r0, r0, #16
 8009318:	2310      	movs	r3, #16
 800931a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800931e:	bf04      	itt	eq
 8009320:	0200      	lsleq	r0, r0, #8
 8009322:	3308      	addeq	r3, #8
 8009324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009328:	bf04      	itt	eq
 800932a:	0100      	lsleq	r0, r0, #4
 800932c:	3304      	addeq	r3, #4
 800932e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009332:	bf04      	itt	eq
 8009334:	0080      	lsleq	r0, r0, #2
 8009336:	3302      	addeq	r3, #2
 8009338:	2800      	cmp	r0, #0
 800933a:	db05      	blt.n	8009348 <__hi0bits+0x38>
 800933c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009340:	f103 0301 	add.w	r3, r3, #1
 8009344:	bf08      	it	eq
 8009346:	2320      	moveq	r3, #32
 8009348:	4618      	mov	r0, r3
 800934a:	4770      	bx	lr
 800934c:	2300      	movs	r3, #0
 800934e:	e7e4      	b.n	800931a <__hi0bits+0xa>

08009350 <__lo0bits>:
 8009350:	6803      	ldr	r3, [r0, #0]
 8009352:	f013 0207 	ands.w	r2, r3, #7
 8009356:	4601      	mov	r1, r0
 8009358:	d00b      	beq.n	8009372 <__lo0bits+0x22>
 800935a:	07da      	lsls	r2, r3, #31
 800935c:	d423      	bmi.n	80093a6 <__lo0bits+0x56>
 800935e:	0798      	lsls	r0, r3, #30
 8009360:	bf49      	itett	mi
 8009362:	085b      	lsrmi	r3, r3, #1
 8009364:	089b      	lsrpl	r3, r3, #2
 8009366:	2001      	movmi	r0, #1
 8009368:	600b      	strmi	r3, [r1, #0]
 800936a:	bf5c      	itt	pl
 800936c:	600b      	strpl	r3, [r1, #0]
 800936e:	2002      	movpl	r0, #2
 8009370:	4770      	bx	lr
 8009372:	b298      	uxth	r0, r3
 8009374:	b9a8      	cbnz	r0, 80093a2 <__lo0bits+0x52>
 8009376:	0c1b      	lsrs	r3, r3, #16
 8009378:	2010      	movs	r0, #16
 800937a:	b2da      	uxtb	r2, r3
 800937c:	b90a      	cbnz	r2, 8009382 <__lo0bits+0x32>
 800937e:	3008      	adds	r0, #8
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	071a      	lsls	r2, r3, #28
 8009384:	bf04      	itt	eq
 8009386:	091b      	lsreq	r3, r3, #4
 8009388:	3004      	addeq	r0, #4
 800938a:	079a      	lsls	r2, r3, #30
 800938c:	bf04      	itt	eq
 800938e:	089b      	lsreq	r3, r3, #2
 8009390:	3002      	addeq	r0, #2
 8009392:	07da      	lsls	r2, r3, #31
 8009394:	d403      	bmi.n	800939e <__lo0bits+0x4e>
 8009396:	085b      	lsrs	r3, r3, #1
 8009398:	f100 0001 	add.w	r0, r0, #1
 800939c:	d005      	beq.n	80093aa <__lo0bits+0x5a>
 800939e:	600b      	str	r3, [r1, #0]
 80093a0:	4770      	bx	lr
 80093a2:	4610      	mov	r0, r2
 80093a4:	e7e9      	b.n	800937a <__lo0bits+0x2a>
 80093a6:	2000      	movs	r0, #0
 80093a8:	4770      	bx	lr
 80093aa:	2020      	movs	r0, #32
 80093ac:	4770      	bx	lr
	...

080093b0 <__i2b>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	460c      	mov	r4, r1
 80093b4:	2101      	movs	r1, #1
 80093b6:	f7ff ff03 	bl	80091c0 <_Balloc>
 80093ba:	4602      	mov	r2, r0
 80093bc:	b928      	cbnz	r0, 80093ca <__i2b+0x1a>
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <__i2b+0x24>)
 80093c0:	4805      	ldr	r0, [pc, #20]	; (80093d8 <__i2b+0x28>)
 80093c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093c6:	f000 fb85 	bl	8009ad4 <__assert_func>
 80093ca:	2301      	movs	r3, #1
 80093cc:	6144      	str	r4, [r0, #20]
 80093ce:	6103      	str	r3, [r0, #16]
 80093d0:	bd10      	pop	{r4, pc}
 80093d2:	bf00      	nop
 80093d4:	0800a737 	.word	0x0800a737
 80093d8:	0800a748 	.word	0x0800a748

080093dc <__multiply>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	4691      	mov	r9, r2
 80093e2:	690a      	ldr	r2, [r1, #16]
 80093e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	bfb8      	it	lt
 80093ec:	460b      	movlt	r3, r1
 80093ee:	460c      	mov	r4, r1
 80093f0:	bfbc      	itt	lt
 80093f2:	464c      	movlt	r4, r9
 80093f4:	4699      	movlt	r9, r3
 80093f6:	6927      	ldr	r7, [r4, #16]
 80093f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093fc:	68a3      	ldr	r3, [r4, #8]
 80093fe:	6861      	ldr	r1, [r4, #4]
 8009400:	eb07 060a 	add.w	r6, r7, sl
 8009404:	42b3      	cmp	r3, r6
 8009406:	b085      	sub	sp, #20
 8009408:	bfb8      	it	lt
 800940a:	3101      	addlt	r1, #1
 800940c:	f7ff fed8 	bl	80091c0 <_Balloc>
 8009410:	b930      	cbnz	r0, 8009420 <__multiply+0x44>
 8009412:	4602      	mov	r2, r0
 8009414:	4b44      	ldr	r3, [pc, #272]	; (8009528 <__multiply+0x14c>)
 8009416:	4845      	ldr	r0, [pc, #276]	; (800952c <__multiply+0x150>)
 8009418:	f240 115d 	movw	r1, #349	; 0x15d
 800941c:	f000 fb5a 	bl	8009ad4 <__assert_func>
 8009420:	f100 0514 	add.w	r5, r0, #20
 8009424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009428:	462b      	mov	r3, r5
 800942a:	2200      	movs	r2, #0
 800942c:	4543      	cmp	r3, r8
 800942e:	d321      	bcc.n	8009474 <__multiply+0x98>
 8009430:	f104 0314 	add.w	r3, r4, #20
 8009434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009438:	f109 0314 	add.w	r3, r9, #20
 800943c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009440:	9202      	str	r2, [sp, #8]
 8009442:	1b3a      	subs	r2, r7, r4
 8009444:	3a15      	subs	r2, #21
 8009446:	f022 0203 	bic.w	r2, r2, #3
 800944a:	3204      	adds	r2, #4
 800944c:	f104 0115 	add.w	r1, r4, #21
 8009450:	428f      	cmp	r7, r1
 8009452:	bf38      	it	cc
 8009454:	2204      	movcc	r2, #4
 8009456:	9201      	str	r2, [sp, #4]
 8009458:	9a02      	ldr	r2, [sp, #8]
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	429a      	cmp	r2, r3
 800945e:	d80c      	bhi.n	800947a <__multiply+0x9e>
 8009460:	2e00      	cmp	r6, #0
 8009462:	dd03      	ble.n	800946c <__multiply+0x90>
 8009464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05a      	beq.n	8009522 <__multiply+0x146>
 800946c:	6106      	str	r6, [r0, #16]
 800946e:	b005      	add	sp, #20
 8009470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009474:	f843 2b04 	str.w	r2, [r3], #4
 8009478:	e7d8      	b.n	800942c <__multiply+0x50>
 800947a:	f8b3 a000 	ldrh.w	sl, [r3]
 800947e:	f1ba 0f00 	cmp.w	sl, #0
 8009482:	d024      	beq.n	80094ce <__multiply+0xf2>
 8009484:	f104 0e14 	add.w	lr, r4, #20
 8009488:	46a9      	mov	r9, r5
 800948a:	f04f 0c00 	mov.w	ip, #0
 800948e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009492:	f8d9 1000 	ldr.w	r1, [r9]
 8009496:	fa1f fb82 	uxth.w	fp, r2
 800949a:	b289      	uxth	r1, r1
 800949c:	fb0a 110b 	mla	r1, sl, fp, r1
 80094a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094a4:	f8d9 2000 	ldr.w	r2, [r9]
 80094a8:	4461      	add	r1, ip
 80094aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80094b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094b6:	b289      	uxth	r1, r1
 80094b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094bc:	4577      	cmp	r7, lr
 80094be:	f849 1b04 	str.w	r1, [r9], #4
 80094c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094c6:	d8e2      	bhi.n	800948e <__multiply+0xb2>
 80094c8:	9a01      	ldr	r2, [sp, #4]
 80094ca:	f845 c002 	str.w	ip, [r5, r2]
 80094ce:	9a03      	ldr	r2, [sp, #12]
 80094d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094d4:	3304      	adds	r3, #4
 80094d6:	f1b9 0f00 	cmp.w	r9, #0
 80094da:	d020      	beq.n	800951e <__multiply+0x142>
 80094dc:	6829      	ldr	r1, [r5, #0]
 80094de:	f104 0c14 	add.w	ip, r4, #20
 80094e2:	46ae      	mov	lr, r5
 80094e4:	f04f 0a00 	mov.w	sl, #0
 80094e8:	f8bc b000 	ldrh.w	fp, [ip]
 80094ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80094f0:	fb09 220b 	mla	r2, r9, fp, r2
 80094f4:	4492      	add	sl, r2
 80094f6:	b289      	uxth	r1, r1
 80094f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80094fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009500:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009504:	f8be 1000 	ldrh.w	r1, [lr]
 8009508:	0c12      	lsrs	r2, r2, #16
 800950a:	fb09 1102 	mla	r1, r9, r2, r1
 800950e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009512:	4567      	cmp	r7, ip
 8009514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009518:	d8e6      	bhi.n	80094e8 <__multiply+0x10c>
 800951a:	9a01      	ldr	r2, [sp, #4]
 800951c:	50a9      	str	r1, [r5, r2]
 800951e:	3504      	adds	r5, #4
 8009520:	e79a      	b.n	8009458 <__multiply+0x7c>
 8009522:	3e01      	subs	r6, #1
 8009524:	e79c      	b.n	8009460 <__multiply+0x84>
 8009526:	bf00      	nop
 8009528:	0800a737 	.word	0x0800a737
 800952c:	0800a748 	.word	0x0800a748

08009530 <__pow5mult>:
 8009530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009534:	4615      	mov	r5, r2
 8009536:	f012 0203 	ands.w	r2, r2, #3
 800953a:	4606      	mov	r6, r0
 800953c:	460f      	mov	r7, r1
 800953e:	d007      	beq.n	8009550 <__pow5mult+0x20>
 8009540:	4c25      	ldr	r4, [pc, #148]	; (80095d8 <__pow5mult+0xa8>)
 8009542:	3a01      	subs	r2, #1
 8009544:	2300      	movs	r3, #0
 8009546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800954a:	f7ff fe9b 	bl	8009284 <__multadd>
 800954e:	4607      	mov	r7, r0
 8009550:	10ad      	asrs	r5, r5, #2
 8009552:	d03d      	beq.n	80095d0 <__pow5mult+0xa0>
 8009554:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009556:	b97c      	cbnz	r4, 8009578 <__pow5mult+0x48>
 8009558:	2010      	movs	r0, #16
 800955a:	f7ff fe1b 	bl	8009194 <malloc>
 800955e:	4602      	mov	r2, r0
 8009560:	6270      	str	r0, [r6, #36]	; 0x24
 8009562:	b928      	cbnz	r0, 8009570 <__pow5mult+0x40>
 8009564:	4b1d      	ldr	r3, [pc, #116]	; (80095dc <__pow5mult+0xac>)
 8009566:	481e      	ldr	r0, [pc, #120]	; (80095e0 <__pow5mult+0xb0>)
 8009568:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800956c:	f000 fab2 	bl	8009ad4 <__assert_func>
 8009570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009574:	6004      	str	r4, [r0, #0]
 8009576:	60c4      	str	r4, [r0, #12]
 8009578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800957c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009580:	b94c      	cbnz	r4, 8009596 <__pow5mult+0x66>
 8009582:	f240 2171 	movw	r1, #625	; 0x271
 8009586:	4630      	mov	r0, r6
 8009588:	f7ff ff12 	bl	80093b0 <__i2b>
 800958c:	2300      	movs	r3, #0
 800958e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009592:	4604      	mov	r4, r0
 8009594:	6003      	str	r3, [r0, #0]
 8009596:	f04f 0900 	mov.w	r9, #0
 800959a:	07eb      	lsls	r3, r5, #31
 800959c:	d50a      	bpl.n	80095b4 <__pow5mult+0x84>
 800959e:	4639      	mov	r1, r7
 80095a0:	4622      	mov	r2, r4
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7ff ff1a 	bl	80093dc <__multiply>
 80095a8:	4639      	mov	r1, r7
 80095aa:	4680      	mov	r8, r0
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff fe47 	bl	8009240 <_Bfree>
 80095b2:	4647      	mov	r7, r8
 80095b4:	106d      	asrs	r5, r5, #1
 80095b6:	d00b      	beq.n	80095d0 <__pow5mult+0xa0>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	b938      	cbnz	r0, 80095cc <__pow5mult+0x9c>
 80095bc:	4622      	mov	r2, r4
 80095be:	4621      	mov	r1, r4
 80095c0:	4630      	mov	r0, r6
 80095c2:	f7ff ff0b 	bl	80093dc <__multiply>
 80095c6:	6020      	str	r0, [r4, #0]
 80095c8:	f8c0 9000 	str.w	r9, [r0]
 80095cc:	4604      	mov	r4, r0
 80095ce:	e7e4      	b.n	800959a <__pow5mult+0x6a>
 80095d0:	4638      	mov	r0, r7
 80095d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d6:	bf00      	nop
 80095d8:	0800a898 	.word	0x0800a898
 80095dc:	0800a6c5 	.word	0x0800a6c5
 80095e0:	0800a748 	.word	0x0800a748

080095e4 <__lshift>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	460c      	mov	r4, r1
 80095ea:	6849      	ldr	r1, [r1, #4]
 80095ec:	6923      	ldr	r3, [r4, #16]
 80095ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	4607      	mov	r7, r0
 80095f6:	4691      	mov	r9, r2
 80095f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095fc:	f108 0601 	add.w	r6, r8, #1
 8009600:	42b3      	cmp	r3, r6
 8009602:	db0b      	blt.n	800961c <__lshift+0x38>
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff fddb 	bl	80091c0 <_Balloc>
 800960a:	4605      	mov	r5, r0
 800960c:	b948      	cbnz	r0, 8009622 <__lshift+0x3e>
 800960e:	4602      	mov	r2, r0
 8009610:	4b2a      	ldr	r3, [pc, #168]	; (80096bc <__lshift+0xd8>)
 8009612:	482b      	ldr	r0, [pc, #172]	; (80096c0 <__lshift+0xdc>)
 8009614:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009618:	f000 fa5c 	bl	8009ad4 <__assert_func>
 800961c:	3101      	adds	r1, #1
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	e7ee      	b.n	8009600 <__lshift+0x1c>
 8009622:	2300      	movs	r3, #0
 8009624:	f100 0114 	add.w	r1, r0, #20
 8009628:	f100 0210 	add.w	r2, r0, #16
 800962c:	4618      	mov	r0, r3
 800962e:	4553      	cmp	r3, sl
 8009630:	db37      	blt.n	80096a2 <__lshift+0xbe>
 8009632:	6920      	ldr	r0, [r4, #16]
 8009634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009638:	f104 0314 	add.w	r3, r4, #20
 800963c:	f019 091f 	ands.w	r9, r9, #31
 8009640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009644:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009648:	d02f      	beq.n	80096aa <__lshift+0xc6>
 800964a:	f1c9 0e20 	rsb	lr, r9, #32
 800964e:	468a      	mov	sl, r1
 8009650:	f04f 0c00 	mov.w	ip, #0
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	fa02 f209 	lsl.w	r2, r2, r9
 800965a:	ea42 020c 	orr.w	r2, r2, ip
 800965e:	f84a 2b04 	str.w	r2, [sl], #4
 8009662:	f853 2b04 	ldr.w	r2, [r3], #4
 8009666:	4298      	cmp	r0, r3
 8009668:	fa22 fc0e 	lsr.w	ip, r2, lr
 800966c:	d8f2      	bhi.n	8009654 <__lshift+0x70>
 800966e:	1b03      	subs	r3, r0, r4
 8009670:	3b15      	subs	r3, #21
 8009672:	f023 0303 	bic.w	r3, r3, #3
 8009676:	3304      	adds	r3, #4
 8009678:	f104 0215 	add.w	r2, r4, #21
 800967c:	4290      	cmp	r0, r2
 800967e:	bf38      	it	cc
 8009680:	2304      	movcc	r3, #4
 8009682:	f841 c003 	str.w	ip, [r1, r3]
 8009686:	f1bc 0f00 	cmp.w	ip, #0
 800968a:	d001      	beq.n	8009690 <__lshift+0xac>
 800968c:	f108 0602 	add.w	r6, r8, #2
 8009690:	3e01      	subs	r6, #1
 8009692:	4638      	mov	r0, r7
 8009694:	612e      	str	r6, [r5, #16]
 8009696:	4621      	mov	r1, r4
 8009698:	f7ff fdd2 	bl	8009240 <_Bfree>
 800969c:	4628      	mov	r0, r5
 800969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096a6:	3301      	adds	r3, #1
 80096a8:	e7c1      	b.n	800962e <__lshift+0x4a>
 80096aa:	3904      	subs	r1, #4
 80096ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096b4:	4298      	cmp	r0, r3
 80096b6:	d8f9      	bhi.n	80096ac <__lshift+0xc8>
 80096b8:	e7ea      	b.n	8009690 <__lshift+0xac>
 80096ba:	bf00      	nop
 80096bc:	0800a737 	.word	0x0800a737
 80096c0:	0800a748 	.word	0x0800a748

080096c4 <__mcmp>:
 80096c4:	b530      	push	{r4, r5, lr}
 80096c6:	6902      	ldr	r2, [r0, #16]
 80096c8:	690c      	ldr	r4, [r1, #16]
 80096ca:	1b12      	subs	r2, r2, r4
 80096cc:	d10e      	bne.n	80096ec <__mcmp+0x28>
 80096ce:	f100 0314 	add.w	r3, r0, #20
 80096d2:	3114      	adds	r1, #20
 80096d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096e4:	42a5      	cmp	r5, r4
 80096e6:	d003      	beq.n	80096f0 <__mcmp+0x2c>
 80096e8:	d305      	bcc.n	80096f6 <__mcmp+0x32>
 80096ea:	2201      	movs	r2, #1
 80096ec:	4610      	mov	r0, r2
 80096ee:	bd30      	pop	{r4, r5, pc}
 80096f0:	4283      	cmp	r3, r0
 80096f2:	d3f3      	bcc.n	80096dc <__mcmp+0x18>
 80096f4:	e7fa      	b.n	80096ec <__mcmp+0x28>
 80096f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096fa:	e7f7      	b.n	80096ec <__mcmp+0x28>

080096fc <__mdiff>:
 80096fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	460c      	mov	r4, r1
 8009702:	4606      	mov	r6, r0
 8009704:	4611      	mov	r1, r2
 8009706:	4620      	mov	r0, r4
 8009708:	4690      	mov	r8, r2
 800970a:	f7ff ffdb 	bl	80096c4 <__mcmp>
 800970e:	1e05      	subs	r5, r0, #0
 8009710:	d110      	bne.n	8009734 <__mdiff+0x38>
 8009712:	4629      	mov	r1, r5
 8009714:	4630      	mov	r0, r6
 8009716:	f7ff fd53 	bl	80091c0 <_Balloc>
 800971a:	b930      	cbnz	r0, 800972a <__mdiff+0x2e>
 800971c:	4b3a      	ldr	r3, [pc, #232]	; (8009808 <__mdiff+0x10c>)
 800971e:	4602      	mov	r2, r0
 8009720:	f240 2132 	movw	r1, #562	; 0x232
 8009724:	4839      	ldr	r0, [pc, #228]	; (800980c <__mdiff+0x110>)
 8009726:	f000 f9d5 	bl	8009ad4 <__assert_func>
 800972a:	2301      	movs	r3, #1
 800972c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	bfa4      	itt	ge
 8009736:	4643      	movge	r3, r8
 8009738:	46a0      	movge	r8, r4
 800973a:	4630      	mov	r0, r6
 800973c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009740:	bfa6      	itte	ge
 8009742:	461c      	movge	r4, r3
 8009744:	2500      	movge	r5, #0
 8009746:	2501      	movlt	r5, #1
 8009748:	f7ff fd3a 	bl	80091c0 <_Balloc>
 800974c:	b920      	cbnz	r0, 8009758 <__mdiff+0x5c>
 800974e:	4b2e      	ldr	r3, [pc, #184]	; (8009808 <__mdiff+0x10c>)
 8009750:	4602      	mov	r2, r0
 8009752:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009756:	e7e5      	b.n	8009724 <__mdiff+0x28>
 8009758:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800975c:	6926      	ldr	r6, [r4, #16]
 800975e:	60c5      	str	r5, [r0, #12]
 8009760:	f104 0914 	add.w	r9, r4, #20
 8009764:	f108 0514 	add.w	r5, r8, #20
 8009768:	f100 0e14 	add.w	lr, r0, #20
 800976c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009770:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009774:	f108 0210 	add.w	r2, r8, #16
 8009778:	46f2      	mov	sl, lr
 800977a:	2100      	movs	r1, #0
 800977c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009780:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009784:	fa1f f883 	uxth.w	r8, r3
 8009788:	fa11 f18b 	uxtah	r1, r1, fp
 800978c:	0c1b      	lsrs	r3, r3, #16
 800978e:	eba1 0808 	sub.w	r8, r1, r8
 8009792:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009796:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800979a:	fa1f f888 	uxth.w	r8, r8
 800979e:	1419      	asrs	r1, r3, #16
 80097a0:	454e      	cmp	r6, r9
 80097a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097a6:	f84a 3b04 	str.w	r3, [sl], #4
 80097aa:	d8e7      	bhi.n	800977c <__mdiff+0x80>
 80097ac:	1b33      	subs	r3, r6, r4
 80097ae:	3b15      	subs	r3, #21
 80097b0:	f023 0303 	bic.w	r3, r3, #3
 80097b4:	3304      	adds	r3, #4
 80097b6:	3415      	adds	r4, #21
 80097b8:	42a6      	cmp	r6, r4
 80097ba:	bf38      	it	cc
 80097bc:	2304      	movcc	r3, #4
 80097be:	441d      	add	r5, r3
 80097c0:	4473      	add	r3, lr
 80097c2:	469e      	mov	lr, r3
 80097c4:	462e      	mov	r6, r5
 80097c6:	4566      	cmp	r6, ip
 80097c8:	d30e      	bcc.n	80097e8 <__mdiff+0xec>
 80097ca:	f10c 0203 	add.w	r2, ip, #3
 80097ce:	1b52      	subs	r2, r2, r5
 80097d0:	f022 0203 	bic.w	r2, r2, #3
 80097d4:	3d03      	subs	r5, #3
 80097d6:	45ac      	cmp	ip, r5
 80097d8:	bf38      	it	cc
 80097da:	2200      	movcc	r2, #0
 80097dc:	441a      	add	r2, r3
 80097de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097e2:	b17b      	cbz	r3, 8009804 <__mdiff+0x108>
 80097e4:	6107      	str	r7, [r0, #16]
 80097e6:	e7a3      	b.n	8009730 <__mdiff+0x34>
 80097e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80097ec:	fa11 f288 	uxtah	r2, r1, r8
 80097f0:	1414      	asrs	r4, r2, #16
 80097f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80097f6:	b292      	uxth	r2, r2
 80097f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009800:	1421      	asrs	r1, r4, #16
 8009802:	e7e0      	b.n	80097c6 <__mdiff+0xca>
 8009804:	3f01      	subs	r7, #1
 8009806:	e7ea      	b.n	80097de <__mdiff+0xe2>
 8009808:	0800a737 	.word	0x0800a737
 800980c:	0800a748 	.word	0x0800a748

08009810 <__d2b>:
 8009810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009814:	4689      	mov	r9, r1
 8009816:	2101      	movs	r1, #1
 8009818:	ec57 6b10 	vmov	r6, r7, d0
 800981c:	4690      	mov	r8, r2
 800981e:	f7ff fccf 	bl	80091c0 <_Balloc>
 8009822:	4604      	mov	r4, r0
 8009824:	b930      	cbnz	r0, 8009834 <__d2b+0x24>
 8009826:	4602      	mov	r2, r0
 8009828:	4b25      	ldr	r3, [pc, #148]	; (80098c0 <__d2b+0xb0>)
 800982a:	4826      	ldr	r0, [pc, #152]	; (80098c4 <__d2b+0xb4>)
 800982c:	f240 310a 	movw	r1, #778	; 0x30a
 8009830:	f000 f950 	bl	8009ad4 <__assert_func>
 8009834:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009838:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800983c:	bb35      	cbnz	r5, 800988c <__d2b+0x7c>
 800983e:	2e00      	cmp	r6, #0
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	d028      	beq.n	8009896 <__d2b+0x86>
 8009844:	4668      	mov	r0, sp
 8009846:	9600      	str	r6, [sp, #0]
 8009848:	f7ff fd82 	bl	8009350 <__lo0bits>
 800984c:	9900      	ldr	r1, [sp, #0]
 800984e:	b300      	cbz	r0, 8009892 <__d2b+0x82>
 8009850:	9a01      	ldr	r2, [sp, #4]
 8009852:	f1c0 0320 	rsb	r3, r0, #32
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	430b      	orrs	r3, r1
 800985c:	40c2      	lsrs	r2, r0
 800985e:	6163      	str	r3, [r4, #20]
 8009860:	9201      	str	r2, [sp, #4]
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	61a3      	str	r3, [r4, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	bf14      	ite	ne
 800986a:	2202      	movne	r2, #2
 800986c:	2201      	moveq	r2, #1
 800986e:	6122      	str	r2, [r4, #16]
 8009870:	b1d5      	cbz	r5, 80098a8 <__d2b+0x98>
 8009872:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009876:	4405      	add	r5, r0
 8009878:	f8c9 5000 	str.w	r5, [r9]
 800987c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009880:	f8c8 0000 	str.w	r0, [r8]
 8009884:	4620      	mov	r0, r4
 8009886:	b003      	add	sp, #12
 8009888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800988c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009890:	e7d5      	b.n	800983e <__d2b+0x2e>
 8009892:	6161      	str	r1, [r4, #20]
 8009894:	e7e5      	b.n	8009862 <__d2b+0x52>
 8009896:	a801      	add	r0, sp, #4
 8009898:	f7ff fd5a 	bl	8009350 <__lo0bits>
 800989c:	9b01      	ldr	r3, [sp, #4]
 800989e:	6163      	str	r3, [r4, #20]
 80098a0:	2201      	movs	r2, #1
 80098a2:	6122      	str	r2, [r4, #16]
 80098a4:	3020      	adds	r0, #32
 80098a6:	e7e3      	b.n	8009870 <__d2b+0x60>
 80098a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098b0:	f8c9 0000 	str.w	r0, [r9]
 80098b4:	6918      	ldr	r0, [r3, #16]
 80098b6:	f7ff fd2b 	bl	8009310 <__hi0bits>
 80098ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098be:	e7df      	b.n	8009880 <__d2b+0x70>
 80098c0:	0800a737 	.word	0x0800a737
 80098c4:	0800a748 	.word	0x0800a748

080098c8 <_calloc_r>:
 80098c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098ca:	fba1 2402 	umull	r2, r4, r1, r2
 80098ce:	b94c      	cbnz	r4, 80098e4 <_calloc_r+0x1c>
 80098d0:	4611      	mov	r1, r2
 80098d2:	9201      	str	r2, [sp, #4]
 80098d4:	f000 f87a 	bl	80099cc <_malloc_r>
 80098d8:	9a01      	ldr	r2, [sp, #4]
 80098da:	4605      	mov	r5, r0
 80098dc:	b930      	cbnz	r0, 80098ec <_calloc_r+0x24>
 80098de:	4628      	mov	r0, r5
 80098e0:	b003      	add	sp, #12
 80098e2:	bd30      	pop	{r4, r5, pc}
 80098e4:	220c      	movs	r2, #12
 80098e6:	6002      	str	r2, [r0, #0]
 80098e8:	2500      	movs	r5, #0
 80098ea:	e7f8      	b.n	80098de <_calloc_r+0x16>
 80098ec:	4621      	mov	r1, r4
 80098ee:	f7fe f95f 	bl	8007bb0 <memset>
 80098f2:	e7f4      	b.n	80098de <_calloc_r+0x16>

080098f4 <_free_r>:
 80098f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d044      	beq.n	8009984 <_free_r+0x90>
 80098fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fe:	9001      	str	r0, [sp, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	f1a1 0404 	sub.w	r4, r1, #4
 8009906:	bfb8      	it	lt
 8009908:	18e4      	addlt	r4, r4, r3
 800990a:	f000 f925 	bl	8009b58 <__malloc_lock>
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <_free_r+0x94>)
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x30>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	b003      	add	sp, #12
 800991c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009920:	f000 b920 	b.w	8009b64 <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x46>
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	1961      	adds	r1, r4, r5
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1949      	addeq	r1, r1, r5
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x22>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x50>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x46>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1855      	adds	r5, r2, r1
 8009948:	42a5      	cmp	r5, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x70>
 800994c:	6824      	ldr	r4, [r4, #0]
 800994e:	4421      	add	r1, r4
 8009950:	1854      	adds	r4, r2, r1
 8009952:	42a3      	cmp	r3, r4
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x26>
 8009958:	681c      	ldr	r4, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	6053      	str	r3, [r2, #4]
 800995e:	4421      	add	r1, r4
 8009960:	6011      	str	r1, [r2, #0]
 8009962:	e7da      	b.n	800991a <_free_r+0x26>
 8009964:	d902      	bls.n	800996c <_free_r+0x78>
 8009966:	230c      	movs	r3, #12
 8009968:	6003      	str	r3, [r0, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x26>
 800996c:	6825      	ldr	r5, [r4, #0]
 800996e:	1961      	adds	r1, r4, r5
 8009970:	428b      	cmp	r3, r1
 8009972:	bf04      	itt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	bf04      	itt	eq
 800997c:	1949      	addeq	r1, r1, r5
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	6054      	str	r4, [r2, #4]
 8009982:	e7ca      	b.n	800991a <_free_r+0x26>
 8009984:	b003      	add	sp, #12
 8009986:	bd30      	pop	{r4, r5, pc}
 8009988:	200004bc 	.word	0x200004bc

0800998c <sbrk_aligned>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	4e0e      	ldr	r6, [pc, #56]	; (80099c8 <sbrk_aligned+0x3c>)
 8009990:	460c      	mov	r4, r1
 8009992:	6831      	ldr	r1, [r6, #0]
 8009994:	4605      	mov	r5, r0
 8009996:	b911      	cbnz	r1, 800999e <sbrk_aligned+0x12>
 8009998:	f000 f88c 	bl	8009ab4 <_sbrk_r>
 800999c:	6030      	str	r0, [r6, #0]
 800999e:	4621      	mov	r1, r4
 80099a0:	4628      	mov	r0, r5
 80099a2:	f000 f887 	bl	8009ab4 <_sbrk_r>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	d00a      	beq.n	80099c0 <sbrk_aligned+0x34>
 80099aa:	1cc4      	adds	r4, r0, #3
 80099ac:	f024 0403 	bic.w	r4, r4, #3
 80099b0:	42a0      	cmp	r0, r4
 80099b2:	d007      	beq.n	80099c4 <sbrk_aligned+0x38>
 80099b4:	1a21      	subs	r1, r4, r0
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 f87c 	bl	8009ab4 <_sbrk_r>
 80099bc:	3001      	adds	r0, #1
 80099be:	d101      	bne.n	80099c4 <sbrk_aligned+0x38>
 80099c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80099c4:	4620      	mov	r0, r4
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	200004c0 	.word	0x200004c0

080099cc <_malloc_r>:
 80099cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d0:	1ccd      	adds	r5, r1, #3
 80099d2:	f025 0503 	bic.w	r5, r5, #3
 80099d6:	3508      	adds	r5, #8
 80099d8:	2d0c      	cmp	r5, #12
 80099da:	bf38      	it	cc
 80099dc:	250c      	movcc	r5, #12
 80099de:	2d00      	cmp	r5, #0
 80099e0:	4607      	mov	r7, r0
 80099e2:	db01      	blt.n	80099e8 <_malloc_r+0x1c>
 80099e4:	42a9      	cmp	r1, r5
 80099e6:	d905      	bls.n	80099f4 <_malloc_r+0x28>
 80099e8:	230c      	movs	r3, #12
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	2600      	movs	r6, #0
 80099ee:	4630      	mov	r0, r6
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	4e2e      	ldr	r6, [pc, #184]	; (8009ab0 <_malloc_r+0xe4>)
 80099f6:	f000 f8af 	bl	8009b58 <__malloc_lock>
 80099fa:	6833      	ldr	r3, [r6, #0]
 80099fc:	461c      	mov	r4, r3
 80099fe:	bb34      	cbnz	r4, 8009a4e <_malloc_r+0x82>
 8009a00:	4629      	mov	r1, r5
 8009a02:	4638      	mov	r0, r7
 8009a04:	f7ff ffc2 	bl	800998c <sbrk_aligned>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	d14d      	bne.n	8009aaa <_malloc_r+0xde>
 8009a0e:	6834      	ldr	r4, [r6, #0]
 8009a10:	4626      	mov	r6, r4
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d140      	bne.n	8009a98 <_malloc_r+0xcc>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	eb04 0803 	add.w	r8, r4, r3
 8009a20:	f000 f848 	bl	8009ab4 <_sbrk_r>
 8009a24:	4580      	cmp	r8, r0
 8009a26:	d13a      	bne.n	8009a9e <_malloc_r+0xd2>
 8009a28:	6821      	ldr	r1, [r4, #0]
 8009a2a:	3503      	adds	r5, #3
 8009a2c:	1a6d      	subs	r5, r5, r1
 8009a2e:	f025 0503 	bic.w	r5, r5, #3
 8009a32:	3508      	adds	r5, #8
 8009a34:	2d0c      	cmp	r5, #12
 8009a36:	bf38      	it	cc
 8009a38:	250c      	movcc	r5, #12
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f7ff ffa5 	bl	800998c <sbrk_aligned>
 8009a42:	3001      	adds	r0, #1
 8009a44:	d02b      	beq.n	8009a9e <_malloc_r+0xd2>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	442b      	add	r3, r5
 8009a4a:	6023      	str	r3, [r4, #0]
 8009a4c:	e00e      	b.n	8009a6c <_malloc_r+0xa0>
 8009a4e:	6822      	ldr	r2, [r4, #0]
 8009a50:	1b52      	subs	r2, r2, r5
 8009a52:	d41e      	bmi.n	8009a92 <_malloc_r+0xc6>
 8009a54:	2a0b      	cmp	r2, #11
 8009a56:	d916      	bls.n	8009a86 <_malloc_r+0xba>
 8009a58:	1961      	adds	r1, r4, r5
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	6025      	str	r5, [r4, #0]
 8009a5e:	bf18      	it	ne
 8009a60:	6059      	strne	r1, [r3, #4]
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	bf08      	it	eq
 8009a66:	6031      	streq	r1, [r6, #0]
 8009a68:	5162      	str	r2, [r4, r5]
 8009a6a:	604b      	str	r3, [r1, #4]
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f104 060b 	add.w	r6, r4, #11
 8009a72:	f000 f877 	bl	8009b64 <__malloc_unlock>
 8009a76:	f026 0607 	bic.w	r6, r6, #7
 8009a7a:	1d23      	adds	r3, r4, #4
 8009a7c:	1af2      	subs	r2, r6, r3
 8009a7e:	d0b6      	beq.n	80099ee <_malloc_r+0x22>
 8009a80:	1b9b      	subs	r3, r3, r6
 8009a82:	50a3      	str	r3, [r4, r2]
 8009a84:	e7b3      	b.n	80099ee <_malloc_r+0x22>
 8009a86:	6862      	ldr	r2, [r4, #4]
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	bf0c      	ite	eq
 8009a8c:	6032      	streq	r2, [r6, #0]
 8009a8e:	605a      	strne	r2, [r3, #4]
 8009a90:	e7ec      	b.n	8009a6c <_malloc_r+0xa0>
 8009a92:	4623      	mov	r3, r4
 8009a94:	6864      	ldr	r4, [r4, #4]
 8009a96:	e7b2      	b.n	80099fe <_malloc_r+0x32>
 8009a98:	4634      	mov	r4, r6
 8009a9a:	6876      	ldr	r6, [r6, #4]
 8009a9c:	e7b9      	b.n	8009a12 <_malloc_r+0x46>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	603b      	str	r3, [r7, #0]
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f000 f85e 	bl	8009b64 <__malloc_unlock>
 8009aa8:	e7a1      	b.n	80099ee <_malloc_r+0x22>
 8009aaa:	6025      	str	r5, [r4, #0]
 8009aac:	e7de      	b.n	8009a6c <_malloc_r+0xa0>
 8009aae:	bf00      	nop
 8009ab0:	200004bc 	.word	0x200004bc

08009ab4 <_sbrk_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d06      	ldr	r5, [pc, #24]	; (8009ad0 <_sbrk_r+0x1c>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f7f8 f9e4 	bl	8001e8c <_sbrk>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_sbrk_r+0x1a>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_sbrk_r+0x1a>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	200004c4 	.word	0x200004c4

08009ad4 <__assert_func>:
 8009ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ad6:	4614      	mov	r4, r2
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <__assert_func+0x2c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4605      	mov	r5, r0
 8009ae0:	68d8      	ldr	r0, [r3, #12]
 8009ae2:	b14c      	cbz	r4, 8009af8 <__assert_func+0x24>
 8009ae4:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <__assert_func+0x30>)
 8009ae6:	9100      	str	r1, [sp, #0]
 8009ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009aec:	4906      	ldr	r1, [pc, #24]	; (8009b08 <__assert_func+0x34>)
 8009aee:	462b      	mov	r3, r5
 8009af0:	f000 f80e 	bl	8009b10 <fiprintf>
 8009af4:	f000 fa64 	bl	8009fc0 <abort>
 8009af8:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <__assert_func+0x38>)
 8009afa:	461c      	mov	r4, r3
 8009afc:	e7f3      	b.n	8009ae6 <__assert_func+0x12>
 8009afe:	bf00      	nop
 8009b00:	20000010 	.word	0x20000010
 8009b04:	0800a8a4 	.word	0x0800a8a4
 8009b08:	0800a8b1 	.word	0x0800a8b1
 8009b0c:	0800a8df 	.word	0x0800a8df

08009b10 <fiprintf>:
 8009b10:	b40e      	push	{r1, r2, r3}
 8009b12:	b503      	push	{r0, r1, lr}
 8009b14:	4601      	mov	r1, r0
 8009b16:	ab03      	add	r3, sp, #12
 8009b18:	4805      	ldr	r0, [pc, #20]	; (8009b30 <fiprintf+0x20>)
 8009b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1e:	6800      	ldr	r0, [r0, #0]
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	f000 f84f 	bl	8009bc4 <_vfiprintf_r>
 8009b26:	b002      	add	sp, #8
 8009b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b2c:	b003      	add	sp, #12
 8009b2e:	4770      	bx	lr
 8009b30:	20000010 	.word	0x20000010

08009b34 <__ascii_mbtowc>:
 8009b34:	b082      	sub	sp, #8
 8009b36:	b901      	cbnz	r1, 8009b3a <__ascii_mbtowc+0x6>
 8009b38:	a901      	add	r1, sp, #4
 8009b3a:	b142      	cbz	r2, 8009b4e <__ascii_mbtowc+0x1a>
 8009b3c:	b14b      	cbz	r3, 8009b52 <__ascii_mbtowc+0x1e>
 8009b3e:	7813      	ldrb	r3, [r2, #0]
 8009b40:	600b      	str	r3, [r1, #0]
 8009b42:	7812      	ldrb	r2, [r2, #0]
 8009b44:	1e10      	subs	r0, r2, #0
 8009b46:	bf18      	it	ne
 8009b48:	2001      	movne	r0, #1
 8009b4a:	b002      	add	sp, #8
 8009b4c:	4770      	bx	lr
 8009b4e:	4610      	mov	r0, r2
 8009b50:	e7fb      	b.n	8009b4a <__ascii_mbtowc+0x16>
 8009b52:	f06f 0001 	mvn.w	r0, #1
 8009b56:	e7f8      	b.n	8009b4a <__ascii_mbtowc+0x16>

08009b58 <__malloc_lock>:
 8009b58:	4801      	ldr	r0, [pc, #4]	; (8009b60 <__malloc_lock+0x8>)
 8009b5a:	f000 bbf1 	b.w	800a340 <__retarget_lock_acquire_recursive>
 8009b5e:	bf00      	nop
 8009b60:	200004c8 	.word	0x200004c8

08009b64 <__malloc_unlock>:
 8009b64:	4801      	ldr	r0, [pc, #4]	; (8009b6c <__malloc_unlock+0x8>)
 8009b66:	f000 bbec 	b.w	800a342 <__retarget_lock_release_recursive>
 8009b6a:	bf00      	nop
 8009b6c:	200004c8 	.word	0x200004c8

08009b70 <__sfputc_r>:
 8009b70:	6893      	ldr	r3, [r2, #8]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	b410      	push	{r4}
 8009b78:	6093      	str	r3, [r2, #8]
 8009b7a:	da08      	bge.n	8009b8e <__sfputc_r+0x1e>
 8009b7c:	6994      	ldr	r4, [r2, #24]
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	db01      	blt.n	8009b86 <__sfputc_r+0x16>
 8009b82:	290a      	cmp	r1, #10
 8009b84:	d103      	bne.n	8009b8e <__sfputc_r+0x1e>
 8009b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8a:	f000 b94b 	b.w	8009e24 <__swbuf_r>
 8009b8e:	6813      	ldr	r3, [r2, #0]
 8009b90:	1c58      	adds	r0, r3, #1
 8009b92:	6010      	str	r0, [r2, #0]
 8009b94:	7019      	strb	r1, [r3, #0]
 8009b96:	4608      	mov	r0, r1
 8009b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <__sfputs_r>:
 8009b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	18d5      	adds	r5, r2, r3
 8009ba8:	42ac      	cmp	r4, r5
 8009baa:	d101      	bne.n	8009bb0 <__sfputs_r+0x12>
 8009bac:	2000      	movs	r0, #0
 8009bae:	e007      	b.n	8009bc0 <__sfputs_r+0x22>
 8009bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f7ff ffda 	bl	8009b70 <__sfputc_r>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d1f3      	bne.n	8009ba8 <__sfputs_r+0xa>
 8009bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bc4 <_vfiprintf_r>:
 8009bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	460d      	mov	r5, r1
 8009bca:	b09d      	sub	sp, #116	; 0x74
 8009bcc:	4614      	mov	r4, r2
 8009bce:	4698      	mov	r8, r3
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	b118      	cbz	r0, 8009bdc <_vfiprintf_r+0x18>
 8009bd4:	6983      	ldr	r3, [r0, #24]
 8009bd6:	b90b      	cbnz	r3, 8009bdc <_vfiprintf_r+0x18>
 8009bd8:	f000 fb14 	bl	800a204 <__sinit>
 8009bdc:	4b89      	ldr	r3, [pc, #548]	; (8009e04 <_vfiprintf_r+0x240>)
 8009bde:	429d      	cmp	r5, r3
 8009be0:	d11b      	bne.n	8009c1a <_vfiprintf_r+0x56>
 8009be2:	6875      	ldr	r5, [r6, #4]
 8009be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009be6:	07d9      	lsls	r1, r3, #31
 8009be8:	d405      	bmi.n	8009bf6 <_vfiprintf_r+0x32>
 8009bea:	89ab      	ldrh	r3, [r5, #12]
 8009bec:	059a      	lsls	r2, r3, #22
 8009bee:	d402      	bmi.n	8009bf6 <_vfiprintf_r+0x32>
 8009bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bf2:	f000 fba5 	bl	800a340 <__retarget_lock_acquire_recursive>
 8009bf6:	89ab      	ldrh	r3, [r5, #12]
 8009bf8:	071b      	lsls	r3, r3, #28
 8009bfa:	d501      	bpl.n	8009c00 <_vfiprintf_r+0x3c>
 8009bfc:	692b      	ldr	r3, [r5, #16]
 8009bfe:	b9eb      	cbnz	r3, 8009c3c <_vfiprintf_r+0x78>
 8009c00:	4629      	mov	r1, r5
 8009c02:	4630      	mov	r0, r6
 8009c04:	f000 f96e 	bl	8009ee4 <__swsetup_r>
 8009c08:	b1c0      	cbz	r0, 8009c3c <_vfiprintf_r+0x78>
 8009c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c0c:	07dc      	lsls	r4, r3, #31
 8009c0e:	d50e      	bpl.n	8009c2e <_vfiprintf_r+0x6a>
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c14:	b01d      	add	sp, #116	; 0x74
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	4b7b      	ldr	r3, [pc, #492]	; (8009e08 <_vfiprintf_r+0x244>)
 8009c1c:	429d      	cmp	r5, r3
 8009c1e:	d101      	bne.n	8009c24 <_vfiprintf_r+0x60>
 8009c20:	68b5      	ldr	r5, [r6, #8]
 8009c22:	e7df      	b.n	8009be4 <_vfiprintf_r+0x20>
 8009c24:	4b79      	ldr	r3, [pc, #484]	; (8009e0c <_vfiprintf_r+0x248>)
 8009c26:	429d      	cmp	r5, r3
 8009c28:	bf08      	it	eq
 8009c2a:	68f5      	ldreq	r5, [r6, #12]
 8009c2c:	e7da      	b.n	8009be4 <_vfiprintf_r+0x20>
 8009c2e:	89ab      	ldrh	r3, [r5, #12]
 8009c30:	0598      	lsls	r0, r3, #22
 8009c32:	d4ed      	bmi.n	8009c10 <_vfiprintf_r+0x4c>
 8009c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c36:	f000 fb84 	bl	800a342 <__retarget_lock_release_recursive>
 8009c3a:	e7e9      	b.n	8009c10 <_vfiprintf_r+0x4c>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c40:	2320      	movs	r3, #32
 8009c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c4a:	2330      	movs	r3, #48	; 0x30
 8009c4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e10 <_vfiprintf_r+0x24c>
 8009c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c54:	f04f 0901 	mov.w	r9, #1
 8009c58:	4623      	mov	r3, r4
 8009c5a:	469a      	mov	sl, r3
 8009c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c60:	b10a      	cbz	r2, 8009c66 <_vfiprintf_r+0xa2>
 8009c62:	2a25      	cmp	r2, #37	; 0x25
 8009c64:	d1f9      	bne.n	8009c5a <_vfiprintf_r+0x96>
 8009c66:	ebba 0b04 	subs.w	fp, sl, r4
 8009c6a:	d00b      	beq.n	8009c84 <_vfiprintf_r+0xc0>
 8009c6c:	465b      	mov	r3, fp
 8009c6e:	4622      	mov	r2, r4
 8009c70:	4629      	mov	r1, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7ff ff93 	bl	8009b9e <__sfputs_r>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f000 80aa 	beq.w	8009dd2 <_vfiprintf_r+0x20e>
 8009c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c80:	445a      	add	r2, fp
 8009c82:	9209      	str	r2, [sp, #36]	; 0x24
 8009c84:	f89a 3000 	ldrb.w	r3, [sl]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 80a2 	beq.w	8009dd2 <_vfiprintf_r+0x20e>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c98:	f10a 0a01 	add.w	sl, sl, #1
 8009c9c:	9304      	str	r3, [sp, #16]
 8009c9e:	9307      	str	r3, [sp, #28]
 8009ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ca6:	4654      	mov	r4, sl
 8009ca8:	2205      	movs	r2, #5
 8009caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cae:	4858      	ldr	r0, [pc, #352]	; (8009e10 <_vfiprintf_r+0x24c>)
 8009cb0:	f7f6 fa9e 	bl	80001f0 <memchr>
 8009cb4:	9a04      	ldr	r2, [sp, #16]
 8009cb6:	b9d8      	cbnz	r0, 8009cf0 <_vfiprintf_r+0x12c>
 8009cb8:	06d1      	lsls	r1, r2, #27
 8009cba:	bf44      	itt	mi
 8009cbc:	2320      	movmi	r3, #32
 8009cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc2:	0713      	lsls	r3, r2, #28
 8009cc4:	bf44      	itt	mi
 8009cc6:	232b      	movmi	r3, #43	; 0x2b
 8009cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd2:	d015      	beq.n	8009d00 <_vfiprintf_r+0x13c>
 8009cd4:	9a07      	ldr	r2, [sp, #28]
 8009cd6:	4654      	mov	r4, sl
 8009cd8:	2000      	movs	r0, #0
 8009cda:	f04f 0c0a 	mov.w	ip, #10
 8009cde:	4621      	mov	r1, r4
 8009ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ce4:	3b30      	subs	r3, #48	; 0x30
 8009ce6:	2b09      	cmp	r3, #9
 8009ce8:	d94e      	bls.n	8009d88 <_vfiprintf_r+0x1c4>
 8009cea:	b1b0      	cbz	r0, 8009d1a <_vfiprintf_r+0x156>
 8009cec:	9207      	str	r2, [sp, #28]
 8009cee:	e014      	b.n	8009d1a <_vfiprintf_r+0x156>
 8009cf0:	eba0 0308 	sub.w	r3, r0, r8
 8009cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	46a2      	mov	sl, r4
 8009cfe:	e7d2      	b.n	8009ca6 <_vfiprintf_r+0xe2>
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	1d19      	adds	r1, r3, #4
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	9103      	str	r1, [sp, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bfbb      	ittet	lt
 8009d0c:	425b      	neglt	r3, r3
 8009d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d12:	9307      	strge	r3, [sp, #28]
 8009d14:	9307      	strlt	r3, [sp, #28]
 8009d16:	bfb8      	it	lt
 8009d18:	9204      	strlt	r2, [sp, #16]
 8009d1a:	7823      	ldrb	r3, [r4, #0]
 8009d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d1e:	d10c      	bne.n	8009d3a <_vfiprintf_r+0x176>
 8009d20:	7863      	ldrb	r3, [r4, #1]
 8009d22:	2b2a      	cmp	r3, #42	; 0x2a
 8009d24:	d135      	bne.n	8009d92 <_vfiprintf_r+0x1ce>
 8009d26:	9b03      	ldr	r3, [sp, #12]
 8009d28:	1d1a      	adds	r2, r3, #4
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	9203      	str	r2, [sp, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d36:	3402      	adds	r4, #2
 8009d38:	9305      	str	r3, [sp, #20]
 8009d3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e20 <_vfiprintf_r+0x25c>
 8009d3e:	7821      	ldrb	r1, [r4, #0]
 8009d40:	2203      	movs	r2, #3
 8009d42:	4650      	mov	r0, sl
 8009d44:	f7f6 fa54 	bl	80001f0 <memchr>
 8009d48:	b140      	cbz	r0, 8009d5c <_vfiprintf_r+0x198>
 8009d4a:	2340      	movs	r3, #64	; 0x40
 8009d4c:	eba0 000a 	sub.w	r0, r0, sl
 8009d50:	fa03 f000 	lsl.w	r0, r3, r0
 8009d54:	9b04      	ldr	r3, [sp, #16]
 8009d56:	4303      	orrs	r3, r0
 8009d58:	3401      	adds	r4, #1
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d60:	482c      	ldr	r0, [pc, #176]	; (8009e14 <_vfiprintf_r+0x250>)
 8009d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d66:	2206      	movs	r2, #6
 8009d68:	f7f6 fa42 	bl	80001f0 <memchr>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d03f      	beq.n	8009df0 <_vfiprintf_r+0x22c>
 8009d70:	4b29      	ldr	r3, [pc, #164]	; (8009e18 <_vfiprintf_r+0x254>)
 8009d72:	bb1b      	cbnz	r3, 8009dbc <_vfiprintf_r+0x1f8>
 8009d74:	9b03      	ldr	r3, [sp, #12]
 8009d76:	3307      	adds	r3, #7
 8009d78:	f023 0307 	bic.w	r3, r3, #7
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d82:	443b      	add	r3, r7
 8009d84:	9309      	str	r3, [sp, #36]	; 0x24
 8009d86:	e767      	b.n	8009c58 <_vfiprintf_r+0x94>
 8009d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	2001      	movs	r0, #1
 8009d90:	e7a5      	b.n	8009cde <_vfiprintf_r+0x11a>
 8009d92:	2300      	movs	r3, #0
 8009d94:	3401      	adds	r4, #1
 8009d96:	9305      	str	r3, [sp, #20]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	f04f 0c0a 	mov.w	ip, #10
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009da4:	3a30      	subs	r2, #48	; 0x30
 8009da6:	2a09      	cmp	r2, #9
 8009da8:	d903      	bls.n	8009db2 <_vfiprintf_r+0x1ee>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0c5      	beq.n	8009d3a <_vfiprintf_r+0x176>
 8009dae:	9105      	str	r1, [sp, #20]
 8009db0:	e7c3      	b.n	8009d3a <_vfiprintf_r+0x176>
 8009db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009db6:	4604      	mov	r4, r0
 8009db8:	2301      	movs	r3, #1
 8009dba:	e7f0      	b.n	8009d9e <_vfiprintf_r+0x1da>
 8009dbc:	ab03      	add	r3, sp, #12
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <_vfiprintf_r+0x258>)
 8009dc4:	a904      	add	r1, sp, #16
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7fd ff9a 	bl	8007d00 <_printf_float>
 8009dcc:	4607      	mov	r7, r0
 8009dce:	1c78      	adds	r0, r7, #1
 8009dd0:	d1d6      	bne.n	8009d80 <_vfiprintf_r+0x1bc>
 8009dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd4:	07d9      	lsls	r1, r3, #31
 8009dd6:	d405      	bmi.n	8009de4 <_vfiprintf_r+0x220>
 8009dd8:	89ab      	ldrh	r3, [r5, #12]
 8009dda:	059a      	lsls	r2, r3, #22
 8009ddc:	d402      	bmi.n	8009de4 <_vfiprintf_r+0x220>
 8009dde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009de0:	f000 faaf 	bl	800a342 <__retarget_lock_release_recursive>
 8009de4:	89ab      	ldrh	r3, [r5, #12]
 8009de6:	065b      	lsls	r3, r3, #25
 8009de8:	f53f af12 	bmi.w	8009c10 <_vfiprintf_r+0x4c>
 8009dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dee:	e711      	b.n	8009c14 <_vfiprintf_r+0x50>
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	462a      	mov	r2, r5
 8009df6:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <_vfiprintf_r+0x258>)
 8009df8:	a904      	add	r1, sp, #16
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7fe fa24 	bl	8008248 <_printf_i>
 8009e00:	e7e4      	b.n	8009dcc <_vfiprintf_r+0x208>
 8009e02:	bf00      	nop
 8009e04:	0800aa1c 	.word	0x0800aa1c
 8009e08:	0800aa3c 	.word	0x0800aa3c
 8009e0c:	0800a9fc 	.word	0x0800a9fc
 8009e10:	0800a8ea 	.word	0x0800a8ea
 8009e14:	0800a8f4 	.word	0x0800a8f4
 8009e18:	08007d01 	.word	0x08007d01
 8009e1c:	08009b9f 	.word	0x08009b9f
 8009e20:	0800a8f0 	.word	0x0800a8f0

08009e24 <__swbuf_r>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	460e      	mov	r6, r1
 8009e28:	4614      	mov	r4, r2
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	b118      	cbz	r0, 8009e36 <__swbuf_r+0x12>
 8009e2e:	6983      	ldr	r3, [r0, #24]
 8009e30:	b90b      	cbnz	r3, 8009e36 <__swbuf_r+0x12>
 8009e32:	f000 f9e7 	bl	800a204 <__sinit>
 8009e36:	4b21      	ldr	r3, [pc, #132]	; (8009ebc <__swbuf_r+0x98>)
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	d12b      	bne.n	8009e94 <__swbuf_r+0x70>
 8009e3c:	686c      	ldr	r4, [r5, #4]
 8009e3e:	69a3      	ldr	r3, [r4, #24]
 8009e40:	60a3      	str	r3, [r4, #8]
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	071a      	lsls	r2, r3, #28
 8009e46:	d52f      	bpl.n	8009ea8 <__swbuf_r+0x84>
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	b36b      	cbz	r3, 8009ea8 <__swbuf_r+0x84>
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	6820      	ldr	r0, [r4, #0]
 8009e50:	1ac0      	subs	r0, r0, r3
 8009e52:	6963      	ldr	r3, [r4, #20]
 8009e54:	b2f6      	uxtb	r6, r6
 8009e56:	4283      	cmp	r3, r0
 8009e58:	4637      	mov	r7, r6
 8009e5a:	dc04      	bgt.n	8009e66 <__swbuf_r+0x42>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f93c 	bl	800a0dc <_fflush_r>
 8009e64:	bb30      	cbnz	r0, 8009eb4 <__swbuf_r+0x90>
 8009e66:	68a3      	ldr	r3, [r4, #8]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	60a3      	str	r3, [r4, #8]
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	6022      	str	r2, [r4, #0]
 8009e72:	701e      	strb	r6, [r3, #0]
 8009e74:	6963      	ldr	r3, [r4, #20]
 8009e76:	3001      	adds	r0, #1
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	d004      	beq.n	8009e86 <__swbuf_r+0x62>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	07db      	lsls	r3, r3, #31
 8009e80:	d506      	bpl.n	8009e90 <__swbuf_r+0x6c>
 8009e82:	2e0a      	cmp	r6, #10
 8009e84:	d104      	bne.n	8009e90 <__swbuf_r+0x6c>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f000 f927 	bl	800a0dc <_fflush_r>
 8009e8e:	b988      	cbnz	r0, 8009eb4 <__swbuf_r+0x90>
 8009e90:	4638      	mov	r0, r7
 8009e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <__swbuf_r+0x9c>)
 8009e96:	429c      	cmp	r4, r3
 8009e98:	d101      	bne.n	8009e9e <__swbuf_r+0x7a>
 8009e9a:	68ac      	ldr	r4, [r5, #8]
 8009e9c:	e7cf      	b.n	8009e3e <__swbuf_r+0x1a>
 8009e9e:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <__swbuf_r+0xa0>)
 8009ea0:	429c      	cmp	r4, r3
 8009ea2:	bf08      	it	eq
 8009ea4:	68ec      	ldreq	r4, [r5, #12]
 8009ea6:	e7ca      	b.n	8009e3e <__swbuf_r+0x1a>
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f000 f81a 	bl	8009ee4 <__swsetup_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d0cb      	beq.n	8009e4c <__swbuf_r+0x28>
 8009eb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009eb8:	e7ea      	b.n	8009e90 <__swbuf_r+0x6c>
 8009eba:	bf00      	nop
 8009ebc:	0800aa1c 	.word	0x0800aa1c
 8009ec0:	0800aa3c 	.word	0x0800aa3c
 8009ec4:	0800a9fc 	.word	0x0800a9fc

08009ec8 <__ascii_wctomb>:
 8009ec8:	b149      	cbz	r1, 8009ede <__ascii_wctomb+0x16>
 8009eca:	2aff      	cmp	r2, #255	; 0xff
 8009ecc:	bf85      	ittet	hi
 8009ece:	238a      	movhi	r3, #138	; 0x8a
 8009ed0:	6003      	strhi	r3, [r0, #0]
 8009ed2:	700a      	strbls	r2, [r1, #0]
 8009ed4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ed8:	bf98      	it	ls
 8009eda:	2001      	movls	r0, #1
 8009edc:	4770      	bx	lr
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4770      	bx	lr
	...

08009ee4 <__swsetup_r>:
 8009ee4:	4b32      	ldr	r3, [pc, #200]	; (8009fb0 <__swsetup_r+0xcc>)
 8009ee6:	b570      	push	{r4, r5, r6, lr}
 8009ee8:	681d      	ldr	r5, [r3, #0]
 8009eea:	4606      	mov	r6, r0
 8009eec:	460c      	mov	r4, r1
 8009eee:	b125      	cbz	r5, 8009efa <__swsetup_r+0x16>
 8009ef0:	69ab      	ldr	r3, [r5, #24]
 8009ef2:	b913      	cbnz	r3, 8009efa <__swsetup_r+0x16>
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f000 f985 	bl	800a204 <__sinit>
 8009efa:	4b2e      	ldr	r3, [pc, #184]	; (8009fb4 <__swsetup_r+0xd0>)
 8009efc:	429c      	cmp	r4, r3
 8009efe:	d10f      	bne.n	8009f20 <__swsetup_r+0x3c>
 8009f00:	686c      	ldr	r4, [r5, #4]
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f08:	0719      	lsls	r1, r3, #28
 8009f0a:	d42c      	bmi.n	8009f66 <__swsetup_r+0x82>
 8009f0c:	06dd      	lsls	r5, r3, #27
 8009f0e:	d411      	bmi.n	8009f34 <__swsetup_r+0x50>
 8009f10:	2309      	movs	r3, #9
 8009f12:	6033      	str	r3, [r6, #0]
 8009f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f1e:	e03e      	b.n	8009f9e <__swsetup_r+0xba>
 8009f20:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <__swsetup_r+0xd4>)
 8009f22:	429c      	cmp	r4, r3
 8009f24:	d101      	bne.n	8009f2a <__swsetup_r+0x46>
 8009f26:	68ac      	ldr	r4, [r5, #8]
 8009f28:	e7eb      	b.n	8009f02 <__swsetup_r+0x1e>
 8009f2a:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <__swsetup_r+0xd8>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	bf08      	it	eq
 8009f30:	68ec      	ldreq	r4, [r5, #12]
 8009f32:	e7e6      	b.n	8009f02 <__swsetup_r+0x1e>
 8009f34:	0758      	lsls	r0, r3, #29
 8009f36:	d512      	bpl.n	8009f5e <__swsetup_r+0x7a>
 8009f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f3a:	b141      	cbz	r1, 8009f4e <__swsetup_r+0x6a>
 8009f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f40:	4299      	cmp	r1, r3
 8009f42:	d002      	beq.n	8009f4a <__swsetup_r+0x66>
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff fcd5 	bl	80098f4 <_free_r>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	2300      	movs	r3, #0
 8009f58:	6063      	str	r3, [r4, #4]
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f043 0308 	orr.w	r3, r3, #8
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	b94b      	cbnz	r3, 8009f7e <__swsetup_r+0x9a>
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f74:	d003      	beq.n	8009f7e <__swsetup_r+0x9a>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 fa09 	bl	800a390 <__smakebuf_r>
 8009f7e:	89a0      	ldrh	r0, [r4, #12]
 8009f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f84:	f010 0301 	ands.w	r3, r0, #1
 8009f88:	d00a      	beq.n	8009fa0 <__swsetup_r+0xbc>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60a3      	str	r3, [r4, #8]
 8009f8e:	6963      	ldr	r3, [r4, #20]
 8009f90:	425b      	negs	r3, r3
 8009f92:	61a3      	str	r3, [r4, #24]
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	b943      	cbnz	r3, 8009faa <__swsetup_r+0xc6>
 8009f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f9c:	d1ba      	bne.n	8009f14 <__swsetup_r+0x30>
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	0781      	lsls	r1, r0, #30
 8009fa2:	bf58      	it	pl
 8009fa4:	6963      	ldrpl	r3, [r4, #20]
 8009fa6:	60a3      	str	r3, [r4, #8]
 8009fa8:	e7f4      	b.n	8009f94 <__swsetup_r+0xb0>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e7f7      	b.n	8009f9e <__swsetup_r+0xba>
 8009fae:	bf00      	nop
 8009fb0:	20000010 	.word	0x20000010
 8009fb4:	0800aa1c 	.word	0x0800aa1c
 8009fb8:	0800aa3c 	.word	0x0800aa3c
 8009fbc:	0800a9fc 	.word	0x0800a9fc

08009fc0 <abort>:
 8009fc0:	b508      	push	{r3, lr}
 8009fc2:	2006      	movs	r0, #6
 8009fc4:	f000 fa4c 	bl	800a460 <raise>
 8009fc8:	2001      	movs	r0, #1
 8009fca:	f7f7 fee7 	bl	8001d9c <_exit>
	...

08009fd0 <__sflush_r>:
 8009fd0:	898a      	ldrh	r2, [r1, #12]
 8009fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	0710      	lsls	r0, r2, #28
 8009fda:	460c      	mov	r4, r1
 8009fdc:	d458      	bmi.n	800a090 <__sflush_r+0xc0>
 8009fde:	684b      	ldr	r3, [r1, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	dc05      	bgt.n	8009ff0 <__sflush_r+0x20>
 8009fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dc02      	bgt.n	8009ff0 <__sflush_r+0x20>
 8009fea:	2000      	movs	r0, #0
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ff2:	2e00      	cmp	r6, #0
 8009ff4:	d0f9      	beq.n	8009fea <__sflush_r+0x1a>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ffc:	682f      	ldr	r7, [r5, #0]
 8009ffe:	602b      	str	r3, [r5, #0]
 800a000:	d032      	beq.n	800a068 <__sflush_r+0x98>
 800a002:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	075a      	lsls	r2, r3, #29
 800a008:	d505      	bpl.n	800a016 <__sflush_r+0x46>
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	1ac0      	subs	r0, r0, r3
 800a00e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a010:	b10b      	cbz	r3, 800a016 <__sflush_r+0x46>
 800a012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a014:	1ac0      	subs	r0, r0, r3
 800a016:	2300      	movs	r3, #0
 800a018:	4602      	mov	r2, r0
 800a01a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a01c:	6a21      	ldr	r1, [r4, #32]
 800a01e:	4628      	mov	r0, r5
 800a020:	47b0      	blx	r6
 800a022:	1c43      	adds	r3, r0, #1
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	d106      	bne.n	800a036 <__sflush_r+0x66>
 800a028:	6829      	ldr	r1, [r5, #0]
 800a02a:	291d      	cmp	r1, #29
 800a02c:	d82c      	bhi.n	800a088 <__sflush_r+0xb8>
 800a02e:	4a2a      	ldr	r2, [pc, #168]	; (800a0d8 <__sflush_r+0x108>)
 800a030:	40ca      	lsrs	r2, r1
 800a032:	07d6      	lsls	r6, r2, #31
 800a034:	d528      	bpl.n	800a088 <__sflush_r+0xb8>
 800a036:	2200      	movs	r2, #0
 800a038:	6062      	str	r2, [r4, #4]
 800a03a:	04d9      	lsls	r1, r3, #19
 800a03c:	6922      	ldr	r2, [r4, #16]
 800a03e:	6022      	str	r2, [r4, #0]
 800a040:	d504      	bpl.n	800a04c <__sflush_r+0x7c>
 800a042:	1c42      	adds	r2, r0, #1
 800a044:	d101      	bne.n	800a04a <__sflush_r+0x7a>
 800a046:	682b      	ldr	r3, [r5, #0]
 800a048:	b903      	cbnz	r3, 800a04c <__sflush_r+0x7c>
 800a04a:	6560      	str	r0, [r4, #84]	; 0x54
 800a04c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a04e:	602f      	str	r7, [r5, #0]
 800a050:	2900      	cmp	r1, #0
 800a052:	d0ca      	beq.n	8009fea <__sflush_r+0x1a>
 800a054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a058:	4299      	cmp	r1, r3
 800a05a:	d002      	beq.n	800a062 <__sflush_r+0x92>
 800a05c:	4628      	mov	r0, r5
 800a05e:	f7ff fc49 	bl	80098f4 <_free_r>
 800a062:	2000      	movs	r0, #0
 800a064:	6360      	str	r0, [r4, #52]	; 0x34
 800a066:	e7c1      	b.n	8009fec <__sflush_r+0x1c>
 800a068:	6a21      	ldr	r1, [r4, #32]
 800a06a:	2301      	movs	r3, #1
 800a06c:	4628      	mov	r0, r5
 800a06e:	47b0      	blx	r6
 800a070:	1c41      	adds	r1, r0, #1
 800a072:	d1c7      	bne.n	800a004 <__sflush_r+0x34>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0c4      	beq.n	800a004 <__sflush_r+0x34>
 800a07a:	2b1d      	cmp	r3, #29
 800a07c:	d001      	beq.n	800a082 <__sflush_r+0xb2>
 800a07e:	2b16      	cmp	r3, #22
 800a080:	d101      	bne.n	800a086 <__sflush_r+0xb6>
 800a082:	602f      	str	r7, [r5, #0]
 800a084:	e7b1      	b.n	8009fea <__sflush_r+0x1a>
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	e7ad      	b.n	8009fec <__sflush_r+0x1c>
 800a090:	690f      	ldr	r7, [r1, #16]
 800a092:	2f00      	cmp	r7, #0
 800a094:	d0a9      	beq.n	8009fea <__sflush_r+0x1a>
 800a096:	0793      	lsls	r3, r2, #30
 800a098:	680e      	ldr	r6, [r1, #0]
 800a09a:	bf08      	it	eq
 800a09c:	694b      	ldreq	r3, [r1, #20]
 800a09e:	600f      	str	r7, [r1, #0]
 800a0a0:	bf18      	it	ne
 800a0a2:	2300      	movne	r3, #0
 800a0a4:	eba6 0807 	sub.w	r8, r6, r7
 800a0a8:	608b      	str	r3, [r1, #8]
 800a0aa:	f1b8 0f00 	cmp.w	r8, #0
 800a0ae:	dd9c      	ble.n	8009fea <__sflush_r+0x1a>
 800a0b0:	6a21      	ldr	r1, [r4, #32]
 800a0b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0b4:	4643      	mov	r3, r8
 800a0b6:	463a      	mov	r2, r7
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	47b0      	blx	r6
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	dc06      	bgt.n	800a0ce <__sflush_r+0xfe>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0cc:	e78e      	b.n	8009fec <__sflush_r+0x1c>
 800a0ce:	4407      	add	r7, r0
 800a0d0:	eba8 0800 	sub.w	r8, r8, r0
 800a0d4:	e7e9      	b.n	800a0aa <__sflush_r+0xda>
 800a0d6:	bf00      	nop
 800a0d8:	20400001 	.word	0x20400001

0800a0dc <_fflush_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	690b      	ldr	r3, [r1, #16]
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	b913      	cbnz	r3, 800a0ec <_fflush_r+0x10>
 800a0e6:	2500      	movs	r5, #0
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	b118      	cbz	r0, 800a0f6 <_fflush_r+0x1a>
 800a0ee:	6983      	ldr	r3, [r0, #24]
 800a0f0:	b90b      	cbnz	r3, 800a0f6 <_fflush_r+0x1a>
 800a0f2:	f000 f887 	bl	800a204 <__sinit>
 800a0f6:	4b14      	ldr	r3, [pc, #80]	; (800a148 <_fflush_r+0x6c>)
 800a0f8:	429c      	cmp	r4, r3
 800a0fa:	d11b      	bne.n	800a134 <_fflush_r+0x58>
 800a0fc:	686c      	ldr	r4, [r5, #4]
 800a0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0ef      	beq.n	800a0e6 <_fflush_r+0xa>
 800a106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a108:	07d0      	lsls	r0, r2, #31
 800a10a:	d404      	bmi.n	800a116 <_fflush_r+0x3a>
 800a10c:	0599      	lsls	r1, r3, #22
 800a10e:	d402      	bmi.n	800a116 <_fflush_r+0x3a>
 800a110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a112:	f000 f915 	bl	800a340 <__retarget_lock_acquire_recursive>
 800a116:	4628      	mov	r0, r5
 800a118:	4621      	mov	r1, r4
 800a11a:	f7ff ff59 	bl	8009fd0 <__sflush_r>
 800a11e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a120:	07da      	lsls	r2, r3, #31
 800a122:	4605      	mov	r5, r0
 800a124:	d4e0      	bmi.n	800a0e8 <_fflush_r+0xc>
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	059b      	lsls	r3, r3, #22
 800a12a:	d4dd      	bmi.n	800a0e8 <_fflush_r+0xc>
 800a12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a12e:	f000 f908 	bl	800a342 <__retarget_lock_release_recursive>
 800a132:	e7d9      	b.n	800a0e8 <_fflush_r+0xc>
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <_fflush_r+0x70>)
 800a136:	429c      	cmp	r4, r3
 800a138:	d101      	bne.n	800a13e <_fflush_r+0x62>
 800a13a:	68ac      	ldr	r4, [r5, #8]
 800a13c:	e7df      	b.n	800a0fe <_fflush_r+0x22>
 800a13e:	4b04      	ldr	r3, [pc, #16]	; (800a150 <_fflush_r+0x74>)
 800a140:	429c      	cmp	r4, r3
 800a142:	bf08      	it	eq
 800a144:	68ec      	ldreq	r4, [r5, #12]
 800a146:	e7da      	b.n	800a0fe <_fflush_r+0x22>
 800a148:	0800aa1c 	.word	0x0800aa1c
 800a14c:	0800aa3c 	.word	0x0800aa3c
 800a150:	0800a9fc 	.word	0x0800a9fc

0800a154 <std>:
 800a154:	2300      	movs	r3, #0
 800a156:	b510      	push	{r4, lr}
 800a158:	4604      	mov	r4, r0
 800a15a:	e9c0 3300 	strd	r3, r3, [r0]
 800a15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a162:	6083      	str	r3, [r0, #8]
 800a164:	8181      	strh	r1, [r0, #12]
 800a166:	6643      	str	r3, [r0, #100]	; 0x64
 800a168:	81c2      	strh	r2, [r0, #14]
 800a16a:	6183      	str	r3, [r0, #24]
 800a16c:	4619      	mov	r1, r3
 800a16e:	2208      	movs	r2, #8
 800a170:	305c      	adds	r0, #92	; 0x5c
 800a172:	f7fd fd1d 	bl	8007bb0 <memset>
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <std+0x38>)
 800a178:	6263      	str	r3, [r4, #36]	; 0x24
 800a17a:	4b05      	ldr	r3, [pc, #20]	; (800a190 <std+0x3c>)
 800a17c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <std+0x40>)
 800a180:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a182:	4b05      	ldr	r3, [pc, #20]	; (800a198 <std+0x44>)
 800a184:	6224      	str	r4, [r4, #32]
 800a186:	6323      	str	r3, [r4, #48]	; 0x30
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	bf00      	nop
 800a18c:	0800a499 	.word	0x0800a499
 800a190:	0800a4bb 	.word	0x0800a4bb
 800a194:	0800a4f3 	.word	0x0800a4f3
 800a198:	0800a517 	.word	0x0800a517

0800a19c <_cleanup_r>:
 800a19c:	4901      	ldr	r1, [pc, #4]	; (800a1a4 <_cleanup_r+0x8>)
 800a19e:	f000 b8af 	b.w	800a300 <_fwalk_reent>
 800a1a2:	bf00      	nop
 800a1a4:	0800a0dd 	.word	0x0800a0dd

0800a1a8 <__sfmoreglue>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	2268      	movs	r2, #104	; 0x68
 800a1ac:	1e4d      	subs	r5, r1, #1
 800a1ae:	4355      	muls	r5, r2
 800a1b0:	460e      	mov	r6, r1
 800a1b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1b6:	f7ff fc09 	bl	80099cc <_malloc_r>
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	b140      	cbz	r0, 800a1d0 <__sfmoreglue+0x28>
 800a1be:	2100      	movs	r1, #0
 800a1c0:	e9c0 1600 	strd	r1, r6, [r0]
 800a1c4:	300c      	adds	r0, #12
 800a1c6:	60a0      	str	r0, [r4, #8]
 800a1c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1cc:	f7fd fcf0 	bl	8007bb0 <memset>
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}

0800a1d4 <__sfp_lock_acquire>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__sfp_lock_acquire+0x8>)
 800a1d6:	f000 b8b3 	b.w	800a340 <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	200004c9 	.word	0x200004c9

0800a1e0 <__sfp_lock_release>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__sfp_lock_release+0x8>)
 800a1e2:	f000 b8ae 	b.w	800a342 <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	200004c9 	.word	0x200004c9

0800a1ec <__sinit_lock_acquire>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	; (800a1f4 <__sinit_lock_acquire+0x8>)
 800a1ee:	f000 b8a7 	b.w	800a340 <__retarget_lock_acquire_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	200004ca 	.word	0x200004ca

0800a1f8 <__sinit_lock_release>:
 800a1f8:	4801      	ldr	r0, [pc, #4]	; (800a200 <__sinit_lock_release+0x8>)
 800a1fa:	f000 b8a2 	b.w	800a342 <__retarget_lock_release_recursive>
 800a1fe:	bf00      	nop
 800a200:	200004ca 	.word	0x200004ca

0800a204 <__sinit>:
 800a204:	b510      	push	{r4, lr}
 800a206:	4604      	mov	r4, r0
 800a208:	f7ff fff0 	bl	800a1ec <__sinit_lock_acquire>
 800a20c:	69a3      	ldr	r3, [r4, #24]
 800a20e:	b11b      	cbz	r3, 800a218 <__sinit+0x14>
 800a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a214:	f7ff bff0 	b.w	800a1f8 <__sinit_lock_release>
 800a218:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a21c:	6523      	str	r3, [r4, #80]	; 0x50
 800a21e:	4b13      	ldr	r3, [pc, #76]	; (800a26c <__sinit+0x68>)
 800a220:	4a13      	ldr	r2, [pc, #76]	; (800a270 <__sinit+0x6c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	62a2      	str	r2, [r4, #40]	; 0x28
 800a226:	42a3      	cmp	r3, r4
 800a228:	bf04      	itt	eq
 800a22a:	2301      	moveq	r3, #1
 800a22c:	61a3      	streq	r3, [r4, #24]
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f820 	bl	800a274 <__sfp>
 800a234:	6060      	str	r0, [r4, #4]
 800a236:	4620      	mov	r0, r4
 800a238:	f000 f81c 	bl	800a274 <__sfp>
 800a23c:	60a0      	str	r0, [r4, #8]
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 f818 	bl	800a274 <__sfp>
 800a244:	2200      	movs	r2, #0
 800a246:	60e0      	str	r0, [r4, #12]
 800a248:	2104      	movs	r1, #4
 800a24a:	6860      	ldr	r0, [r4, #4]
 800a24c:	f7ff ff82 	bl	800a154 <std>
 800a250:	68a0      	ldr	r0, [r4, #8]
 800a252:	2201      	movs	r2, #1
 800a254:	2109      	movs	r1, #9
 800a256:	f7ff ff7d 	bl	800a154 <std>
 800a25a:	68e0      	ldr	r0, [r4, #12]
 800a25c:	2202      	movs	r2, #2
 800a25e:	2112      	movs	r1, #18
 800a260:	f7ff ff78 	bl	800a154 <std>
 800a264:	2301      	movs	r3, #1
 800a266:	61a3      	str	r3, [r4, #24]
 800a268:	e7d2      	b.n	800a210 <__sinit+0xc>
 800a26a:	bf00      	nop
 800a26c:	0800a680 	.word	0x0800a680
 800a270:	0800a19d 	.word	0x0800a19d

0800a274 <__sfp>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	4607      	mov	r7, r0
 800a278:	f7ff ffac 	bl	800a1d4 <__sfp_lock_acquire>
 800a27c:	4b1e      	ldr	r3, [pc, #120]	; (800a2f8 <__sfp+0x84>)
 800a27e:	681e      	ldr	r6, [r3, #0]
 800a280:	69b3      	ldr	r3, [r6, #24]
 800a282:	b913      	cbnz	r3, 800a28a <__sfp+0x16>
 800a284:	4630      	mov	r0, r6
 800a286:	f7ff ffbd 	bl	800a204 <__sinit>
 800a28a:	3648      	adds	r6, #72	; 0x48
 800a28c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a290:	3b01      	subs	r3, #1
 800a292:	d503      	bpl.n	800a29c <__sfp+0x28>
 800a294:	6833      	ldr	r3, [r6, #0]
 800a296:	b30b      	cbz	r3, 800a2dc <__sfp+0x68>
 800a298:	6836      	ldr	r6, [r6, #0]
 800a29a:	e7f7      	b.n	800a28c <__sfp+0x18>
 800a29c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2a0:	b9d5      	cbnz	r5, 800a2d8 <__sfp+0x64>
 800a2a2:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <__sfp+0x88>)
 800a2a4:	60e3      	str	r3, [r4, #12]
 800a2a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2aa:	6665      	str	r5, [r4, #100]	; 0x64
 800a2ac:	f000 f847 	bl	800a33e <__retarget_lock_init_recursive>
 800a2b0:	f7ff ff96 	bl	800a1e0 <__sfp_lock_release>
 800a2b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2bc:	6025      	str	r5, [r4, #0]
 800a2be:	61a5      	str	r5, [r4, #24]
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2c8:	f7fd fc72 	bl	8007bb0 <memset>
 800a2cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d8:	3468      	adds	r4, #104	; 0x68
 800a2da:	e7d9      	b.n	800a290 <__sfp+0x1c>
 800a2dc:	2104      	movs	r1, #4
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f7ff ff62 	bl	800a1a8 <__sfmoreglue>
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	6030      	str	r0, [r6, #0]
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d1d5      	bne.n	800a298 <__sfp+0x24>
 800a2ec:	f7ff ff78 	bl	800a1e0 <__sfp_lock_release>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	e7ee      	b.n	800a2d4 <__sfp+0x60>
 800a2f6:	bf00      	nop
 800a2f8:	0800a680 	.word	0x0800a680
 800a2fc:	ffff0001 	.word	0xffff0001

0800a300 <_fwalk_reent>:
 800a300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a304:	4606      	mov	r6, r0
 800a306:	4688      	mov	r8, r1
 800a308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a30c:	2700      	movs	r7, #0
 800a30e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a312:	f1b9 0901 	subs.w	r9, r9, #1
 800a316:	d505      	bpl.n	800a324 <_fwalk_reent+0x24>
 800a318:	6824      	ldr	r4, [r4, #0]
 800a31a:	2c00      	cmp	r4, #0
 800a31c:	d1f7      	bne.n	800a30e <_fwalk_reent+0xe>
 800a31e:	4638      	mov	r0, r7
 800a320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a324:	89ab      	ldrh	r3, [r5, #12]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d907      	bls.n	800a33a <_fwalk_reent+0x3a>
 800a32a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a32e:	3301      	adds	r3, #1
 800a330:	d003      	beq.n	800a33a <_fwalk_reent+0x3a>
 800a332:	4629      	mov	r1, r5
 800a334:	4630      	mov	r0, r6
 800a336:	47c0      	blx	r8
 800a338:	4307      	orrs	r7, r0
 800a33a:	3568      	adds	r5, #104	; 0x68
 800a33c:	e7e9      	b.n	800a312 <_fwalk_reent+0x12>

0800a33e <__retarget_lock_init_recursive>:
 800a33e:	4770      	bx	lr

0800a340 <__retarget_lock_acquire_recursive>:
 800a340:	4770      	bx	lr

0800a342 <__retarget_lock_release_recursive>:
 800a342:	4770      	bx	lr

0800a344 <__swhatbuf_r>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	460e      	mov	r6, r1
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	2900      	cmp	r1, #0
 800a34e:	b096      	sub	sp, #88	; 0x58
 800a350:	4614      	mov	r4, r2
 800a352:	461d      	mov	r5, r3
 800a354:	da08      	bge.n	800a368 <__swhatbuf_r+0x24>
 800a356:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	061a      	lsls	r2, r3, #24
 800a360:	d410      	bmi.n	800a384 <__swhatbuf_r+0x40>
 800a362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a366:	e00e      	b.n	800a386 <__swhatbuf_r+0x42>
 800a368:	466a      	mov	r2, sp
 800a36a:	f000 f8fb 	bl	800a564 <_fstat_r>
 800a36e:	2800      	cmp	r0, #0
 800a370:	dbf1      	blt.n	800a356 <__swhatbuf_r+0x12>
 800a372:	9a01      	ldr	r2, [sp, #4]
 800a374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a37c:	425a      	negs	r2, r3
 800a37e:	415a      	adcs	r2, r3
 800a380:	602a      	str	r2, [r5, #0]
 800a382:	e7ee      	b.n	800a362 <__swhatbuf_r+0x1e>
 800a384:	2340      	movs	r3, #64	; 0x40
 800a386:	2000      	movs	r0, #0
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	b016      	add	sp, #88	; 0x58
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a390 <__smakebuf_r>:
 800a390:	898b      	ldrh	r3, [r1, #12]
 800a392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a394:	079d      	lsls	r5, r3, #30
 800a396:	4606      	mov	r6, r0
 800a398:	460c      	mov	r4, r1
 800a39a:	d507      	bpl.n	800a3ac <__smakebuf_r+0x1c>
 800a39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	6123      	str	r3, [r4, #16]
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	6163      	str	r3, [r4, #20]
 800a3a8:	b002      	add	sp, #8
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	ab01      	add	r3, sp, #4
 800a3ae:	466a      	mov	r2, sp
 800a3b0:	f7ff ffc8 	bl	800a344 <__swhatbuf_r>
 800a3b4:	9900      	ldr	r1, [sp, #0]
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff fb07 	bl	80099cc <_malloc_r>
 800a3be:	b948      	cbnz	r0, 800a3d4 <__smakebuf_r+0x44>
 800a3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3c4:	059a      	lsls	r2, r3, #22
 800a3c6:	d4ef      	bmi.n	800a3a8 <__smakebuf_r+0x18>
 800a3c8:	f023 0303 	bic.w	r3, r3, #3
 800a3cc:	f043 0302 	orr.w	r3, r3, #2
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	e7e3      	b.n	800a39c <__smakebuf_r+0xc>
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <__smakebuf_r+0x7c>)
 800a3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	6020      	str	r0, [r4, #0]
 800a3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	9b00      	ldr	r3, [sp, #0]
 800a3e4:	6163      	str	r3, [r4, #20]
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	6120      	str	r0, [r4, #16]
 800a3ea:	b15b      	cbz	r3, 800a404 <__smakebuf_r+0x74>
 800a3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f000 f8c9 	bl	800a588 <_isatty_r>
 800a3f6:	b128      	cbz	r0, 800a404 <__smakebuf_r+0x74>
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	f023 0303 	bic.w	r3, r3, #3
 800a3fe:	f043 0301 	orr.w	r3, r3, #1
 800a402:	81a3      	strh	r3, [r4, #12]
 800a404:	89a0      	ldrh	r0, [r4, #12]
 800a406:	4305      	orrs	r5, r0
 800a408:	81a5      	strh	r5, [r4, #12]
 800a40a:	e7cd      	b.n	800a3a8 <__smakebuf_r+0x18>
 800a40c:	0800a19d 	.word	0x0800a19d

0800a410 <_raise_r>:
 800a410:	291f      	cmp	r1, #31
 800a412:	b538      	push	{r3, r4, r5, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	460d      	mov	r5, r1
 800a418:	d904      	bls.n	800a424 <_raise_r+0x14>
 800a41a:	2316      	movs	r3, #22
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a426:	b112      	cbz	r2, 800a42e <_raise_r+0x1e>
 800a428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a42c:	b94b      	cbnz	r3, 800a442 <_raise_r+0x32>
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 f830 	bl	800a494 <_getpid_r>
 800a434:	462a      	mov	r2, r5
 800a436:	4601      	mov	r1, r0
 800a438:	4620      	mov	r0, r4
 800a43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a43e:	f000 b817 	b.w	800a470 <_kill_r>
 800a442:	2b01      	cmp	r3, #1
 800a444:	d00a      	beq.n	800a45c <_raise_r+0x4c>
 800a446:	1c59      	adds	r1, r3, #1
 800a448:	d103      	bne.n	800a452 <_raise_r+0x42>
 800a44a:	2316      	movs	r3, #22
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	2001      	movs	r0, #1
 800a450:	e7e7      	b.n	800a422 <_raise_r+0x12>
 800a452:	2400      	movs	r4, #0
 800a454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a458:	4628      	mov	r0, r5
 800a45a:	4798      	blx	r3
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7e0      	b.n	800a422 <_raise_r+0x12>

0800a460 <raise>:
 800a460:	4b02      	ldr	r3, [pc, #8]	; (800a46c <raise+0xc>)
 800a462:	4601      	mov	r1, r0
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	f7ff bfd3 	b.w	800a410 <_raise_r>
 800a46a:	bf00      	nop
 800a46c:	20000010 	.word	0x20000010

0800a470 <_kill_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d07      	ldr	r5, [pc, #28]	; (800a490 <_kill_r+0x20>)
 800a474:	2300      	movs	r3, #0
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	4611      	mov	r1, r2
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	f7f7 fc7d 	bl	8001d7c <_kill>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d102      	bne.n	800a48c <_kill_r+0x1c>
 800a486:	682b      	ldr	r3, [r5, #0]
 800a488:	b103      	cbz	r3, 800a48c <_kill_r+0x1c>
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	bd38      	pop	{r3, r4, r5, pc}
 800a48e:	bf00      	nop
 800a490:	200004c4 	.word	0x200004c4

0800a494 <_getpid_r>:
 800a494:	f7f7 bc6a 	b.w	8001d6c <_getpid>

0800a498 <__sread>:
 800a498:	b510      	push	{r4, lr}
 800a49a:	460c      	mov	r4, r1
 800a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a0:	f000 f894 	bl	800a5cc <_read_r>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	bfab      	itete	ge
 800a4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a4ac:	181b      	addge	r3, r3, r0
 800a4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4b2:	bfac      	ite	ge
 800a4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4b6:	81a3      	strhlt	r3, [r4, #12]
 800a4b8:	bd10      	pop	{r4, pc}

0800a4ba <__swrite>:
 800a4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4be:	461f      	mov	r7, r3
 800a4c0:	898b      	ldrh	r3, [r1, #12]
 800a4c2:	05db      	lsls	r3, r3, #23
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	d505      	bpl.n	800a4d8 <__swrite+0x1e>
 800a4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f000 f868 	bl	800a5a8 <_lseek_r>
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ee:	f000 b817 	b.w	800a520 <_write_r>

0800a4f2 <__sseek>:
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fa:	f000 f855 	bl	800a5a8 <_lseek_r>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	bf15      	itete	ne
 800a504:	6560      	strne	r0, [r4, #84]	; 0x54
 800a506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a50e:	81a3      	strheq	r3, [r4, #12]
 800a510:	bf18      	it	ne
 800a512:	81a3      	strhne	r3, [r4, #12]
 800a514:	bd10      	pop	{r4, pc}

0800a516 <__sclose>:
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 b813 	b.w	800a544 <_close_r>
	...

0800a520 <_write_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d07      	ldr	r5, [pc, #28]	; (800a540 <_write_r+0x20>)
 800a524:	4604      	mov	r4, r0
 800a526:	4608      	mov	r0, r1
 800a528:	4611      	mov	r1, r2
 800a52a:	2200      	movs	r2, #0
 800a52c:	602a      	str	r2, [r5, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	f7f7 fc5b 	bl	8001dea <_write>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d102      	bne.n	800a53e <_write_r+0x1e>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	b103      	cbz	r3, 800a53e <_write_r+0x1e>
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	200004c4 	.word	0x200004c4

0800a544 <_close_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_close_r+0x1c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7f7 fc67 	bl	8001e22 <_close>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_close_r+0x1a>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_close_r+0x1a>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	200004c4 	.word	0x200004c4

0800a564 <_fstat_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	; (800a584 <_fstat_r+0x20>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	4611      	mov	r1, r2
 800a570:	602b      	str	r3, [r5, #0]
 800a572:	f7f7 fc62 	bl	8001e3a <_fstat>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d102      	bne.n	800a580 <_fstat_r+0x1c>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	b103      	cbz	r3, 800a580 <_fstat_r+0x1c>
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	bd38      	pop	{r3, r4, r5, pc}
 800a582:	bf00      	nop
 800a584:	200004c4 	.word	0x200004c4

0800a588 <_isatty_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d06      	ldr	r5, [pc, #24]	; (800a5a4 <_isatty_r+0x1c>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4604      	mov	r4, r0
 800a590:	4608      	mov	r0, r1
 800a592:	602b      	str	r3, [r5, #0]
 800a594:	f7f7 fc61 	bl	8001e5a <_isatty>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_isatty_r+0x1a>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_isatty_r+0x1a>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	200004c4 	.word	0x200004c4

0800a5a8 <_lseek_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_lseek_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f7 fc5a 	bl	8001e70 <_lseek>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_lseek_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_lseek_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	200004c4 	.word	0x200004c4

0800a5cc <_read_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d07      	ldr	r5, [pc, #28]	; (800a5ec <_read_r+0x20>)
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f7f7 fbe8 	bl	8001db0 <_read>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_read_r+0x1e>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_read_r+0x1e>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	200004c4 	.word	0x200004c4

0800a5f0 <roundf>:
 800a5f0:	ee10 0a10 	vmov	r0, s0
 800a5f4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a5f8:	3a7f      	subs	r2, #127	; 0x7f
 800a5fa:	2a16      	cmp	r2, #22
 800a5fc:	dc15      	bgt.n	800a62a <roundf+0x3a>
 800a5fe:	2a00      	cmp	r2, #0
 800a600:	da08      	bge.n	800a614 <roundf+0x24>
 800a602:	3201      	adds	r2, #1
 800a604:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800a608:	d101      	bne.n	800a60e <roundf+0x1e>
 800a60a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a60e:	ee00 3a10 	vmov	s0, r3
 800a612:	4770      	bx	lr
 800a614:	4907      	ldr	r1, [pc, #28]	; (800a634 <roundf+0x44>)
 800a616:	4111      	asrs	r1, r2
 800a618:	4208      	tst	r0, r1
 800a61a:	d0fa      	beq.n	800a612 <roundf+0x22>
 800a61c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a620:	4113      	asrs	r3, r2
 800a622:	4403      	add	r3, r0
 800a624:	ea23 0301 	bic.w	r3, r3, r1
 800a628:	e7f1      	b.n	800a60e <roundf+0x1e>
 800a62a:	2a80      	cmp	r2, #128	; 0x80
 800a62c:	d1f1      	bne.n	800a612 <roundf+0x22>
 800a62e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a632:	4770      	bx	lr
 800a634:	007fffff 	.word	0x007fffff

0800a638 <_init>:
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63a:	bf00      	nop
 800a63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63e:	bc08      	pop	{r3}
 800a640:	469e      	mov	lr, r3
 800a642:	4770      	bx	lr

0800a644 <_fini>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	bf00      	nop
 800a648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64a:	bc08      	pop	{r3}
 800a64c:	469e      	mov	lr, r3
 800a64e:	4770      	bx	lr
