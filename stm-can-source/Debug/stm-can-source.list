
stm-can-source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a438  0800a438  0001a438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a844  0800a844  000201e1  2**0
                  CONTENTS
  4 .ARM          00000000  0800a844  0800a844  000201e1  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a844  0800a844  000201e1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .no_init      00000001  200001e0  0800aa2c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  000201e1  2**0
                  CONTENTS
 11 .bss          000002e8  200001e4  200001e4  000201e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200004cc  200004cc  000201e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010b20  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000247e  00000000  00000000  00030d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f28  00000000  00000000  000331b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e10  00000000  00000000  000340d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002265f  00000000  00000000  00034ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000122e9  00000000  00000000  00057547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d30a8  00000000  00000000  00069830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0013c8d8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ffc  00000000  00000000  0013c928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a420 	.word	0x0800a420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a420 	.word	0x0800a420

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bbc:	f3bf 8f4f 	dsb	sy
}
 8000bc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <__NVIC_SystemReset+0x24>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000bca:	4904      	ldr	r1, [pc, #16]	; (8000bdc <__NVIC_SystemReset+0x24>)
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_SystemReset+0x28>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd2:	f3bf 8f4f 	dsb	sy
}
 8000bd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <__NVIC_SystemReset+0x20>
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	05fa0004 	.word	0x05fa0004

08000be4 <usBuildAdc_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t usBuildAdc_message(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <usBuildAdc_message+0x60>)
 8000bea:	881a      	ldrh	r2, [r3, #0]

	memcpy(opAdcData, adcData, ADC_BUF_LEN);
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <usBuildAdc_message+0x64>)
 8000bee:	801a      	strh	r2, [r3, #0]
	TxData[0] = (opAdcData[0] >> 0) & 0xFF;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <usBuildAdc_message+0x64>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <usBuildAdc_message+0x68>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	TxData[1] = (opAdcData[0] >> 8) & 0xFF;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <usBuildAdc_message+0x64>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <usBuildAdc_message+0x68>)
 8000c06:	705a      	strb	r2, [r3, #1]

	TxHeader.DLC = 0x02;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 200 + nodeId;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <usBuildAdc_message+0x70>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	33c8      	adds	r3, #200	; 0xc8
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c2a:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	751a      	strb	r2, [r3, #20]
	return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <usBuildAdc_message+0x74>)
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <usBuildAdc_message+0x68>)
 8000c36:	4906      	ldr	r1, [pc, #24]	; (8000c50 <usBuildAdc_message+0x6c>)
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <usBuildAdc_message+0x78>)
 8000c3a:	f002 ff08 	bl	8003a4e <HAL_CAN_AddTxMessage>
 8000c3e:	4603      	mov	r3, r0

}
 8000c40:	4618      	mov	r0, r3
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200004a4 	.word	0x200004a4
 8000c48:	200004a8 	.word	0x200004a8
 8000c4c:	20000484 	.word	0x20000484
 8000c50:	20000434 	.word	0x20000434
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000480 	.word	0x20000480
 8000c5c:	20000328 	.word	0x20000328

08000c60 <usHeartbeat_message>:

uint8_t usHeartbeat_message(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0


	return HAL_CAN_AddTxMessage(&hcan, &heartbeat_msgTxHeader, heartbeat, &TxMailbox);
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <usHeartbeat_message+0x18>)
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <usHeartbeat_message+0x1c>)
 8000c68:	4905      	ldr	r1, [pc, #20]	; (8000c80 <usHeartbeat_message+0x20>)
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <usHeartbeat_message+0x24>)
 8000c6c:	f002 feef 	bl	8003a4e <HAL_CAN_AddTxMessage>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000480 	.word	0x20000480
 8000c7c:	20000498 	.word	0x20000498
 8000c80:	20000468 	.word	0x20000468
 8000c84:	20000328 	.word	0x20000328

08000c88 <usGetTemperatureValue>:

uint8_t usGetTemperatureValue(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

	return (uint8_t)roundf((VOLT_AT_T25 - ((float)internalData[0] * REF_VOL/ADC_RES))/AVG_SLOPE + TEMP_CONST);
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <usGetTemperatureValue+0x5c>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ce8 <usGetTemperatureValue+0x60>
 8000c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ca2:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000cec <usGetTemperatureValue+0x64>
 8000ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000caa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000cf0 <usGetTemperatureValue+0x68>
 8000cae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cb2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000cf4 <usGetTemperatureValue+0x6c>
 8000cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cba:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc6:	f009 fb87 	bl	800a3d8 <roundf>
 8000cca:	eef0 7a40 	vmov.f32	s15, s0
 8000cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	b2db      	uxtb	r3, r3

}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200004a0 	.word	0x200004a0
 8000ce8:	40551eb8 	.word	0x40551eb8
 8000cec:	45800000 	.word	0x45800000
 8000cf0:	3fb70a3d 	.word	0x3fb70a3d
 8000cf4:	4089999a 	.word	0x4089999a

08000cf8 <usGetRefVoltValue>:

uint8_t usGetRefVoltValue(){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

	return (uint8_t)(((REF_VOL * (float)internalData[1])/ADC_RES) * 100.0f);
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <usGetRefVoltValue+0x44>)
 8000d00:	885b      	ldrh	r3, [r3, #2]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000d40 <usGetRefVoltValue+0x48>
 8000d0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d12:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d44 <usGetRefVoltValue+0x4c>
 8000d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d1a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000d48 <usGetRefVoltValue+0x50>
 8000d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d26:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d2a:	793b      	ldrb	r3, [r7, #4]
 8000d2c:	b2db      	uxtb	r3, r3
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200004a0 	.word	0x200004a0
 8000d40:	40551eb8 	.word	0x40551eb8
 8000d44:	45800000 	.word	0x45800000
 8000d48:	42c80000 	.word	0x42c80000

08000d4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d12c      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x6a>
	  if(cyclicMessage){
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d009      	beq.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  can_status += usBuildAdc_message();
 8000d64:	f7ff ff3e 	bl	8000be4 <usBuildAdc_message>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d76:	701a      	strb	r2, [r3, #0]
	  }
	  if(timerHandler % 2 == 0){
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x4e>
		  can_status += usHeartbeat_message();
 8000d86:	f7ff ff6b 	bl	8000c60 <usHeartbeat_message>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d98:	701a      	strb	r2, [r3, #0]
	  }

	  if(timerHandler == 3 ){
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d103      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x5e>
		  timerHandler = 0;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
	  }


  }

}
 8000da8:	e005      	b.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x6a>
		  timerHandler++;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000db4:	701a      	strb	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200003e8 	.word	0x200003e8
 8000dc4:	200004ad 	.word	0x200004ad
 8000dc8:	20000494 	.word	0x20000494
 8000dcc:	200004ac 	.word	0x200004ac

08000dd0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	can_status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000dd8:	4b7b      	ldr	r3, [pc, #492]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000dda:	4a7c      	ldr	r2, [pc, #496]	; (8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f002 ff05 	bl	8003bee <HAL_CAN_GetRxMessage>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b79      	ldr	r3, [pc, #484]	; (8000fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000dea:	701a      	strb	r2, [r3, #0]
	switch(RxHeader.StdId){
 8000dec:	4b77      	ldr	r3, [pc, #476]	; (8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000df4:	f000 80a4 	beq.w	8000f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>
 8000df8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8000dfc:	f200 80a7 	bhi.w	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 8000e00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000e04:	f000 808f 	beq.w	8000f26 <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
 8000e08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000e0c:	f200 809f 	bhi.w	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 8000e10:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 8000e14:	d06c      	beq.n	8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000e16:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 8000e1a:	f200 8098 	bhi.w	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 8000e1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e22:	d05e      	beq.n	8000ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
 8000e24:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e28:	f200 8091 	bhi.w	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 8000e2c:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8000e30:	d03c      	beq.n	8000eac <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
 8000e32:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8000e36:	f200 808a 	bhi.w	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 8000e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e3e:	d01e      	beq.n	8000e7e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
 8000e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e44:	f200 8083 	bhi.w	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 8000e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e4c:	d003      	beq.n	8000e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
 8000e4e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8000e52:	d002      	beq.n	8000e5a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	case 0x650:
		RxData[0] = usGetRefVoltValue();
		break;

	default:
		break;
 8000e54:	e07b      	b.n	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
		NVIC_SystemReset();
 8000e56:	f7ff feaf 	bl	8000bb8 <__NVIC_SystemReset>
		if(RxData[0] >= 0 && RxData[0] <= 1){
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d804      	bhi.n	8000e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
			cyclicMessage = RxData[0];
 8000e62:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000e68:	701a      	strb	r2, [r3, #0]
		break;
 8000e6a:	e072      	b.n	8000f52 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		}else if(RxData[0] == 0xFF){
 8000e6c:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2bff      	cmp	r3, #255	; 0xff
 8000e72:	d16e      	bne.n	8000f52 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
			RxData[0] = cyclicMessage;
 8000e74:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e7a:	701a      	strb	r2, [r3, #0]
		break;
 8000e7c:	e069      	b.n	8000f52 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		if(RxData[0] >= 0 && RxData[0] <= 250){
 8000e7e:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2bfa      	cmp	r3, #250	; 0xfa
 8000e84:	d809      	bhi.n	8000e9a <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
			pwmValue = (uint8_t)RxData[0];
 8000e86:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000e8c:	701a      	strb	r2, [r3, #0]
		   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwmValue);
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000e98:	e05d      	b.n	8000f56 <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
		} else if(RxData[0] == 0xFF){
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	d159      	bne.n	8000f56 <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
			RxData[0] = pwmValue;
 8000ea2:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000ea8:	701a      	strb	r2, [r3, #0]
		break;
 8000eaa:	e054      	b.n	8000f56 <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
		if(RxData[0] >= 0 && RxData[0] <= 1){
 8000eac:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d808      	bhi.n	8000ec6 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
			HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, RxData[0]);
 8000eb4:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2120      	movs	r1, #32
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f003 fe72 	bl	8004ba8 <HAL_GPIO_WritePin>
		break;
 8000ec4:	e049      	b.n	8000f5a <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
		else if(RxData[0] == 0xFF){
 8000ec6:	4b40      	ldr	r3, [pc, #256]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2bff      	cmp	r3, #255	; 0xff
 8000ecc:	d145      	bne.n	8000f5a <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
			RxData[0] = HAL_GPIO_ReadPin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin);
 8000ece:	2120      	movs	r1, #32
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f003 fe50 	bl	8004b78 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000ede:	701a      	strb	r2, [r3, #0]
		break;
 8000ee0:	e03b      	b.n	8000f5a <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
		RxData[0] = usGetTemperatureValue();
 8000ee2:	f7ff fed1 	bl	8000c88 <usGetTemperatureValue>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000eec:	701a      	strb	r2, [r3, #0]
		break;
 8000eee:	e037      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		if(RxData[0] >= 0 && RxData[0] <= 1){
 8000ef0:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d808      	bhi.n	8000f0a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			HAL_GPIO_WritePin(USER_GPIO_GPIO_Port, USER_GPIO_Pin, RxData[0]);
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f003 fe50 	bl	8004ba8 <HAL_GPIO_WritePin>
		break;
 8000f08:	e029      	b.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
		else if(RxData[0] == 0xFF){
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2bff      	cmp	r3, #255	; 0xff
 8000f10:	d125      	bne.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
			RxData[0] = HAL_GPIO_ReadPin(USER_GPIO_GPIO_Port, USER_GPIO_Pin);
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f003 fe2e 	bl	8004b78 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f22:	701a      	strb	r2, [r3, #0]
		break;
 8000f24:	e01b      	b.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
		if(RxData[0] >= 0 && RxData[0] <= 3){
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d804      	bhi.n	8000f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
			canSpeedOnStartup = (uint8_t)RxData[0];
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000f34:	701a      	strb	r2, [r3, #0]
		break;
 8000f36:	e013      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
			RxData[0] = 0x80;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	701a      	strb	r2, [r3, #0]
		break;
 8000f3e:	e00f      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		RxData[0] = usGetRefVoltValue();
 8000f40:	f7ff feda 	bl	8000cf8 <usGetRefVoltValue>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f4a:	701a      	strb	r2, [r3, #0]
		break;
 8000f4c:	e008      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		break;
 8000f4e:	bf00      	nop
 8000f50:	e006      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		break;
 8000f52:	bf00      	nop
 8000f54:	e004      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		break;
 8000f56:	bf00      	nop
 8000f58:	e002      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		break;
 8000f5a:	bf00      	nop
 8000f5c:	e000      	b.n	8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		break;
 8000f5e:	bf00      	nop

	}

	TxHeader.DLC = RxHeader.DLC;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f66:	6113      	str	r3, [r2, #16]
	TxHeader.ExtId = 0;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = RxHeader.StdId + nodeId;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f86:	6013      	str	r3, [r2, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	751a      	strb	r2, [r3, #20]
	memcpy(TxData, RxData, MSG_BUFFER_SIZE);
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f96:	e883 0003 	stmia.w	r3, {r0, r1}
	can_status += HAL_CAN_AddTxMessage(hcan, &TxHeader, &TxData[0], &TxMailbox);
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000f9e:	4911      	ldr	r1, [pc, #68]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f002 fd54 	bl	8003a4e <HAL_CAN_AddTxMessage>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000fb4:	701a      	strb	r2, [r3, #0]
	memset(RxData, 0, MSG_BUFFER_SIZE);
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fbc:	f006 fcee 	bl	800799c <memset>

}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000048c 	.word	0x2000048c
 8000fcc:	2000044c 	.word	0x2000044c
 8000fd0:	20000494 	.word	0x20000494
 8000fd4:	200004ad 	.word	0x200004ad
 8000fd8:	200004ae 	.word	0x200004ae
 8000fdc:	2000039c 	.word	0x2000039c
 8000fe0:	200001e0 	.word	0x200001e0
 8000fe4:	20000434 	.word	0x20000434
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000484 	.word	0x20000484
 8000ff0:	20000480 	.word	0x20000480

08000ff4 <vCan_messages_init>:

void vCan_messages_init(){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

	heartbeat_msgTxHeader.DLC = 0x00;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <vCan_messages_init+0x60>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
	heartbeat_msgTxHeader.ExtId = 0;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <vCan_messages_init+0x60>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
	heartbeat_msgTxHeader.IDE = CAN_ID_STD;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <vCan_messages_init+0x60>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
	heartbeat_msgTxHeader.RTR = CAN_RTR_DATA;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <vCan_messages_init+0x60>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
	heartbeat_msgTxHeader.StdId = 0x700 + nodeId;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <vCan_messages_init+0x64>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001018:	461a      	mov	r2, r3
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <vCan_messages_init+0x60>)
 800101c:	601a      	str	r2, [r3, #0]
	heartbeat_msgTxHeader.TransmitGlobalTime = DISABLE;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <vCan_messages_init+0x60>)
 8001020:	2200      	movs	r2, #0
 8001022:	751a      	strb	r2, [r3, #20]

	TxHeader.DLC = 0x00;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <vCan_messages_init+0x68>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <vCan_messages_init+0x68>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <vCan_messages_init+0x68>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <vCan_messages_init+0x68>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x00;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <vCan_messages_init+0x68>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <vCan_messages_init+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	751a      	strb	r2, [r3, #20]

}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000468 	.word	0x20000468
 8001058:	20000000 	.word	0x20000000
 800105c:	20000434 	.word	0x20000434

08001060 <setCanSpeed>:


void setCanSpeed(can_speed_t canSpeed){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]

	hcan.Instance = CAN;
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <setCanSpeed+0xb0>)
 800106c:	4a29      	ldr	r2, [pc, #164]	; (8001114 <setCanSpeed+0xb4>)
 800106e:	601a      	str	r2, [r3, #0]
	switch(canSpeed){
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d81a      	bhi.n	80010ac <setCanSpeed+0x4c>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <setCanSpeed+0x1c>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800108d 	.word	0x0800108d
 8001080:	08001095 	.word	0x08001095
 8001084:	0800109d 	.word	0x0800109d
 8001088:	080010a5 	.word	0x080010a5

	case SPEED_125_KBITS:
		hcan.Init.Prescaler = 72;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <setCanSpeed+0xb0>)
 800108e:	2248      	movs	r2, #72	; 0x48
 8001090:	605a      	str	r2, [r3, #4]
		break;
 8001092:	e012      	b.n	80010ba <setCanSpeed+0x5a>

	case SPEED_250_KBITS:
		hcan.Init.Prescaler = 36;
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <setCanSpeed+0xb0>)
 8001096:	2224      	movs	r2, #36	; 0x24
 8001098:	605a      	str	r2, [r3, #4]
		break;
 800109a:	e00e      	b.n	80010ba <setCanSpeed+0x5a>

	case SPEED_500_KBITS:
		hcan.Init.Prescaler = 18;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <setCanSpeed+0xb0>)
 800109e:	2212      	movs	r2, #18
 80010a0:	605a      	str	r2, [r3, #4]
		break;
 80010a2:	e00a      	b.n	80010ba <setCanSpeed+0x5a>

	case SPEED_1000_KBITS:
		hcan.Init.Prescaler = 9;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <setCanSpeed+0xb0>)
 80010a6:	2209      	movs	r2, #9
 80010a8:	605a      	str	r2, [r3, #4]
		break;
 80010aa:	e006      	b.n	80010ba <setCanSpeed+0x5a>

	default:
		hcan.Init.Prescaler = 18;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <setCanSpeed+0xb0>)
 80010ae:	2212      	movs	r2, #18
 80010b0:	605a      	str	r2, [r3, #4]
		canSpeedOnStartup = 2;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <setCanSpeed+0xb8>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
		break;
 80010b8:	bf00      	nop

	}

	hcan.Init.Mode = CAN_MODE_NORMAL;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <setCanSpeed+0xb0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <setCanSpeed+0xb0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <setCanSpeed+0xb0>)
 80010c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010cc:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <setCanSpeed+0xb0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <setCanSpeed+0xb0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <setCanSpeed+0xb0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <setCanSpeed+0xb0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <setCanSpeed+0xb0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <setCanSpeed+0xb0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <setCanSpeed+0xb0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <setCanSpeed+0xb0>)
 80010fa:	f002 fa9f 	bl	800363c <HAL_CAN_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <setCanSpeed+0xa8>
	{
		Error_Handler();
 8001104:	f000 fb0e 	bl	8001724 <Error_Handler>
	}

}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000328 	.word	0x20000328
 8001114:	40006400 	.word	0x40006400
 8001118:	200001e0 	.word	0x200001e0

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f000 fe5a 	bl	8001dd8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f854 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f000 fabe 	bl	80016a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800112c:	f000 fa8a 	bl	8001644 <MX_DMA_Init>
  MX_CAN_Init();
 8001130:	f000 f98e 	bl	8001450 <MX_CAN_Init>
  MX_TIM16_Init();
 8001134:	f000 fa5e 	bl	80015f4 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001138:	f000 f8b0 	bl	800129c <MX_ADC1_Init>
  MX_TIM3_Init();
 800113c:	f000 f9b2 	bl	80014a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001140:	f000 f9fe 	bl	8001540 <MX_TIM4_Init>
  MX_ADC2_Init();
 8001144:	f000 f926 	bl	8001394 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  can_status += HAL_CAN_Start(&hcan);
 8001148:	4819      	ldr	r0, [pc, #100]	; (80011b0 <main+0x94>)
 800114a:	f002 fc3c 	bl	80039c6 <HAL_CAN_Start>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <main+0x98>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <main+0x98>)
 800115c:	701a      	strb	r2, [r3, #0]
  can_status += HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800115e:	2102      	movs	r1, #2
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <main+0x94>)
 8001162:	f002 fe66 	bl	8003e32 <HAL_CAN_ActivateNotification>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <main+0x98>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x98>)
 8001174:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <main+0x9c>)
 8001178:	f005 f9de 	bl	8006538 <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800117c:	2100      	movs	r1, #0
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <main+0xa0>)
 8001180:	f001 fcb4 	bl	8002aec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)internalData, ADC_BUF_LEN);
 8001184:	2202      	movs	r2, #2
 8001186:	490e      	ldr	r1, [pc, #56]	; (80011c0 <main+0xa4>)
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <main+0xa0>)
 800118a:	f001 f8ad 	bl	80022e8 <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800118e:	2100      	movs	r1, #0
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <main+0xa8>)
 8001192:	f001 fcab 	bl	8002aec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcData, ADC_BUF_LEN);
 8001196:	2202      	movs	r2, #2
 8001198:	490b      	ldr	r1, [pc, #44]	; (80011c8 <main+0xac>)
 800119a:	480a      	ldr	r0, [pc, #40]	; (80011c4 <main+0xa8>)
 800119c:	f001 f8a4 	bl	80022e8 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80011a0:	2104      	movs	r1, #4
 80011a2:	480a      	ldr	r0, [pc, #40]	; (80011cc <main+0xb0>)
 80011a4:	f005 fa90 	bl	80066c8 <HAL_TIM_PWM_Start>

  vCan_messages_init();
 80011a8:	f7ff ff24 	bl	8000ff4 <vCan_messages_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <main+0x90>
 80011ae:	bf00      	nop
 80011b0:	20000328 	.word	0x20000328
 80011b4:	20000494 	.word	0x20000494
 80011b8:	200003e8 	.word	0x200003e8
 80011bc:	20000200 	.word	0x20000200
 80011c0:	200004a0 	.word	0x200004a0
 80011c4:	20000250 	.word	0x20000250
 80011c8:	200004a4 	.word	0x200004a4
 80011cc:	2000039c 	.word	0x2000039c

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a6      	sub	sp, #152	; 0x98
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011da:	2228      	movs	r2, #40	; 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 fbdc 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2258      	movs	r2, #88	; 0x58
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f006 fbce 	bl	800799c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800121c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fcd2 	bl	8004bd8 <HAL_RCC_OscConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800123a:	f000 fa73 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123e:	230f      	movs	r3, #15
 8001240:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001242:	2302      	movs	r3, #2
 8001244:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001254:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001258:	2102      	movs	r1, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f004 fd10 	bl	8005c80 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001266:	f000 fa5d 	bl	8001724 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_ADC12
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <SystemClock_Config+0xc8>)
 800126c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800126e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001274:	2300      	movs	r3, #0
 8001276:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001278:	2300      	movs	r3, #0
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fee4 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800128a:	f000 fa4b 	bl	8001724 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3798      	adds	r7, #152	; 0x98
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	00a00080 	.word	0x00a00080

0800129c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012da:	2201      	movs	r2, #1
 80012dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012f8:	4b25      	ldr	r3, [pc, #148]	; (8001390 <MX_ADC1_Init+0xf4>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <MX_ADC1_Init+0xf4>)
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <MX_ADC1_Init+0xf4>)
 8001308:	2204      	movs	r2, #4
 800130a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_ADC1_Init+0xf4>)
 800130e:	2200      	movs	r2, #0
 8001310:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_ADC1_Init+0xf4>)
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001318:	481d      	ldr	r0, [pc, #116]	; (8001390 <MX_ADC1_Init+0xf4>)
 800131a:	f000 fdeb 	bl	8001ef4 <HAL_ADC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001324:	f000 f9fe 	bl	8001724 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4817      	ldr	r0, [pc, #92]	; (8001390 <MX_ADC1_Init+0xf4>)
 8001334:	f001 ff60 	bl	80031f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800133e:	f000 f9f1 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001342:	2310      	movs	r3, #16
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001346:	2301      	movs	r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800134e:	2307      	movs	r3, #7
 8001350:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_ADC1_Init+0xf4>)
 8001360:	f001 fc5e 	bl	8002c20 <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800136a:	f000 f9db 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800136e:	2302      	movs	r3, #2
 8001370:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_ADC1_Init+0xf4>)
 8001378:	f001 fc52 	bl	8002c20 <HAL_ADC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001382:	f000 f9cf 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000200 	.word	0x20000200

08001394 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <MX_ADC2_Init+0xb8>)
 80013ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_ADC2_Init+0xb4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001402:	4811      	ldr	r0, [pc, #68]	; (8001448 <MX_ADC2_Init+0xb4>)
 8001404:	f000 fd76 	bl	8001ef4 <HAL_ADC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800140e:	f000 f989 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001412:	2304      	movs	r3, #4
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800141e:	2307      	movs	r3, #7
 8001420:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_ADC2_Init+0xb4>)
 8001430:	f001 fbf6 	bl	8002c20 <HAL_ADC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800143a:	f000 f973 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000250 	.word	0x20000250
 800144c:	50000100 	.word	0x50000100

08001450 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
	setCanSpeed(canSpeedOnStartup);
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_CAN_Init+0x4c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fe00 	bl	8001060 <setCanSpeed>
  */
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef can_filter_config;

  can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  can_filter_config.FilterBank = 10;
 8001464:	230a      	movs	r3, #10
 8001466:	617b      	str	r3, [r7, #20]
  can_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  can_filter_config.FilterIdHigh = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	603b      	str	r3, [r7, #0]
  can_filter_config.FilterIdLow = 0x0000;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  can_filter_config.FilterMaskIdHigh = 0;			// decides which bits in id should be compared
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  can_filter_config.FilterMaskIdLow = 0x0000;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001480:	2301      	movs	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
  can_filter_config.SlaveStartFilterBank = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &can_filter_config);
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_CAN_Init+0x50>)
 800148e:	f002 f9d0 	bl	8003832 <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001e0 	.word	0x200001e0
 80014a0:	20000328 	.word	0x20000328

080014a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_TIM3_Init+0x94>)
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <MX_TIM3_Init+0x98>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_TIM3_Init+0x94>)
 80014ca:	2247      	movs	r2, #71	; 0x47
 80014cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM3_Init+0x94>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_TIM3_Init+0x94>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_TIM3_Init+0x94>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_TIM3_Init+0x94>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <MX_TIM3_Init+0x94>)
 80014ea:	f004 ffcd 	bl	8006488 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014f4:	f000 f916 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM3_Init+0x94>)
 8001506:	f005 fc1f 	bl	8006d48 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001510:	f000 f908 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001514:	2320      	movs	r3, #32
 8001516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_TIM3_Init+0x94>)
 8001522:	f006 f967 	bl	80077f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800152c:	f000 f8fa 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000350 	.word	0x20000350
 800153c:	40000400 	.word	0x40000400

08001540 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MX_TIM4_Init+0xac>)
 8001566:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <MX_TIM4_Init+0xb0>)
 8001568:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2880-1;
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <MX_TIM4_Init+0xac>)
 800156c:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001570:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_TIM4_Init+0xac>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_TIM4_Init+0xac>)
 800157a:	22f9      	movs	r2, #249	; 0xf9
 800157c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_TIM4_Init+0xac>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_TIM4_Init+0xac>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_TIM4_Init+0xac>)
 800158c:	f005 f844 	bl	8006618 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001596:	f000 f8c5 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <MX_TIM4_Init+0xac>)
 80015aa:	f006 f923 	bl	80077f4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80015b4:	f000 f8b6 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2204      	movs	r2, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM4_Init+0xac>)
 80015d0:	f005 faa6 	bl	8006b20 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80015da:	f000 f8a3 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM4_Init+0xac>)
 80015e0:	f000 fa4c 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000039c 	.word	0x2000039c
 80015f0:	40000800 	.word	0x40000800

080015f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_TIM16_Init+0x48>)
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <MX_TIM16_Init+0x4c>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3000-1;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_TIM16_Init+0x48>)
 8001600:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001604:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_TIM16_Init+0x48>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6000-1;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_TIM16_Init+0x48>)
 800160e:	f241 726f 	movw	r2, #5999	; 0x176f
 8001612:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_TIM16_Init+0x48>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_TIM16_Init+0x48>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_TIM16_Init+0x48>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM16_Init+0x48>)
 8001628:	f004 ff2e 	bl	8006488 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001632:	f000 f877 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200003e8 	.word	0x200003e8
 8001640:	40014400 	.word	0x40014400

08001644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_DMA_Init+0x60>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <MX_DMA_Init+0x60>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_DMA_Init+0x60>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_DMA_Init+0x60>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <MX_DMA_Init+0x60>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <MX_DMA_Init+0x60>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	200b      	movs	r0, #11
 8001680:	f002 ff07 	bl	8004492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001684:	200b      	movs	r0, #11
 8001686:	f002 ff20 	bl	80044ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	2038      	movs	r0, #56	; 0x38
 8001690:	f002 feff 	bl	8004492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001694:	2038      	movs	r0, #56	; 0x38
 8001696:	f002 ff18 	bl	80044ca <HAL_NVIC_EnableIRQ>

}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_GPIO_Init+0x78>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_GPIO_Init+0x78>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_GPIO_Init+0x78>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_GPIO_Init+0x78>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <MX_GPIO_Init+0x78>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6153      	str	r3, [r2, #20]
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_GPIO_Init+0x78>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INTERNAL_LED_Pin|USER_GPIO_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2160      	movs	r1, #96	; 0x60
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f003 fa57 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INTERNAL_LED_Pin USER_GPIO_Pin */
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin|USER_GPIO_Pin;
 80016fa:	2360      	movs	r3, #96	; 0x60
 80016fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f003 f8a6 	bl	8004864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x44>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x44>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x44>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x44>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x44>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x44>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001798:	d145      	bne.n	8001826 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_ADC_MspInit+0x17c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a54      	ldr	r2, [pc, #336]	; (80018f4 <HAL_ADC_MspInit+0x17c>)
 80017a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_ADC_MspInit+0x17c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10b      	bne.n	80017c4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017ac:	4b52      	ldr	r3, [pc, #328]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6153      	str	r3, [r2, #20]
 80017b8:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017c6:	4a4e      	ldr	r2, [pc, #312]	; (8001900 <HAL_ADC_MspInit+0x188>)
 80017c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ca:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e4:	4b45      	ldr	r3, [pc, #276]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017ee:	2220      	movs	r2, #32
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f8:	4840      	ldr	r0, [pc, #256]	; (80018fc <HAL_ADC_MspInit+0x184>)
 80017fa:	f002 fe80 	bl	80044fe <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8001804:	f7ff ff8e 	bl	8001724 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <HAL_ADC_MspInit+0x184>)
 800180c:	639a      	str	r2, [r3, #56]	; 0x38
 800180e:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <HAL_ADC_MspInit+0x184>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2102      	movs	r1, #2
 8001818:	2012      	movs	r0, #18
 800181a:	f002 fe3a 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800181e:	2012      	movs	r0, #18
 8001820:	f002 fe53 	bl	80044ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001824:	e062      	b.n	80018ec <HAL_ADC_MspInit+0x174>
  else if(hadc->Instance==ADC2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_ADC_MspInit+0x18c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d15d      	bne.n	80018ec <HAL_ADC_MspInit+0x174>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_ADC_MspInit+0x17c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <HAL_ADC_MspInit+0x17c>)
 8001838:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_ADC_MspInit+0x17c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10b      	bne.n	800185a <HAL_ADC_MspInit+0xe2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001842:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6153      	str	r3, [r2, #20]
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	6153      	str	r3, [r2, #20]
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_ADC_MspInit+0x180>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	2303      	movs	r3, #3
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f002 ffec 	bl	8004864 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_ADC_MspInit+0x190>)
 800188e:	4a1f      	ldr	r2, [pc, #124]	; (800190c <HAL_ADC_MspInit+0x194>)
 8001890:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_ADC_MspInit+0x190>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_ADC_MspInit+0x190>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018aa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018b6:	2220      	movs	r2, #32
 80018b8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018c2:	f002 fe1c 	bl	80044fe <HAL_DMA_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 80018cc:	f7ff ff2a 	bl	8001724 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
 80018d6:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_ADC_MspInit+0x190>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2102      	movs	r1, #2
 80018e0:	2012      	movs	r0, #18
 80018e2:	f002 fdd6 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80018e6:	2012      	movs	r0, #18
 80018e8:	f002 fdef 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200004b0 	.word	0x200004b0
 80018f8:	40021000 	.word	0x40021000
 80018fc:	200002a0 	.word	0x200002a0
 8001900:	40020008 	.word	0x40020008
 8001904:	50000100 	.word	0x50000100
 8001908:	200002e4 	.word	0x200002e4
 800190c:	40020408 	.word	0x40020408

08001910 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <HAL_CAN_MspInit+0xb0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d141      	bne.n	80019b6 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_CAN_MspInit+0xb4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <HAL_CAN_MspInit+0xb4>)
 8001938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_CAN_MspInit+0xb4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_CAN_MspInit+0xb4>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_CAN_MspInit+0xb4>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6153      	str	r3, [r2, #20]
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_CAN_MspInit+0xb4>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001962:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001974:	2309      	movs	r3, #9
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001982:	f002 ff6f 	bl	8004864 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2014      	movs	r0, #20
 800198c:	f002 fd81 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001990:	2014      	movs	r0, #20
 8001992:	f002 fd9a 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2015      	movs	r0, #21
 800199c:	f002 fd79 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80019a0:	2015      	movs	r0, #21
 80019a2:	f002 fd92 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2016      	movs	r0, #22
 80019ac:	f002 fd71 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80019b0:	2016      	movs	r0, #22
 80019b2:	f002 fd8a 	bl	80044ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40006400 	.word	0x40006400
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <HAL_TIM_Base_MspInit+0x68>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10c      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80019f2:	e018      	b.n	8001a26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_TIM_Base_MspInit+0x70>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d113      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	6193      	str	r3, [r2, #24]
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0x6c>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2019      	movs	r0, #25
 8001a1c:	f002 fd39 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a20:	2019      	movs	r0, #25
 8001a22:	f002 fd52 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40014400 	.word	0x40014400

08001a3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_TIM_PWM_MspInit+0x38>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10b      	bne.n	8001a66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40000800 	.word	0x40000800
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_TIM_MspPostInit+0x64>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6153      	str	r3, [r2, #20]
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001ad2:	f002 fec7 	bl	8004864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48000400 	.word	0x48000400

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f000 f994 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA1_Channel1_IRQHandler+0x10>)
 8001b46:	f002 fd80 	bl	800464a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002a0 	.word	0x200002a0

08001b54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <ADC1_2_IRQHandler+0x14>)
 8001b5a:	f000 fce1 	bl	8002520 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <ADC1_2_IRQHandler+0x18>)
 8001b60:	f000 fcde 	bl	8002520 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000200 	.word	0x20000200
 8001b6c:	20000250 	.word	0x20000250

08001b70 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001b76:	f002 f982 	bl	8003e7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000328 	.word	0x20000328

08001b84 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <CAN_RX1_IRQHandler+0x10>)
 8001b8a:	f002 f978 	bl	8003e7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000328 	.word	0x20000328

08001b98 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <CAN_SCE_IRQHandler+0x10>)
 8001b9e:	f002 f96e 	bl	8003e7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000328 	.word	0x20000328

08001bac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bb2:	f004 fe95 	bl	80068e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003e8 	.word	0x200003e8

08001bc0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA2_Channel1_IRQHandler+0x10>)
 8001bc6:	f002 fd40 	bl	800464a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200002e4 	.word	0x200002e4

08001bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_kill>:

int _kill(int pid, int sig)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bee:	f005 feab 	bl	8007948 <__errno>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2216      	movs	r2, #22
 8001bf6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_exit>:

void _exit (int status)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ffe7 	bl	8001be4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c16:	e7fe      	b.n	8001c16 <_exit+0x12>

08001c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e00a      	b.n	8001c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c2a:	f3af 8000 	nop.w
 8001c2e:	4601      	mov	r1, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf0      	blt.n	8001c2a <_read+0x12>
	}

return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e009      	b.n	8001c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	60ba      	str	r2, [r7, #8]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf1      	blt.n	8001c64 <_write+0x12>
	}
	return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_close>:

int _close(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_isatty>:

int _isatty(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <_sbrk+0x5c>)
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <_sbrk+0x60>)
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_sbrk+0x64>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <_sbrk+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d24:	f005 fe10 	bl	8007948 <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d32:	e009      	b.n	8001d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <_sbrk+0x64>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20010000 	.word	0x20010000
 8001d54:	00000400 	.word	0x00000400
 8001d58:	200004b4 	.word	0x200004b4
 8001d5c:	200004d0 	.word	0x200004d0

08001d60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <SystemInit+0x20>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <SystemInit+0x20>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dbc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d88:	f7ff ffea 	bl	8001d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d8e:	490d      	ldr	r1, [pc, #52]	; (8001dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <LoopForever+0xe>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da4:	4c0a      	ldr	r4, [pc, #40]	; (8001dd0 <LoopForever+0x16>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db2:	f005 fdcf 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db6:	f7ff f9b1 	bl	800111c <main>

08001dba <LoopForever>:

LoopForever:
    b LoopForever
 8001dba:	e7fe      	b.n	8001dba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001dc8:	0800a84c 	.word	0x0800a84c
  ldr r2, =_sbss
 8001dcc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001dd0:	200004cc 	.word	0x200004cc

08001dd4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC3_IRQHandler>
	...

08001dd8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_Init+0x28>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_Init+0x28>)
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f002 fb47 	bl	800447c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	200f      	movs	r0, #15
 8001df0:	f000 f808 	bl	8001e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff fc9c 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000

08001e04 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x54>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x58>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fb5f 	bl	80044e6 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e40:	f002 fb27 	bl	8004492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_InitTick+0x5c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000000c 	.word	0x2000000c
 8001e88:	200004b8 	.word	0x200004b8

08001e8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	200004b8 	.word	0x200004b8

08001ea4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b09a      	sub	sp, #104	; 0x68
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e1e3      	b.n	80022dc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d176      	bne.n	8002014 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d152      	bne.n	8001fd4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fc15 	bl	8001778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13b      	bne.n	8001fd4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f001 fb07 	bl	8003570 <ADC_Disable>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d12f      	bne.n	8001fd4 <HAL_ADC_Init+0xe0>
 8001f74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d12b      	bne.n	8001fd4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f84:	f023 0302 	bic.w	r3, r3, #2
 8001f88:	f043 0202 	orr.w	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f9e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb0:	4b92      	ldr	r3, [pc, #584]	; (80021fc <HAL_ADC_Init+0x308>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_ADC_Init+0x30c>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9a      	lsrs	r2, r3, #18
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fc6:	e002      	b.n	8001fce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f9      	bne.n	8001fc8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff0:	d110      	bne.n	8002014 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f023 0312 	bic.w	r3, r3, #18
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 8150 	bne.w	80022c2 <HAL_ADC_Init+0x3ce>
 8002022:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 814b 	bne.w	80022c2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 8143 	bne.w	80022c2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002054:	d004      	beq.n	8002060 <HAL_ADC_Init+0x16c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6a      	ldr	r2, [pc, #424]	; (8002204 <HAL_ADC_Init+0x310>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_ADC_Init+0x170>
 8002060:	4b69      	ldr	r3, [pc, #420]	; (8002208 <HAL_ADC_Init+0x314>)
 8002062:	e000      	b.n	8002066 <HAL_ADC_Init+0x172>
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <HAL_ADC_Init+0x318>)
 8002066:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002070:	d102      	bne.n	8002078 <HAL_ADC_Init+0x184>
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_ADC_Init+0x310>)
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e01a      	b.n	80020ae <HAL_ADC_Init+0x1ba>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a61      	ldr	r2, [pc, #388]	; (8002204 <HAL_ADC_Init+0x310>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d103      	bne.n	800208a <HAL_ADC_Init+0x196>
 8002082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e011      	b.n	80020ae <HAL_ADC_Init+0x1ba>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a60      	ldr	r2, [pc, #384]	; (8002210 <HAL_ADC_Init+0x31c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d102      	bne.n	800209a <HAL_ADC_Init+0x1a6>
 8002094:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <HAL_ADC_Init+0x320>)
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e009      	b.n	80020ae <HAL_ADC_Init+0x1ba>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a5d      	ldr	r2, [pc, #372]	; (8002214 <HAL_ADC_Init+0x320>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d102      	bne.n	80020aa <HAL_ADC_Init+0x1b6>
 80020a4:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <HAL_ADC_Init+0x31c>)
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e001      	b.n	80020ae <HAL_ADC_Init+0x1ba>
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_ADC_Init+0x1da>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x1da>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_ADC_Init+0x1dc>
 80020ce:	2300      	movs	r3, #0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11c      	bne.n	800210e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d010      	beq.n	80020fc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_ADC_Init+0x202>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_Init+0x202>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_ADC_Init+0x204>
 80020f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80020fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7e5b      	ldrb	r3, [r3, #25]
 8002112:	035b      	lsls	r3, r3, #13
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002118:	2a01      	cmp	r2, #1
 800211a:	d002      	beq.n	8002122 <HAL_ADC_Init+0x22e>
 800211c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002120:	e000      	b.n	8002124 <HAL_ADC_Init+0x230>
 8002122:	2200      	movs	r2, #0
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4313      	orrs	r3, r2
 8002132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002134:	4313      	orrs	r3, r2
 8002136:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d11b      	bne.n	800217a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7e5b      	ldrb	r3, [r3, #25]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	3b01      	subs	r3, #1
 8002150:	045a      	lsls	r2, r3, #17
 8002152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002154:	4313      	orrs	r3, r2
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	663b      	str	r3, [r7, #96]	; 0x60
 800215c:	e00d      	b.n	800217a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	2b01      	cmp	r3, #1
 8002180:	d054      	beq.n	800222c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_ADC_Init+0x31c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d004      	beq.n	8002196 <HAL_ADC_Init+0x2a2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a20      	ldr	r2, [pc, #128]	; (8002214 <HAL_ADC_Init+0x320>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d140      	bne.n	8002218 <HAL_ADC_Init+0x324>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800219e:	d02a      	beq.n	80021f6 <HAL_ADC_Init+0x302>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a8:	d022      	beq.n	80021f0 <HAL_ADC_Init+0x2fc>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80021b2:	d01a      	beq.n	80021ea <HAL_ADC_Init+0x2f6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80021bc:	d012      	beq.n	80021e4 <HAL_ADC_Init+0x2f0>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80021c6:	d00a      	beq.n	80021de <HAL_ADC_Init+0x2ea>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80021d0:	d002      	beq.n	80021d8 <HAL_ADC_Init+0x2e4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	e023      	b.n	8002220 <HAL_ADC_Init+0x32c>
 80021d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021dc:	e020      	b.n	8002220 <HAL_ADC_Init+0x32c>
 80021de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021e2:	e01d      	b.n	8002220 <HAL_ADC_Init+0x32c>
 80021e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021e8:	e01a      	b.n	8002220 <HAL_ADC_Init+0x32c>
 80021ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ee:	e017      	b.n	8002220 <HAL_ADC_Init+0x32c>
 80021f0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80021f4:	e014      	b.n	8002220 <HAL_ADC_Init+0x32c>
 80021f6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80021fa:	e011      	b.n	8002220 <HAL_ADC_Init+0x32c>
 80021fc:	20000004 	.word	0x20000004
 8002200:	431bde83 	.word	0x431bde83
 8002204:	50000100 	.word	0x50000100
 8002208:	50000300 	.word	0x50000300
 800220c:	50000700 	.word	0x50000700
 8002210:	50000400 	.word	0x50000400
 8002214:	50000500 	.word	0x50000500
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002224:	4313      	orrs	r3, r2
 8002226:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002228:	4313      	orrs	r3, r2
 800222a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7e1b      	ldrb	r3, [r3, #24]
 8002252:	039a      	lsls	r2, r3, #14
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4313      	orrs	r3, r2
 800225e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002260:	4313      	orrs	r3, r2
 8002262:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_ADC_Init+0x3f0>)
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002274:	430b      	orrs	r3, r1
 8002276:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10c      	bne.n	800229a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f023 010f 	bic.w	r1, r3, #15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
 8002298:	e007      	b.n	80022aa <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 020f 	bic.w	r2, r2, #15
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f023 0303 	bic.w	r3, r3, #3
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
 80022c0:	e00a      	b.n	80022d8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f023 0312 	bic.w	r3, r3, #18
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80022d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3768      	adds	r7, #104	; 0x68
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	fff0c007 	.word	0xfff0c007

080022e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80f7 	bne.w	80024f6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Start_DMA+0x2e>
 8002312:	2302      	movs	r3, #2
 8002314:	e0f2      	b.n	80024fc <HAL_ADC_Start_DMA+0x214>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002326:	d004      	beq.n	8002332 <HAL_ADC_Start_DMA+0x4a>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a75      	ldr	r2, [pc, #468]	; (8002504 <HAL_ADC_Start_DMA+0x21c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d109      	bne.n	8002346 <HAL_ADC_Start_DMA+0x5e>
 8002332:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_ADC_Start_DMA+0x220>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	e008      	b.n	8002358 <HAL_ADC_Start_DMA+0x70>
 8002346:	4b71      	ldr	r3, [pc, #452]	; (800250c <HAL_ADC_Start_DMA+0x224>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80c5 	beq.w	80024e8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f001 f8a2 	bl	80034a8 <ADC_Enable>
 8002364:	4603      	mov	r3, r0
 8002366:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 80b7 	bne.w	80024de <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238c:	d004      	beq.n	8002398 <HAL_ADC_Start_DMA+0xb0>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5c      	ldr	r2, [pc, #368]	; (8002504 <HAL_ADC_Start_DMA+0x21c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d106      	bne.n	80023a6 <HAL_ADC_Start_DMA+0xbe>
 8002398:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <HAL_ADC_Start_DMA+0x220>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d010      	beq.n	80023c6 <HAL_ADC_Start_DMA+0xde>
 80023a4:	e005      	b.n	80023b2 <HAL_ADC_Start_DMA+0xca>
 80023a6:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_ADC_Start_DMA+0x224>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_ADC_Start_DMA+0xde>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ba:	d004      	beq.n	80023c6 <HAL_ADC_Start_DMA+0xde>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a53      	ldr	r2, [pc, #332]	; (8002510 <HAL_ADC_Start_DMA+0x228>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d115      	bne.n	80023f2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d036      	beq.n	800244e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023f0:	e02d      	b.n	800244e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002406:	d004      	beq.n	8002412 <HAL_ADC_Start_DMA+0x12a>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3d      	ldr	r2, [pc, #244]	; (8002504 <HAL_ADC_Start_DMA+0x21c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10a      	bne.n	8002428 <HAL_ADC_Start_DMA+0x140>
 8002412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e008      	b.n	800243a <HAL_ADC_Start_DMA+0x152>
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_ADC_Start_DMA+0x228>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002446:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245a:	d106      	bne.n	800246a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f023 0206 	bic.w	r2, r3, #6
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	645a      	str	r2, [r3, #68]	; 0x44
 8002468:	e002      	b.n	8002470 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	4a25      	ldr	r2, [pc, #148]	; (8002514 <HAL_ADC_Start_DMA+0x22c>)
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <HAL_ADC_Start_DMA+0x230>)
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_ADC_Start_DMA+0x234>)
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	221c      	movs	r2, #28
 8002496:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0210 	orr.w	r2, r2, #16
 80024a6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3340      	adds	r3, #64	; 0x40
 80024c2:	4619      	mov	r1, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f002 f860 	bl	800458c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0204 	orr.w	r2, r2, #4
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	e00d      	b.n	80024fa <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024e6:	e008      	b.n	80024fa <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024f4:	e001      	b.n	80024fa <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	50000100 	.word	0x50000100
 8002508:	50000300 	.word	0x50000300
 800250c:	50000700 	.word	0x50000700
 8002510:	50000400 	.word	0x50000400
 8002514:	080033dd 	.word	0x080033dd
 8002518:	08003457 	.word	0x08003457
 800251c:	08003473 	.word	0x08003473

08002520 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <HAL_ADC_IRQHandler+0x38>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80bc 	beq.w	80026dc <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80b6 	beq.w	80026dc <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002590:	d004      	beq.n	800259c <HAL_ADC_IRQHandler+0x7c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a90      	ldr	r2, [pc, #576]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d106      	bne.n	80025aa <HAL_ADC_IRQHandler+0x8a>
 800259c:	4b8f      	ldr	r3, [pc, #572]	; (80027dc <HAL_ADC_IRQHandler+0x2bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d03e      	beq.n	8002626 <HAL_ADC_IRQHandler+0x106>
 80025a8:	e005      	b.n	80025b6 <HAL_ADC_IRQHandler+0x96>
 80025aa:	4b8d      	ldr	r3, [pc, #564]	; (80027e0 <HAL_ADC_IRQHandler+0x2c0>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d037      	beq.n	8002626 <HAL_ADC_IRQHandler+0x106>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025be:	d004      	beq.n	80025ca <HAL_ADC_IRQHandler+0xaa>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a84      	ldr	r2, [pc, #528]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d106      	bne.n	80025d8 <HAL_ADC_IRQHandler+0xb8>
 80025ca:	4b84      	ldr	r3, [pc, #528]	; (80027dc <HAL_ADC_IRQHandler+0x2bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d027      	beq.n	8002626 <HAL_ADC_IRQHandler+0x106>
 80025d6:	e005      	b.n	80025e4 <HAL_ADC_IRQHandler+0xc4>
 80025d8:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <HAL_ADC_IRQHandler+0x2c0>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d020      	beq.n	8002626 <HAL_ADC_IRQHandler+0x106>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ec:	d004      	beq.n	80025f8 <HAL_ADC_IRQHandler+0xd8>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a79      	ldr	r2, [pc, #484]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d106      	bne.n	8002606 <HAL_ADC_IRQHandler+0xe6>
 80025f8:	4b78      	ldr	r3, [pc, #480]	; (80027dc <HAL_ADC_IRQHandler+0x2bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2b09      	cmp	r3, #9
 8002602:	d010      	beq.n	8002626 <HAL_ADC_IRQHandler+0x106>
 8002604:	e005      	b.n	8002612 <HAL_ADC_IRQHandler+0xf2>
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_ADC_IRQHandler+0x2c0>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2b09      	cmp	r3, #9
 8002610:	d009      	beq.n	8002626 <HAL_ADC_IRQHandler+0x106>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261a:	d004      	beq.n	8002626 <HAL_ADC_IRQHandler+0x106>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a70      	ldr	r2, [pc, #448]	; (80027e4 <HAL_ADC_IRQHandler+0x2c4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d104      	bne.n	8002630 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e00f      	b.n	8002650 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002638:	d004      	beq.n	8002644 <HAL_ADC_IRQHandler+0x124>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a66      	ldr	r2, [pc, #408]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d102      	bne.n	800264a <HAL_ADC_IRQHandler+0x12a>
 8002644:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002648:	e000      	b.n	800264c <HAL_ADC_IRQHandler+0x12c>
 800264a:	4b66      	ldr	r3, [pc, #408]	; (80027e4 <HAL_ADC_IRQHandler+0x2c4>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800265a:	2b00      	cmp	r3, #0
 800265c:	d137      	bne.n	80026ce <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002664:	2b00      	cmp	r3, #0
 8002666:	d132      	bne.n	80026ce <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02d      	beq.n	80026ce <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11a      	bne.n	80026b6 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020c 	bic.w	r2, r2, #12
 800268e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d112      	bne.n	80026ce <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
 80026b4:	e00b      	b.n	80026ce <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fbe8 	bl	8001ea4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	220c      	movs	r2, #12
 80026da:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x1d0>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8138 	beq.w	800296c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8132 	beq.w	800296c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271c:	d004      	beq.n	8002728 <HAL_ADC_IRQHandler+0x208>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d106      	bne.n	8002736 <HAL_ADC_IRQHandler+0x216>
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_ADC_IRQHandler+0x2bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03e      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x292>
 8002734:	e005      	b.n	8002742 <HAL_ADC_IRQHandler+0x222>
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_ADC_IRQHandler+0x2c0>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2b00      	cmp	r3, #0
 8002740:	d037      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x292>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274a:	d004      	beq.n	8002756 <HAL_ADC_IRQHandler+0x236>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d106      	bne.n	8002764 <HAL_ADC_IRQHandler+0x244>
 8002756:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_ADC_IRQHandler+0x2bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2b05      	cmp	r3, #5
 8002760:	d027      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x292>
 8002762:	e005      	b.n	8002770 <HAL_ADC_IRQHandler+0x250>
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_ADC_IRQHandler+0x2c0>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2b05      	cmp	r3, #5
 800276e:	d020      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x292>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002778:	d004      	beq.n	8002784 <HAL_ADC_IRQHandler+0x264>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d106      	bne.n	8002792 <HAL_ADC_IRQHandler+0x272>
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_ADC_IRQHandler+0x2bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2b09      	cmp	r3, #9
 800278e:	d010      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x292>
 8002790:	e005      	b.n	800279e <HAL_ADC_IRQHandler+0x27e>
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_ADC_IRQHandler+0x2c0>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2b09      	cmp	r3, #9
 800279c:	d009      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x292>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x292>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <HAL_ADC_IRQHandler+0x2c4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d104      	bne.n	80027bc <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e018      	b.n	80027ee <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c4:	d004      	beq.n	80027d0 <HAL_ADC_IRQHandler+0x2b0>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <HAL_ADC_IRQHandler+0x2b8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10b      	bne.n	80027e8 <HAL_ADC_IRQHandler+0x2c8>
 80027d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027d4:	e009      	b.n	80027ea <HAL_ADC_IRQHandler+0x2ca>
 80027d6:	bf00      	nop
 80027d8:	50000100 	.word	0x50000100
 80027dc:	50000300 	.word	0x50000300
 80027e0:	50000700 	.word	0x50000700
 80027e4:	50000400 	.word	0x50000400
 80027e8:	4b92      	ldr	r3, [pc, #584]	; (8002a34 <HAL_ADC_IRQHandler+0x514>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 80b0 	bne.w	800295e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80a3 	bne.w	800295e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 809d 	bne.w	800295e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8097 	beq.w	800295e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002838:	d004      	beq.n	8002844 <HAL_ADC_IRQHandler+0x324>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7e      	ldr	r2, [pc, #504]	; (8002a38 <HAL_ADC_IRQHandler+0x518>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d106      	bne.n	8002852 <HAL_ADC_IRQHandler+0x332>
 8002844:	4b7d      	ldr	r3, [pc, #500]	; (8002a3c <HAL_ADC_IRQHandler+0x51c>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2b00      	cmp	r3, #0
 800284e:	d03e      	beq.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
 8002850:	e005      	b.n	800285e <HAL_ADC_IRQHandler+0x33e>
 8002852:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_ADC_IRQHandler+0x520>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2b00      	cmp	r3, #0
 800285c:	d037      	beq.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002866:	d004      	beq.n	8002872 <HAL_ADC_IRQHandler+0x352>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a72      	ldr	r2, [pc, #456]	; (8002a38 <HAL_ADC_IRQHandler+0x518>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d106      	bne.n	8002880 <HAL_ADC_IRQHandler+0x360>
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <HAL_ADC_IRQHandler+0x51c>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2b06      	cmp	r3, #6
 800287c:	d027      	beq.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
 800287e:	e005      	b.n	800288c <HAL_ADC_IRQHandler+0x36c>
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_ADC_IRQHandler+0x520>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2b06      	cmp	r3, #6
 800288a:	d020      	beq.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_IRQHandler+0x380>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a67      	ldr	r2, [pc, #412]	; (8002a38 <HAL_ADC_IRQHandler+0x518>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d106      	bne.n	80028ae <HAL_ADC_IRQHandler+0x38e>
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_ADC_IRQHandler+0x51c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2b07      	cmp	r3, #7
 80028aa:	d010      	beq.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
 80028ac:	e005      	b.n	80028ba <HAL_ADC_IRQHandler+0x39a>
 80028ae:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <HAL_ADC_IRQHandler+0x520>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2b07      	cmp	r3, #7
 80028b8:	d009      	beq.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c2:	d004      	beq.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5a      	ldr	r2, [pc, #360]	; (8002a34 <HAL_ADC_IRQHandler+0x514>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d104      	bne.n	80028d8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e00f      	b.n	80028f8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e0:	d004      	beq.n	80028ec <HAL_ADC_IRQHandler+0x3cc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a54      	ldr	r2, [pc, #336]	; (8002a38 <HAL_ADC_IRQHandler+0x518>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d102      	bne.n	80028f2 <HAL_ADC_IRQHandler+0x3d2>
 80028ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028f0:	e000      	b.n	80028f4 <HAL_ADC_IRQHandler+0x3d4>
 80028f2:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <HAL_ADC_IRQHandler+0x514>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d12d      	bne.n	800295e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11a      	bne.n	8002946 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800291e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d112      	bne.n	800295e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
 8002944:	e00b      	b.n	800295e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0210 	orr.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f936 	bl	8002bd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2260      	movs	r2, #96	; 0x60
 800296a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d011      	beq.n	800299a <HAL_ADC_IRQHandler+0x47a>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fa9d 	bl	8001ecc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_ADC_IRQHandler+0x4aa>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f91c 	bl	8002bf8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d012      	beq.n	80029fa <HAL_ADC_IRQHandler+0x4da>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f90e 	bl	8002c0c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d04f      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x584>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d04a      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e02d      	b.n	8002a78 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x510>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_ADC_IRQHandler+0x518>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d109      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x524>
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <HAL_ADC_IRQHandler+0x51c>)
 8002a32:	e008      	b.n	8002a46 <HAL_ADC_IRQHandler+0x526>
 8002a34:	50000400 	.word	0x50000400
 8002a38:	50000100 	.word	0x50000100
 8002a3c:	50000300 	.word	0x50000300
 8002a40:	50000700 	.word	0x50000700
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_ADC_IRQHandler+0x5c8>)
 8002a46:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10a      	bne.n	8002a78 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002a62:	2301      	movs	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e007      	b.n	8002a78 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002a74:	2301      	movs	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10e      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fa22 	bl	8001ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d018      	beq.n	8002ae0 <HAL_ADC_IRQHandler+0x5c0>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f043 0208 	orr.w	r2, r3, #8
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f882 	bl	8002be4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	50000700 	.word	0x50000700

08002aec <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADCEx_Calibration_Start+0x1c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e05f      	b.n	8002bc8 <HAL_ADCEx_Calibration_Start+0xdc>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fd2d 	bl	8003570 <ADC_Disable>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d14e      	bne.n	8002bbe <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002b34:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b4a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b5a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002b5c:	f7ff f996 	bl	8001e8c <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002b62:	e01c      	b.n	8002b9e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b64:	f7ff f992 	bl	8001e8c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b0a      	cmp	r3, #10
 8002b70:	d915      	bls.n	8002b9e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b80:	d10d      	bne.n	8002b9e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f023 0312 	bic.w	r3, r3, #18
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e014      	b.n	8002bc8 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bac:	d0da      	beq.n	8002b64 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b09b      	sub	sp, #108	; 0x6c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x22>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e2ca      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x5b8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 82ae 	bne.w	80031b6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d81c      	bhi.n	8002c9c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	461a      	mov	r2, r3
 8002c76:	231f      	movs	r3, #31
 8002c78:	4093      	lsls	r3, r2
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	4019      	ands	r1, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
 8002c9a:	e063      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	d81e      	bhi.n	8002ce2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	3b1e      	subs	r3, #30
 8002cb8:	221f      	movs	r2, #31
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	4019      	ands	r1, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	3b1e      	subs	r3, #30
 8002cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce0:	e040      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b0e      	cmp	r3, #14
 8002ce8:	d81e      	bhi.n	8002d28 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	3b3c      	subs	r3, #60	; 0x3c
 8002cfe:	221f      	movs	r2, #31
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	4019      	ands	r1, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	3b3c      	subs	r3, #60	; 0x3c
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
 8002d26:	e01d      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	3b5a      	subs	r3, #90	; 0x5a
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	4019      	ands	r1, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	3b5a      	subs	r3, #90	; 0x5a
 8002d58:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 80e5 	bne.w	8002f3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b09      	cmp	r3, #9
 8002d7a:	d91c      	bls.n	8002db6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b1e      	subs	r3, #30
 8002d8e:	2207      	movs	r2, #7
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	4019      	ands	r1, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6898      	ldr	r0, [r3, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	3b1e      	subs	r3, #30
 8002da8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]
 8002db4:	e019      	b.n	8002dea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6959      	ldr	r1, [r3, #20]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	4019      	ands	r1, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6898      	ldr	r0, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	fa00 f203 	lsl.w	r2, r0, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	08db      	lsrs	r3, r3, #3
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d84f      	bhi.n	8002eac <HAL_ADC_ConfigChannel+0x28c>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_ADC_ConfigChannel+0x1f4>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e47 	.word	0x08002e47
 8002e1c:	08002e69 	.word	0x08002e69
 8002e20:	08002e8b 	.word	0x08002e8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e2a:	4b9a      	ldr	r3, [pc, #616]	; (8003094 <HAL_ADC_ConfigChannel+0x474>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	0691      	lsls	r1, r2, #26
 8002e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e36:	430a      	orrs	r2, r1
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e42:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e44:	e07e      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e4c:	4b91      	ldr	r3, [pc, #580]	; (8003094 <HAL_ADC_ConfigChannel+0x474>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	0691      	lsls	r1, r2, #26
 8002e56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e64:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e66:	e06d      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e6e:	4b89      	ldr	r3, [pc, #548]	; (8003094 <HAL_ADC_ConfigChannel+0x474>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	0691      	lsls	r1, r2, #26
 8002e78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e86:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e88:	e05c      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e90:	4b80      	ldr	r3, [pc, #512]	; (8003094 <HAL_ADC_ConfigChannel+0x474>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	0691      	lsls	r1, r2, #26
 8002e9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ea8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002eaa:	e04b      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	069b      	lsls	r3, r3, #26
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	069b      	lsls	r3, r3, #26
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ef2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	069b      	lsls	r3, r3, #26
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d107      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f16:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10a      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002f3c:	e001      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002f42:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d108      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x344>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x344>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x346>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 8130 	bne.w	80031cc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d00f      	beq.n	8002f94 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2201      	movs	r2, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f92:	e049      	b.n	8003028 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d91c      	bls.n	8002ff0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6999      	ldr	r1, [r3, #24]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b1b      	subs	r3, #27
 8002fc8:	2207      	movs	r2, #7
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	4019      	ands	r1, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6898      	ldr	r0, [r3, #8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b1b      	subs	r3, #27
 8002fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	619a      	str	r2, [r3, #24]
 8002fee:	e01b      	b.n	8003028 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6959      	ldr	r1, [r3, #20]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	2207      	movs	r2, #7
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	4019      	ands	r1, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6898      	ldr	r0, [r3, #8]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	fa00 f203 	lsl.w	r2, r0, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003030:	d004      	beq.n	800303c <HAL_ADC_ConfigChannel+0x41c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_ADC_ConfigChannel+0x478>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x420>
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_ADC_ConfigChannel+0x47c>)
 800303e:	e000      	b.n	8003042 <HAL_ADC_ConfigChannel+0x422>
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <HAL_ADC_ConfigChannel+0x480>)
 8003042:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b10      	cmp	r3, #16
 800304a:	d105      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800304c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800305c:	2b11      	cmp	r3, #17
 800305e:	d105      	bne.n	800306c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003070:	2b12      	cmp	r3, #18
 8003072:	f040 80ab 	bne.w	80031cc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 80a4 	bne.w	80031cc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800308c:	d10a      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x484>
 800308e:	4b02      	ldr	r3, [pc, #8]	; (8003098 <HAL_ADC_ConfigChannel+0x478>)
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e022      	b.n	80030da <HAL_ADC_ConfigChannel+0x4ba>
 8003094:	83fff000 	.word	0x83fff000
 8003098:	50000100 	.word	0x50000100
 800309c:	50000300 	.word	0x50000300
 80030a0:	50000700 	.word	0x50000700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a4e      	ldr	r2, [pc, #312]	; (80031e4 <HAL_ADC_ConfigChannel+0x5c4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d103      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x496>
 80030ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e011      	b.n	80030da <HAL_ADC_ConfigChannel+0x4ba>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d102      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x4a6>
 80030c0:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_ADC_ConfigChannel+0x5cc>)
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e009      	b.n	80030da <HAL_ADC_ConfigChannel+0x4ba>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_ADC_ConfigChannel+0x5cc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d102      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x4b6>
 80030d0:	4b45      	ldr	r3, [pc, #276]	; (80031e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e001      	b.n	80030da <HAL_ADC_ConfigChannel+0x4ba>
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d108      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x4da>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x4da>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_ADC_ConfigChannel+0x4dc>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d150      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003100:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x502>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x502>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_ADC_ConfigChannel+0x504>
 8003122:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003124:	2b00      	cmp	r3, #0
 8003126:	d13c      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b10      	cmp	r3, #16
 800312e:	d11d      	bne.n	800316c <HAL_ADC_ConfigChannel+0x54c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003138:	d118      	bne.n	800316c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800313a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003144:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <HAL_ADC_ConfigChannel+0x5d4>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	0c9a      	lsrs	r2, r3, #18
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800315c:	e002      	b.n	8003164 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3b01      	subs	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f9      	bne.n	800315e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800316a:	e02e      	b.n	80031ca <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b11      	cmp	r3, #17
 8003172:	d10b      	bne.n	800318c <HAL_ADC_ConfigChannel+0x56c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317c:	d106      	bne.n	800318c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800317e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003188:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800318a:	e01e      	b.n	80031ca <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b12      	cmp	r3, #18
 8003192:	d11a      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800319c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031a0:	e013      	b.n	80031ca <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80031b4:	e00a      	b.n	80031cc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80031c8:	e000      	b.n	80031cc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031ca:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031d8:	4618      	mov	r0, r3
 80031da:	376c      	adds	r7, #108	; 0x6c
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	50000100 	.word	0x50000100
 80031e8:	50000400 	.word	0x50000400
 80031ec:	50000500 	.word	0x50000500
 80031f0:	20000004 	.word	0x20000004
 80031f4:	431bde83 	.word	0x431bde83

080031f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b099      	sub	sp, #100	; 0x64
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d102      	bne.n	8003218 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003212:	4b6d      	ldr	r3, [pc, #436]	; (80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	e01a      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d103      	bne.n	800322a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003222:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	e011      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a67      	ldr	r2, [pc, #412]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d102      	bne.n	800323a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003234:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	e009      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a64      	ldr	r2, [pc, #400]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d102      	bne.n	800324a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003244:	4b61      	ldr	r3, [pc, #388]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	e001      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b0      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003262:	2302      	movs	r3, #2
 8003264:	e0a9      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 808d 	bne.w	8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 8086 	bne.w	8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003294:	d004      	beq.n	80032a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032a0:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80032a2:	e000      	b.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80032a6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d040      	beq.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032c2:	035b      	lsls	r3, r3, #13
 80032c4:	430b      	orrs	r3, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d108      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80032ec:	2300      	movs	r3, #0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d15c      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800330e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003310:	2b00      	cmp	r3, #0
 8003312:	d14b      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800331c:	f023 030f 	bic.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	6811      	ldr	r1, [r2, #0]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	6892      	ldr	r2, [r2, #8]
 8003328:	430a      	orrs	r2, r1
 800332a:	431a      	orrs	r2, r3
 800332c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800332e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003330:	e03c      	b.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d108      	bne.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d123      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003380:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d112      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800338e:	f023 030f 	bic.w	r3, r3, #15
 8003392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003394:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003396:	e009      	b.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033aa:	e000      	b.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80033ba:	4618      	mov	r0, r3
 80033bc:	3764      	adds	r7, #100	; 0x64
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	50000100 	.word	0x50000100
 80033cc:	50000400 	.word	0x50000400
 80033d0:	50000500 	.word	0x50000500
 80033d4:	50000300 	.word	0x50000300
 80033d8:	50000700 	.word	0x50000700

080033dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d126      	bne.n	8003444 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800340c:	2b00      	cmp	r3, #0
 800340e:	d115      	bne.n	800343c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003414:	2b00      	cmp	r3, #0
 8003416:	d111      	bne.n	800343c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d105      	bne.n	800343c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7fe fd31 	bl	8001ea4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003442:	e004      	b.n	800344e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7fe fd27 	bl	8001eb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f043 0204 	orr.w	r2, r3, #4
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7fe fd21 	bl	8001ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d108      	bne.n	80034d4 <ADC_Enable+0x2c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <ADC_Enable+0x2c>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <ADC_Enable+0x2e>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d143      	bne.n	8003562 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	4b22      	ldr	r3, [pc, #136]	; (800356c <ADC_Enable+0xc4>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00d      	beq.n	8003504 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0210 	orr.w	r2, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e02f      	b.n	8003564 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003514:	f7fe fcba 	bl	8001e8c <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800351a:	e01b      	b.n	8003554 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800351c:	f7fe fcb6 	bl	8001e8c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d914      	bls.n	8003554 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d00d      	beq.n	8003554 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e007      	b.n	8003564 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d1dc      	bne.n	800351c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	8000003f 	.word	0x8000003f

08003570 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <ADC_Disable+0x2c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <ADC_Disable+0x2c>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <ADC_Disable+0x2e>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d047      	beq.n	8003632 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030d 	and.w	r3, r3, #13
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10f      	bne.n	80035d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0202 	orr.w	r2, r2, #2
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2203      	movs	r2, #3
 80035c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80035c8:	f7fe fc60 	bl	8001e8c <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035ce:	e029      	b.n	8003624 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f043 0210 	orr.w	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	f043 0201 	orr.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e023      	b.n	8003634 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035ec:	f7fe fc4e 	bl	8001e8c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d914      	bls.n	8003624 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10d      	bne.n	8003624 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0210 	orr.w	r2, r3, #16
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e007      	b.n	8003634 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d0dc      	beq.n	80035ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0ed      	b.n	800382a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe f958 	bl	8001910 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003670:	f7fe fc0c 	bl	8001e8c <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003676:	e012      	b.n	800369e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003678:	f7fe fc08 	bl	8001e8c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b0a      	cmp	r3, #10
 8003684:	d90b      	bls.n	800369e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2205      	movs	r2, #5
 8003696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0c5      	b.n	800382a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0e5      	beq.n	8003678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0202 	bic.w	r2, r2, #2
 80036ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036bc:	f7fe fbe6 	bl	8001e8c <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036c2:	e012      	b.n	80036ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036c4:	f7fe fbe2 	bl	8001e8c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b0a      	cmp	r3, #10
 80036d0:	d90b      	bls.n	80036ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2205      	movs	r2, #5
 80036e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e09f      	b.n	800382a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e5      	bne.n	80036c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e1b      	ldrb	r3, [r3, #24]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d108      	bne.n	8003712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e007      	b.n	8003722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7e5b      	ldrb	r3, [r3, #25]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e007      	b.n	800374c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7e9b      	ldrb	r3, [r3, #26]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d108      	bne.n	8003766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e007      	b.n	8003776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0220 	bic.w	r2, r2, #32
 8003774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7edb      	ldrb	r3, [r3, #27]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d108      	bne.n	8003790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0210 	bic.w	r2, r2, #16
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e007      	b.n	80037a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0210 	orr.w	r2, r2, #16
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7f1b      	ldrb	r3, [r3, #28]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d108      	bne.n	80037ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e007      	b.n	80037ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7f5b      	ldrb	r3, [r3, #29]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d108      	bne.n	80037e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0204 	orr.w	r2, r2, #4
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e007      	b.n	80037f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	ea42 0103 	orr.w	r1, r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	1e5a      	subs	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003832:	b480      	push	{r7}
 8003834:	b087      	sub	sp, #28
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003848:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d003      	beq.n	8003858 <HAL_CAN_ConfigFilter+0x26>
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b02      	cmp	r3, #2
 8003854:	f040 80aa 	bne.w	80039ac <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2201      	movs	r2, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	43db      	mvns	r3, r3
 8003882:	401a      	ands	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d123      	bne.n	80038da <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43db      	mvns	r3, r3
 800389c:	401a      	ands	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3248      	adds	r2, #72	; 0x48
 80038ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	3348      	adds	r3, #72	; 0x48
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	440b      	add	r3, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d122      	bne.n	8003928 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003902:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	3248      	adds	r2, #72	; 0x48
 8003908:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800391c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800391e:	6979      	ldr	r1, [r7, #20]
 8003920:	3348      	adds	r3, #72	; 0x48
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	440b      	add	r3, r1
 8003926:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	43db      	mvns	r3, r3
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003942:	e007      	b.n	8003954 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	431a      	orrs	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43db      	mvns	r3, r3
 8003966:	401a      	ands	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800396e:	e007      	b.n	8003980 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	431a      	orrs	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	431a      	orrs	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e006      	b.n	80039ba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d12e      	bne.n	8003a38 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039f2:	f7fe fa4b 	bl	8001e8c <HAL_GetTick>
 80039f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039f8:	e012      	b.n	8003a20 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039fa:	f7fe fa47 	bl	8001e8c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b0a      	cmp	r3, #10
 8003a06:	d90b      	bls.n	8003a20 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2205      	movs	r2, #5
 8003a18:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e012      	b.n	8003a46 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e006      	b.n	8003a46 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b089      	sub	sp, #36	; 0x24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a62:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d003      	beq.n	8003a7a <HAL_CAN_AddTxMessage+0x2c>
 8003a72:	7ffb      	ldrb	r3, [r7, #31]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	f040 80ad 	bne.w	8003bd4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8095 	beq.w	8003bc4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	0e1b      	lsrs	r3, r3, #24
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	6809      	ldr	r1, [r1, #0]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	440b      	add	r3, r1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e00f      	b.n	8003af2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003adc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003ae6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3318      	adds	r3, #24
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	440b      	add	r3, r1
 8003af0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3318      	adds	r3, #24
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	440b      	add	r3, r1
 8003b02:	3304      	adds	r3, #4
 8003b04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	7d1b      	ldrb	r3, [r3, #20]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d111      	bne.n	8003b32 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3318      	adds	r3, #24
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	6811      	ldr	r1, [r2, #0]
 8003b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3304      	adds	r3, #4
 8003b30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3307      	adds	r3, #7
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	061a      	lsls	r2, r3, #24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3306      	adds	r3, #6
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3305      	adds	r3, #5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	3204      	adds	r2, #4
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	4610      	mov	r0, r2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	6811      	ldr	r1, [r2, #0]
 8003b5a:	ea43 0200 	orr.w	r2, r3, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	440b      	add	r3, r1
 8003b64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003b68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3303      	adds	r3, #3
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	061a      	lsls	r2, r3, #24
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3302      	adds	r3, #2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	4313      	orrs	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6811      	ldr	r1, [r2, #0]
 8003b90:	ea43 0200 	orr.w	r2, r3, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	440b      	add	r3, r1
 8003b9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003b9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	4413      	add	r3, r2
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	6811      	ldr	r1, [r2, #0]
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3318      	adds	r3, #24
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	440b      	add	r3, r1
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e00e      	b.n	8003be2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e006      	b.n	8003be2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c02:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d003      	beq.n	8003c12 <HAL_CAN_GetRxMessage+0x24>
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	f040 8103 	bne.w	8003e18 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10e      	bne.n	8003c36 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d116      	bne.n	8003c54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0f7      	b.n	8003e26 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0e8      	b.n	8003e26 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	331b      	adds	r3, #27
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	4413      	add	r3, r2
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0204 	and.w	r2, r3, #4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	331b      	adds	r3, #27
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0d5b      	lsrs	r3, r3, #21
 8003c82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	331b      	adds	r3, #27
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	4413      	add	r3, r2
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	08db      	lsrs	r3, r3, #3
 8003c9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	331b      	adds	r3, #27
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	4413      	add	r3, r2
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0202 	and.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	331b      	adds	r3, #27
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	611a      	str	r2, [r3, #16]
 8003cd8:	e00b      	b.n	8003cf2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	331b      	adds	r3, #27
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	331b      	adds	r3, #27
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3304      	adds	r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	331b      	adds	r3, #27
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	0a1a      	lsrs	r2, r3, #8
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0c1a      	lsrs	r2, r3, #16
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	3302      	adds	r3, #2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0e1a      	lsrs	r2, r3, #24
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	3303      	adds	r3, #3
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0a1a      	lsrs	r2, r3, #8
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	3305      	adds	r3, #5
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0c1a      	lsrs	r2, r3, #16
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	3306      	adds	r3, #6
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	0e1a      	lsrs	r2, r3, #24
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	3307      	adds	r3, #7
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0220 	orr.w	r2, r2, #32
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	e007      	b.n	8003e14 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0220 	orr.w	r2, r2, #32
 8003e12:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e006      	b.n	8003e26 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
  }
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e42:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d002      	beq.n	8003e50 <HAL_CAN_ActivateNotification+0x1e>
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d109      	bne.n	8003e64 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6959      	ldr	r1, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e006      	b.n	8003e72 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08a      	sub	sp, #40	; 0x28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d07c      	beq.n	8003fbe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d023      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f983 	bl	80041ec <HAL_CAN_TxMailbox0CompleteCallback>
 8003ee6:	e016      	b.n	8003f16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	e00c      	b.n	8003f16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	e002      	b.n	8003f16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f989 	bl	8004228 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d024      	beq.n	8003f6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f963 	bl	8004200 <HAL_CAN_TxMailbox1CompleteCallback>
 8003f3a:	e016      	b.n	8003f6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4e:	e00c      	b.n	8003f6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e002      	b.n	8003f6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f969 	bl	800423c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d024      	beq.n	8003fbe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f943 	bl	8004214 <HAL_CAN_TxMailbox2CompleteCallback>
 8003f8e:	e016      	b.n	8003fbe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa2:	e00c      	b.n	8003fbe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	e002      	b.n	8003fbe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f949 	bl	8004250 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2210      	movs	r2, #16
 8003fe0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d006      	beq.n	8004004 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f930 	bl	8004264 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7fc fed7 	bl	8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800403c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2210      	movs	r2, #16
 8004044:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2208      	movs	r2, #8
 8004060:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f912 	bl	800428c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f8f9 	bl	8004278 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2210      	movs	r2, #16
 80040a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8fc 	bl	80042a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2208      	movs	r2, #8
 80040c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8f5 	bl	80042b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d07b      	beq.n	80041cc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d072      	beq.n	80041c4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	2b00      	cmp	r3, #0
 800413a:	d043      	beq.n	80041c4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004142:	2b00      	cmp	r3, #0
 8004144:	d03e      	beq.n	80041c4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800414c:	2b60      	cmp	r3, #96	; 0x60
 800414e:	d02b      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x32a>
 8004150:	2b60      	cmp	r3, #96	; 0x60
 8004152:	d82e      	bhi.n	80041b2 <HAL_CAN_IRQHandler+0x334>
 8004154:	2b50      	cmp	r3, #80	; 0x50
 8004156:	d022      	beq.n	800419e <HAL_CAN_IRQHandler+0x320>
 8004158:	2b50      	cmp	r3, #80	; 0x50
 800415a:	d82a      	bhi.n	80041b2 <HAL_CAN_IRQHandler+0x334>
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d019      	beq.n	8004194 <HAL_CAN_IRQHandler+0x316>
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d826      	bhi.n	80041b2 <HAL_CAN_IRQHandler+0x334>
 8004164:	2b30      	cmp	r3, #48	; 0x30
 8004166:	d010      	beq.n	800418a <HAL_CAN_IRQHandler+0x30c>
 8004168:	2b30      	cmp	r3, #48	; 0x30
 800416a:	d822      	bhi.n	80041b2 <HAL_CAN_IRQHandler+0x334>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d002      	beq.n	8004176 <HAL_CAN_IRQHandler+0x2f8>
 8004170:	2b20      	cmp	r3, #32
 8004172:	d005      	beq.n	8004180 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004174:	e01d      	b.n	80041b2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800417e:	e019      	b.n	80041b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004188:	e014      	b.n	80041b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	f043 0320 	orr.w	r3, r3, #32
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004192:	e00f      	b.n	80041b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800419c:	e00a      	b.n	80041b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041a6:	e005      	b.n	80041b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041b0:	e000      	b.n	80041b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80041b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2204      	movs	r2, #4
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f872 	bl	80042c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80041e4:	bf00      	nop
 80041e6:	3728      	adds	r7, #40	; 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <__NVIC_SetPriorityGrouping>:
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <__NVIC_SetPriorityGrouping+0x44>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f8:	4013      	ands	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <__NVIC_SetPriorityGrouping+0x44>)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	60d3      	str	r3, [r2, #12]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <__NVIC_GetPriorityGrouping>:
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <__NVIC_GetPriorityGrouping+0x18>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f003 0307 	and.w	r3, r3, #7
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <__NVIC_EnableIRQ>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	2b00      	cmp	r3, #0
 8004350:	db0b      	blt.n	800436a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 021f 	and.w	r2, r3, #31
 8004358:	4907      	ldr	r1, [pc, #28]	; (8004378 <__NVIC_EnableIRQ+0x38>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2001      	movs	r0, #1
 8004362:	fa00 f202 	lsl.w	r2, r0, r2
 8004366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000e100 	.word	0xe000e100

0800437c <__NVIC_SetPriority>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	db0a      	blt.n	80043a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	490c      	ldr	r1, [pc, #48]	; (80043c8 <__NVIC_SetPriority+0x4c>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	0112      	lsls	r2, r2, #4
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	440b      	add	r3, r1
 80043a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043a4:	e00a      	b.n	80043bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <__NVIC_SetPriority+0x50>)
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3b04      	subs	r3, #4
 80043b4:	0112      	lsls	r2, r2, #4
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	440b      	add	r3, r1
 80043ba:	761a      	strb	r2, [r3, #24]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <NVIC_EncodePriority>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f1c3 0307 	rsb	r3, r3, #7
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	bf28      	it	cs
 80043ee:	2304      	movcs	r3, #4
 80043f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d902      	bls.n	8004400 <NVIC_EncodePriority+0x30>
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3b03      	subs	r3, #3
 80043fe:	e000      	b.n	8004402 <NVIC_EncodePriority+0x32>
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	401a      	ands	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	43d9      	mvns	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	4313      	orrs	r3, r2
}
 800442a:	4618      	mov	r0, r3
 800442c:	3724      	adds	r7, #36	; 0x24
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004448:	d301      	bcc.n	800444e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800444a:	2301      	movs	r3, #1
 800444c:	e00f      	b.n	800446e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <SysTick_Config+0x40>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3b01      	subs	r3, #1
 8004454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004456:	210f      	movs	r1, #15
 8004458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800445c:	f7ff ff8e 	bl	800437c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <SysTick_Config+0x40>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004466:	4b04      	ldr	r3, [pc, #16]	; (8004478 <SysTick_Config+0x40>)
 8004468:	2207      	movs	r2, #7
 800446a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	e000e010 	.word	0xe000e010

0800447c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ff29 	bl	80042dc <__NVIC_SetPriorityGrouping>
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044a4:	f7ff ff3e 	bl	8004324 <__NVIC_GetPriorityGrouping>
 80044a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7ff ff8e 	bl	80043d0 <NVIC_EncodePriority>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff5d 	bl	800437c <__NVIC_SetPriority>
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff31 	bl	8004340 <__NVIC_EnableIRQ>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ffa2 	bl	8004438 <SysTick_Config>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e037      	b.n	8004584 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800452a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800452e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f940 	bl	80047ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}  
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Start_IT+0x20>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e04a      	b.n	8004642 <HAL_DMA_Start_IT+0xb6>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d13a      	bne.n	8004634 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8d4 	bl	8004790 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 020e 	orr.w	r2, r2, #14
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e00f      	b.n	8004622 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 020a 	orr.w	r2, r2, #10
 8004610:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0204 	bic.w	r2, r2, #4
 8004620:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e005      	b.n	8004640 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004640:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2204      	movs	r2, #4
 8004668:	409a      	lsls	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d024      	beq.n	80046bc <HAL_DMA_IRQHandler+0x72>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01f      	beq.n	80046bc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d107      	bne.n	800469a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0204 	bic.w	r2, r2, #4
 8004698:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2104      	movs	r1, #4
 80046a4:	fa01 f202 	lsl.w	r2, r1, r2
 80046a8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d06a      	beq.n	8004788 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80046ba:	e065      	b.n	8004788 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2202      	movs	r2, #2
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdc>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 020a 	bic.w	r2, r2, #10
 80046f2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	2102      	movs	r1, #2
 8004706:	fa01 f202 	lsl.w	r2, r1, r2
 800470a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d035      	beq.n	8004788 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004724:	e030      	b.n	8004788 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2208      	movs	r2, #8
 800472c:	409a      	lsls	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d028      	beq.n	8004788 <HAL_DMA_IRQHandler+0x13e>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d023      	beq.n	8004788 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 020e 	bic.w	r2, r2, #14
 800474e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f202 	lsl.w	r2, r1, r2
 800475e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
    }
  }
}  
 8004786:	e7ff      	b.n	8004788 <HAL_DMA_IRQHandler+0x13e>
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ac:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d108      	bne.n	80047d0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047ce:	e007      	b.n	80047e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <DMA_CalcBaseAndBitshift+0x60>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d80f      	bhi.n	8004820 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <DMA_CalcBaseAndBitshift+0x64>)
 8004808:	4413      	add	r3, r2
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <DMA_CalcBaseAndBitshift+0x68>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	009a      	lsls	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a0f      	ldr	r2, [pc, #60]	; (8004858 <DMA_CalcBaseAndBitshift+0x6c>)
 800481c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800481e:	e00e      	b.n	800483e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <DMA_CalcBaseAndBitshift+0x70>)
 8004828:	4413      	add	r3, r2
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <DMA_CalcBaseAndBitshift+0x68>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	009a      	lsls	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <DMA_CalcBaseAndBitshift+0x74>)
 800483c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40020407 	.word	0x40020407
 8004850:	bffdfff8 	.word	0xbffdfff8
 8004854:	cccccccd 	.word	0xcccccccd
 8004858:	40020000 	.word	0x40020000
 800485c:	bffdfbf8 	.word	0xbffdfbf8
 8004860:	40020400 	.word	0x40020400

08004864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004872:	e160      	b.n	8004b36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2101      	movs	r1, #1
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	fa01 f303 	lsl.w	r3, r1, r3
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8152 	beq.w	8004b30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d005      	beq.n	80048a4 <HAL_GPIO_Init+0x40>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d130      	bne.n	8004906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4013      	ands	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048da:	2201      	movs	r2, #1
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 0201 	and.w	r2, r3, #1
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b03      	cmp	r3, #3
 8004910:	d017      	beq.n	8004942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	2203      	movs	r2, #3
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d123      	bne.n	8004996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	08da      	lsrs	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3208      	adds	r2, #8
 8004956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	220f      	movs	r2, #15
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	08da      	lsrs	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3208      	adds	r2, #8
 8004990:	6939      	ldr	r1, [r7, #16]
 8004992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	2203      	movs	r2, #3
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0203 	and.w	r2, r3, #3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80ac 	beq.w	8004b30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <HAL_GPIO_Init+0x2f0>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	4a5d      	ldr	r2, [pc, #372]	; (8004b54 <HAL_GPIO_Init+0x2f0>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6193      	str	r3, [r2, #24]
 80049e4:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <HAL_GPIO_Init+0x2f0>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049f0:	4a59      	ldr	r2, [pc, #356]	; (8004b58 <HAL_GPIO_Init+0x2f4>)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	089b      	lsrs	r3, r3, #2
 80049f6:	3302      	adds	r3, #2
 80049f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	220f      	movs	r2, #15
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a1a:	d025      	beq.n	8004a68 <HAL_GPIO_Init+0x204>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a4f      	ldr	r2, [pc, #316]	; (8004b5c <HAL_GPIO_Init+0x2f8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d01f      	beq.n	8004a64 <HAL_GPIO_Init+0x200>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a4e      	ldr	r2, [pc, #312]	; (8004b60 <HAL_GPIO_Init+0x2fc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d019      	beq.n	8004a60 <HAL_GPIO_Init+0x1fc>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a4d      	ldr	r2, [pc, #308]	; (8004b64 <HAL_GPIO_Init+0x300>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d013      	beq.n	8004a5c <HAL_GPIO_Init+0x1f8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a4c      	ldr	r2, [pc, #304]	; (8004b68 <HAL_GPIO_Init+0x304>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00d      	beq.n	8004a58 <HAL_GPIO_Init+0x1f4>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <HAL_GPIO_Init+0x308>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <HAL_GPIO_Init+0x1f0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a4a      	ldr	r2, [pc, #296]	; (8004b70 <HAL_GPIO_Init+0x30c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <HAL_GPIO_Init+0x1ec>
 8004a4c:	2306      	movs	r3, #6
 8004a4e:	e00c      	b.n	8004a6a <HAL_GPIO_Init+0x206>
 8004a50:	2307      	movs	r3, #7
 8004a52:	e00a      	b.n	8004a6a <HAL_GPIO_Init+0x206>
 8004a54:	2305      	movs	r3, #5
 8004a56:	e008      	b.n	8004a6a <HAL_GPIO_Init+0x206>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	e006      	b.n	8004a6a <HAL_GPIO_Init+0x206>
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e004      	b.n	8004a6a <HAL_GPIO_Init+0x206>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e002      	b.n	8004a6a <HAL_GPIO_Init+0x206>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <HAL_GPIO_Init+0x206>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	f002 0203 	and.w	r2, r2, #3
 8004a70:	0092      	lsls	r2, r2, #2
 8004a72:	4093      	lsls	r3, r2
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a7a:	4937      	ldr	r1, [pc, #220]	; (8004b58 <HAL_GPIO_Init+0x2f4>)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	089b      	lsrs	r3, r3, #2
 8004a80:	3302      	adds	r3, #2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a88:	4b3a      	ldr	r3, [pc, #232]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004aac:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b06:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b2a:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <HAL_GPIO_Init+0x310>)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3301      	adds	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f ae97 	bne.w	8004874 <HAL_GPIO_Init+0x10>
  }
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	48000400 	.word	0x48000400
 8004b60:	48000800 	.word	0x48000800
 8004b64:	48000c00 	.word	0x48000c00
 8004b68:	48001000 	.word	0x48001000
 8004b6c:	48001400 	.word	0x48001400
 8004b70:	48001800 	.word	0x48001800
 8004b74:	40010400 	.word	0x40010400

08004b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	e001      	b.n	8004b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bb8:	787b      	ldrb	r3, [r7, #1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bc4:	e002      	b.n	8004bcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004be8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f001 b83a 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 816f 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c14:	4bb5      	ldr	r3, [pc, #724]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d00c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c20:	4bb2      	ldr	r3, [pc, #712]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d15c      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x10e>
 8004c2c:	4baf      	ldr	r3, [pc, #700]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d155      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x10e>
 8004c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <HAL_RCC_OscConfig+0x94>
 8004c66:	4ba1      	ldr	r3, [pc, #644]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	e015      	b.n	8004c98 <HAL_RCC_OscConfig+0xc0>
 8004c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c88:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004c8c:	fa93 f3a3 	rbit	r3, r3
 8004c90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c94:	4b95      	ldr	r3, [pc, #596]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c9c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004ca0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004ca4:	fa92 f2a2 	rbit	r2, r2
 8004ca8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004cac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004cb0:	fab2 f282 	clz	r2, r2
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	f042 0220 	orr.w	r2, r2, #32
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	f002 021f 	and.w	r2, r2, #31
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8111 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x318>
 8004cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 8108 	bne.w	8004ef0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f000 bfc6 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12e>
 8004cf8:	4b7c      	ldr	r3, [pc, #496]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a7b      	ldr	r2, [pc, #492]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e036      	b.n	8004d74 <HAL_RCC_OscConfig+0x19c>
 8004d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x158>
 8004d16:	4b75      	ldr	r3, [pc, #468]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a74      	ldr	r2, [pc, #464]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b72      	ldr	r3, [pc, #456]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a71      	ldr	r2, [pc, #452]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e021      	b.n	8004d74 <HAL_RCC_OscConfig+0x19c>
 8004d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x184>
 8004d42:	4b6a      	ldr	r3, [pc, #424]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a69      	ldr	r2, [pc, #420]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b67      	ldr	r3, [pc, #412]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a66      	ldr	r2, [pc, #408]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x19c>
 8004d5c:	4b63      	ldr	r3, [pc, #396]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a62      	ldr	r2, [pc, #392]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b60      	ldr	r3, [pc, #384]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5f      	ldr	r2, [pc, #380]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d72:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d059      	beq.n	8004e38 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fd f882 	bl	8001e8c <HAL_GetTick>
 8004d88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8e:	f7fd f87d 	bl	8001e8c <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d902      	bls.n	8004da4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	f000 bf67 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
 8004da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004da8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004db8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbc:	fab3 f383 	clz	r3, r3
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d102      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x1fe>
 8004dd0:	4b46      	ldr	r3, [pc, #280]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	e015      	b.n	8004e02 <HAL_RCC_OscConfig+0x22a>
 8004dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004df2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004df6:	fa93 f3a3 	rbit	r3, r3
 8004dfa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e06:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004e0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004e0e:	fa92 f2a2 	rbit	r2, r2
 8004e12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004e16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004e1a:	fab2 f282 	clz	r2, r2
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	f042 0220 	orr.w	r2, r2, #32
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	f002 021f 	and.w	r2, r2, #31
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0ab      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1b6>
 8004e36:	e05c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e38:	f7fd f828 	bl	8001e8c <HAL_GetTick>
 8004e3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e42:	f7fd f823 	bl	8001e8c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d902      	bls.n	8004e58 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	f000 bf0d 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
 8004e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e5c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004e6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e70:	fab3 f383 	clz	r3, r3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d102      	bne.n	8004e8a <HAL_RCC_OscConfig+0x2b2>
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	e015      	b.n	8004eb6 <HAL_RCC_OscConfig+0x2de>
 8004e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004e96:	fa93 f3a3 	rbit	r3, r3
 8004e9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ea2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <HAL_RCC_OscConfig+0x314>)
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004ebe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004ec2:	fa92 f2a2 	rbit	r2, r2
 8004ec6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004eca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ece:	fab2 f282 	clz	r2, r2
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	f042 0220 	orr.w	r2, r2, #32
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	f002 021f 	and.w	r2, r2, #31
 8004ede:	2101      	movs	r1, #1
 8004ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1ab      	bne.n	8004e42 <HAL_RCC_OscConfig+0x26a>
 8004eea:	e002      	b.n	8004ef2 <HAL_RCC_OscConfig+0x31a>
 8004eec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 817f 	beq.w	8005206 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f08:	4ba7      	ldr	r3, [pc, #668]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f14:	4ba4      	ldr	r3, [pc, #656]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d173      	bne.n	8005008 <HAL_RCC_OscConfig+0x430>
 8004f20:	4ba1      	ldr	r3, [pc, #644]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2c:	d16c      	bne.n	8005008 <HAL_RCC_OscConfig+0x430>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004f38:	fa93 f3a3 	rbit	r3, r3
 8004f3c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004f40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f44:	fab3 f383 	clz	r3, r3
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <HAL_RCC_OscConfig+0x386>
 8004f58:	4b93      	ldr	r3, [pc, #588]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	e013      	b.n	8004f86 <HAL_RCC_OscConfig+0x3ae>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004f68:	fa93 f3a3 	rbit	r3, r3
 8004f6c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004f70:	2302      	movs	r3, #2
 8004f72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004f76:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004f82:	4b89      	ldr	r3, [pc, #548]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2202      	movs	r2, #2
 8004f88:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004f8c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004f90:	fa92 f2a2 	rbit	r2, r2
 8004f94:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004f98:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004f9c:	fab2 f282 	clz	r2, r2
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	f042 0220 	orr.w	r2, r2, #32
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	f002 021f 	and.w	r2, r2, #31
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCC_OscConfig+0x3f6>
 8004fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d002      	beq.n	8004fce <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f000 be52 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fce:	4b76      	ldr	r3, [pc, #472]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	21f8      	movs	r1, #248	; 0xf8
 8004fe4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004fec:	fa91 f1a1 	rbit	r1, r1
 8004ff0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004ff4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ff8:	fab1 f181 	clz	r1, r1
 8004ffc:	b2c9      	uxtb	r1, r1
 8004ffe:	408b      	lsls	r3, r1
 8005000:	4969      	ldr	r1, [pc, #420]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005006:	e0fe      	b.n	8005206 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800500c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8088 	beq.w	800512a <HAL_RCC_OscConfig+0x552>
 800501a:	2301      	movs	r3, #1
 800501c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005020:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800502c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800503a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	461a      	mov	r2, r3
 8005042:	2301      	movs	r3, #1
 8005044:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fc ff21 	bl	8001e8c <HAL_GetTick>
 800504a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005050:	f7fc ff1c 	bl	8001e8c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d902      	bls.n	8005066 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	f000 be06 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
 8005066:	2302      	movs	r3, #2
 8005068:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005078:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d102      	bne.n	8005096 <HAL_RCC_OscConfig+0x4be>
 8005090:	4b45      	ldr	r3, [pc, #276]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	e013      	b.n	80050be <HAL_RCC_OscConfig+0x4e6>
 8005096:	2302      	movs	r3, #2
 8005098:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80050a0:	fa93 f3a3 	rbit	r3, r3
 80050a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80050a8:	2302      	movs	r3, #2
 80050aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80050ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80050b2:	fa93 f3a3 	rbit	r3, r3
 80050b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80050ba:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2202      	movs	r2, #2
 80050c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80050c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80050c8:	fa92 f2a2 	rbit	r2, r2
 80050cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80050d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80050d4:	fab2 f282 	clz	r2, r2
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	f042 0220 	orr.w	r2, r2, #32
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	f002 021f 	and.w	r2, r2, #31
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0af      	beq.n	8005050 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	21f8      	movs	r1, #248	; 0xf8
 8005106:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800510e:	fa91 f1a1 	rbit	r1, r1
 8005112:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005116:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800511a:	fab1 f181 	clz	r1, r1
 800511e:	b2c9      	uxtb	r1, r1
 8005120:	408b      	lsls	r3, r1
 8005122:	4921      	ldr	r1, [pc, #132]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	e06d      	b.n	8005206 <HAL_RCC_OscConfig+0x62e>
 800512a:	2301      	movs	r3, #1
 800512c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005130:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800513c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005140:	fab3 f383 	clz	r3, r3
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800514a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fc fe99 	bl	8001e8c <HAL_GetTick>
 800515a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	e00a      	b.n	8005176 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005160:	f7fc fe94 	bl	8001e8c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d902      	bls.n	8005176 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	f000 bd7e 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
 8005176:	2302      	movs	r3, #2
 8005178:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005188:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	b2db      	uxtb	r3, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d105      	bne.n	80051ac <HAL_RCC_OscConfig+0x5d4>
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <HAL_RCC_OscConfig+0x5d0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	e016      	b.n	80051d4 <HAL_RCC_OscConfig+0x5fc>
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000
 80051ac:	2302      	movs	r3, #2
 80051ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051be:	2302      	movs	r3, #2
 80051c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051c8:	fa93 f3a3 	rbit	r3, r3
 80051cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051d0:	4bbf      	ldr	r3, [pc, #764]	; (80054d0 <HAL_RCC_OscConfig+0x8f8>)
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	2202      	movs	r2, #2
 80051d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80051da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80051de:	fa92 f2a2 	rbit	r2, r2
 80051e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80051e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80051ea:	fab2 f282 	clz	r2, r2
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	f042 0220 	orr.w	r2, r2, #32
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	f002 021f 	and.w	r2, r2, #31
 80051fa:	2101      	movs	r1, #1
 80051fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ac      	bne.n	8005160 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800520a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8113 	beq.w	8005442 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800521c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d07c      	beq.n	8005326 <HAL_RCC_OscConfig+0x74e>
 800522c:	2301      	movs	r3, #1
 800522e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800523e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005242:	fab3 f383 	clz	r3, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	4ba2      	ldr	r3, [pc, #648]	; (80054d4 <HAL_RCC_OscConfig+0x8fc>)
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	461a      	mov	r2, r3
 8005252:	2301      	movs	r3, #1
 8005254:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005256:	f7fc fe19 	bl	8001e8c <HAL_GetTick>
 800525a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525e:	e00a      	b.n	8005276 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005260:	f7fc fe14 	bl	8001e8c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d902      	bls.n	8005276 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	f000 bcfe 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
 8005276:	2302      	movs	r3, #2
 8005278:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005280:	fa93 f2a3 	rbit	r2, r3
 8005284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005288:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005296:	2202      	movs	r2, #2
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800529e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	fa93 f2a3 	rbit	r2, r3
 80052a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052ba:	2202      	movs	r2, #2
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	fa93 f2a3 	rbit	r2, r3
 80052cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d6:	4b7e      	ldr	r3, [pc, #504]	; (80054d0 <HAL_RCC_OscConfig+0x8f8>)
 80052d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052e2:	2102      	movs	r1, #2
 80052e4:	6019      	str	r1, [r3, #0]
 80052e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	fa93 f1a3 	rbit	r1, r3
 80052f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052fc:	6019      	str	r1, [r3, #0]
  return result;
 80052fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005302:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d09d      	beq.n	8005260 <HAL_RCC_OscConfig+0x688>
 8005324:	e08d      	b.n	8005442 <HAL_RCC_OscConfig+0x86a>
 8005326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800532a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005336:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fa93 f2a3 	rbit	r2, r3
 8005340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005344:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005348:	601a      	str	r2, [r3, #0]
  return result;
 800534a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800534e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005352:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	4b5d      	ldr	r3, [pc, #372]	; (80054d4 <HAL_RCC_OscConfig+0x8fc>)
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005368:	f7fc fd90 	bl	8001e8c <HAL_GetTick>
 800536c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005372:	f7fc fd8b 	bl	8001e8c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d902      	bls.n	8005388 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	f000 bc75 	b.w	8005c72 <HAL_RCC_OscConfig+0x109a>
 8005388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800538c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005390:	2202      	movs	r2, #2
 8005392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005398:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	fa93 f2a3 	rbit	r2, r3
 80053a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053b4:	2202      	movs	r2, #2
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	fa93 f2a3 	rbit	r2, r3
 80053c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80053d8:	2202      	movs	r2, #2
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	fa93 f2a3 	rbit	r2, r3
 80053ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80053f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCC_OscConfig+0x8f8>)
 80053f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005400:	2102      	movs	r1, #2
 8005402:	6019      	str	r1, [r3, #0]
 8005404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005408:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	fa93 f1a3 	rbit	r1, r3
 8005412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005416:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800541a:	6019      	str	r1, [r3, #0]
  return result;
 800541c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005420:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d197      	bne.n	8005372 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005446:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 81a5 	beq.w	80057a2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545e:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <HAL_RCC_OscConfig+0x8f8>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d116      	bne.n	8005498 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800546a:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_RCC_OscConfig+0x8f8>)
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_RCC_OscConfig+0x8f8>)
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005474:	61d3      	str	r3, [r2, #28]
 8005476:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <HAL_RCC_OscConfig+0x8f8>)
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800547e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800548c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005490:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <HAL_RCC_OscConfig+0x900>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d121      	bne.n	80054e8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <HAL_RCC_OscConfig+0x900>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <HAL_RCC_OscConfig+0x900>)
 80054aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b0:	f7fc fcec 	bl	8001e8c <HAL_GetTick>
 80054b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	e010      	b.n	80054dc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fc fce7 	bl	8001e8c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	; 0x64
 80054c8:	d908      	bls.n	80054dc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e3d1      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	10908120 	.word	0x10908120
 80054d8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054dc:	4b8d      	ldr	r3, [pc, #564]	; (8005714 <HAL_RCC_OscConfig+0xb3c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0e8      	beq.n	80054ba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d106      	bne.n	8005506 <HAL_RCC_OscConfig+0x92e>
 80054f8:	4b87      	ldr	r3, [pc, #540]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4a86      	ldr	r2, [pc, #536]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	6213      	str	r3, [r2, #32]
 8005504:	e035      	b.n	8005572 <HAL_RCC_OscConfig+0x99a>
 8005506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800550a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10c      	bne.n	8005530 <HAL_RCC_OscConfig+0x958>
 8005516:	4b80      	ldr	r3, [pc, #512]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	4a7f      	ldr	r2, [pc, #508]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	6213      	str	r3, [r2, #32]
 8005522:	4b7d      	ldr	r3, [pc, #500]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	4a7c      	ldr	r2, [pc, #496]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005528:	f023 0304 	bic.w	r3, r3, #4
 800552c:	6213      	str	r3, [r2, #32]
 800552e:	e020      	b.n	8005572 <HAL_RCC_OscConfig+0x99a>
 8005530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005534:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b05      	cmp	r3, #5
 800553e:	d10c      	bne.n	800555a <HAL_RCC_OscConfig+0x982>
 8005540:	4b75      	ldr	r3, [pc, #468]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	4a74      	ldr	r2, [pc, #464]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005546:	f043 0304 	orr.w	r3, r3, #4
 800554a:	6213      	str	r3, [r2, #32]
 800554c:	4b72      	ldr	r3, [pc, #456]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	4a71      	ldr	r2, [pc, #452]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6213      	str	r3, [r2, #32]
 8005558:	e00b      	b.n	8005572 <HAL_RCC_OscConfig+0x99a>
 800555a:	4b6f      	ldr	r3, [pc, #444]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4a6e      	ldr	r2, [pc, #440]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	6213      	str	r3, [r2, #32]
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4a6b      	ldr	r2, [pc, #428]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005576:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8081 	beq.w	8005686 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005584:	f7fc fc82 	bl	8001e8c <HAL_GetTick>
 8005588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558c:	e00b      	b.n	80055a6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fc fc7d 	bl	8001e8c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e365      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
 80055a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055ae:	2202      	movs	r2, #2
 80055b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	fa93 f2a3 	rbit	r2, r3
 80055c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80055d2:	2202      	movs	r2, #2
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	fa93 f2a3 	rbit	r2, r3
 80055e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80055ec:	601a      	str	r2, [r3, #0]
  return result;
 80055ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80055f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d102      	bne.n	8005612 <HAL_RCC_OscConfig+0xa3a>
 800560c:	4b42      	ldr	r3, [pc, #264]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	e013      	b.n	800563a <HAL_RCC_OscConfig+0xa62>
 8005612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005616:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800561a:	2202      	movs	r2, #2
 800561c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005622:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	fa93 f2a3 	rbit	r2, r3
 800562c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005630:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	4b38      	ldr	r3, [pc, #224]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800563e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005642:	2102      	movs	r1, #2
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800564a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	fa92 f1a2 	rbit	r1, r2
 8005654:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005658:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800565c:	6011      	str	r1, [r2, #0]
  return result;
 800565e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005662:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	fab2 f282 	clz	r2, r2
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	f002 021f 	and.w	r2, r2, #31
 8005678:	2101      	movs	r1, #1
 800567a:	fa01 f202 	lsl.w	r2, r1, r2
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d084      	beq.n	800558e <HAL_RCC_OscConfig+0x9b6>
 8005684:	e083      	b.n	800578e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005686:	f7fc fc01 	bl	8001e8c <HAL_GetTick>
 800568a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800568e:	e00b      	b.n	80056a8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fc fbfc 	bl	8001e8c <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e2e4      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
 80056a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80056b0:	2202      	movs	r2, #2
 80056b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	fa93 f2a3 	rbit	r2, r3
 80056c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80056d4:	2202      	movs	r2, #2
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	fa93 f2a3 	rbit	r2, r3
 80056e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80056ee:	601a      	str	r2, [r3, #0]
  return result;
 80056f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80056f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fa:	fab3 f383 	clz	r3, r3
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d106      	bne.n	800571c <HAL_RCC_OscConfig+0xb44>
 800570e:	4b02      	ldr	r3, [pc, #8]	; (8005718 <HAL_RCC_OscConfig+0xb40>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	e017      	b.n	8005744 <HAL_RCC_OscConfig+0xb6c>
 8005714:	40007000 	.word	0x40007000
 8005718:	40021000 	.word	0x40021000
 800571c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005720:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005724:	2202      	movs	r2, #2
 8005726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800572c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	fa93 f2a3 	rbit	r2, r3
 8005736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800573a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	4bb3      	ldr	r3, [pc, #716]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005748:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800574c:	2102      	movs	r1, #2
 800574e:	6011      	str	r1, [r2, #0]
 8005750:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005754:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	fa92 f1a2 	rbit	r1, r2
 800575e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005762:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005766:	6011      	str	r1, [r2, #0]
  return result;
 8005768:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800576c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	fab2 f282 	clz	r2, r2
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	f002 021f 	and.w	r2, r2, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f202 	lsl.w	r2, r1, r2
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d180      	bne.n	8005690 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800578e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005792:	2b01      	cmp	r3, #1
 8005794:	d105      	bne.n	80057a2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005796:	4b9e      	ldr	r3, [pc, #632]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4a9d      	ldr	r2, [pc, #628]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 800579c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 825e 	beq.w	8005c70 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b4:	4b96      	ldr	r3, [pc, #600]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b08      	cmp	r3, #8
 80057be:	f000 821f 	beq.w	8005c00 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	f040 8170 	bne.w	8005ab4 <HAL_RCC_OscConfig+0xedc>
 80057d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80057dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	fa93 f2a3 	rbit	r2, r3
 80057f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80057f8:	601a      	str	r2, [r3, #0]
  return result;
 80057fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005802:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005804:	fab3 f383 	clz	r3, r3
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800580e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fc fb37 	bl	8001e8c <HAL_GetTick>
 800581e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005822:	e009      	b.n	8005838 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005824:	f7fc fb32 	bl	8001e8c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e21c      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
 8005838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800583c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800584a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	fa93 f2a3 	rbit	r2, r3
 8005854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005858:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800585c:	601a      	str	r2, [r3, #0]
  return result;
 800585e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005862:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005866:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005868:	fab3 f383 	clz	r3, r3
 800586c:	b2db      	uxtb	r3, r3
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	d102      	bne.n	8005882 <HAL_RCC_OscConfig+0xcaa>
 800587c:	4b64      	ldr	r3, [pc, #400]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	e027      	b.n	80058d2 <HAL_RCC_OscConfig+0xcfa>
 8005882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005886:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800588a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800588e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005894:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	fa93 f2a3 	rbit	r2, r3
 800589e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80058b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	fa93 f2a3 	rbit	r2, r3
 80058c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058c8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	4b50      	ldr	r3, [pc, #320]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80058da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058de:	6011      	str	r1, [r2, #0]
 80058e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	fa92 f1a2 	rbit	r1, r2
 80058ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058f2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80058f6:	6011      	str	r1, [r2, #0]
  return result;
 80058f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058fc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	fab2 f282 	clz	r2, r2
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	f042 0220 	orr.w	r2, r2, #32
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	f002 021f 	and.w	r2, r2, #31
 8005912:	2101      	movs	r1, #1
 8005914:	fa01 f202 	lsl.w	r2, r1, r2
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d182      	bne.n	8005824 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800591e:	4b3c      	ldr	r3, [pc, #240]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	f023 020f 	bic.w	r2, r3, #15
 8005926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800592a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	4937      	ldr	r1, [pc, #220]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 8005934:	4313      	orrs	r3, r2
 8005936:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005938:	4b35      	ldr	r3, [pc, #212]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005944:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6a19      	ldr	r1, [r3, #32]
 800594c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005950:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	430b      	orrs	r3, r1
 800595a:	492d      	ldr	r1, [pc, #180]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 800595c:	4313      	orrs	r3, r2
 800595e:	604b      	str	r3, [r1, #4]
 8005960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005964:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005968:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800596c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005972:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	fa93 f2a3 	rbit	r2, r3
 800597c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005980:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005984:	601a      	str	r2, [r3, #0]
  return result;
 8005986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800598a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800598e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800599a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	461a      	mov	r2, r3
 80059a2:	2301      	movs	r3, #1
 80059a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a6:	f7fc fa71 	bl	8001e8c <HAL_GetTick>
 80059aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059ae:	e009      	b.n	80059c4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fc fa6c 	bl	8001e8c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e156      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
 80059c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059c8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	fa93 f2a3 	rbit	r2, r3
 80059e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80059e8:	601a      	str	r2, [r3, #0]
  return result;
 80059ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80059f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059f4:	fab3 f383 	clz	r3, r3
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d105      	bne.n	8005a14 <HAL_RCC_OscConfig+0xe3c>
 8005a08:	4b01      	ldr	r3, [pc, #4]	; (8005a10 <HAL_RCC_OscConfig+0xe38>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	e02a      	b.n	8005a64 <HAL_RCC_OscConfig+0xe8c>
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000
 8005a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	fa93 f2a3 	rbit	r2, r3
 8005a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a4c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	fa93 f2a3 	rbit	r2, r3
 8005a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a5a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	4b86      	ldr	r3, [pc, #536]	; (8005c7c <HAL_RCC_OscConfig+0x10a4>)
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a70:	6011      	str	r1, [r2, #0]
 8005a72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	fa92 f1a2 	rbit	r1, r2
 8005a80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a84:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a88:	6011      	str	r1, [r2, #0]
  return result;
 8005a8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a8e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	fab2 f282 	clz	r2, r2
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	f042 0220 	orr.w	r2, r2, #32
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	f002 021f 	and.w	r2, r2, #31
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f43f af7f 	beq.w	80059b0 <HAL_RCC_OscConfig+0xdd8>
 8005ab2:	e0dd      	b.n	8005c70 <HAL_RCC_OscConfig+0x1098>
 8005ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ab8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ac6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	fa93 f2a3 	rbit	r2, r3
 8005ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005ad8:	601a      	str	r2, [r3, #0]
  return result;
 8005ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ade:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005ae2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae4:	fab3 f383 	clz	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005aee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	461a      	mov	r2, r3
 8005af6:	2300      	movs	r3, #0
 8005af8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afa:	f7fc f9c7 	bl	8001e8c <HAL_GetTick>
 8005afe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b02:	e009      	b.n	8005b18 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fc f9c2 	bl	8001e8c <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e0ac      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
 8005b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	fa93 f2a3 	rbit	r2, r3
 8005b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b3c:	601a      	str	r2, [r3, #0]
  return result;
 8005b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b48:	fab3 f383 	clz	r3, r3
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d102      	bne.n	8005b62 <HAL_RCC_OscConfig+0xf8a>
 8005b5c:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCC_OscConfig+0x10a4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	e027      	b.n	8005bb2 <HAL_RCC_OscConfig+0xfda>
 8005b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b66:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b74:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	fa93 f2a3 	rbit	r2, r3
 8005b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	fa93 f2a3 	rbit	r2, r3
 8005ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ba8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <HAL_RCC_OscConfig+0x10a4>)
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bb6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005bbe:	6011      	str	r1, [r2, #0]
 8005bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bc4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	fa92 f1a2 	rbit	r1, r2
 8005bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bd2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005bd6:	6011      	str	r1, [r2, #0]
  return result;
 8005bd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bdc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	fab2 f282 	clz	r2, r2
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	f042 0220 	orr.w	r2, r2, #32
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	f002 021f 	and.w	r2, r2, #31
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d182      	bne.n	8005b04 <HAL_RCC_OscConfig+0xf2c>
 8005bfe:	e037      	b.n	8005c70 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e02e      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <HAL_RCC_OscConfig+0x10a4>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005c1c:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <HAL_RCC_OscConfig+0x10a4>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005c28:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d117      	bne.n	8005c6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005c3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005c40:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d10b      	bne.n	8005c6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000

08005c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b09e      	sub	sp, #120	; 0x78
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e162      	b.n	8005f5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c98:	4b90      	ldr	r3, [pc, #576]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d910      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca6:	4b8d      	ldr	r3, [pc, #564]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 0207 	bic.w	r2, r3, #7
 8005cae:	498b      	ldr	r1, [pc, #556]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb6:	4b89      	ldr	r3, [pc, #548]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e14a      	b.n	8005f5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd4:	4b82      	ldr	r3, [pc, #520]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	497f      	ldr	r1, [pc, #508]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80dc 	beq.w	8005eac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d13c      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xf6>
 8005cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d04:	fa93 f3a3 	rbit	r3, r3
 8005d08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0c:	fab3 f383 	clz	r3, r3
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d102      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xa6>
 8005d20:	4b6f      	ldr	r3, [pc, #444]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	e00f      	b.n	8005d46 <HAL_RCC_ClockConfig+0xc6>
 8005d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d2e:	fa93 f3a3 	rbit	r3, r3
 8005d32:	667b      	str	r3, [r7, #100]	; 0x64
 8005d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d38:	663b      	str	r3, [r7, #96]	; 0x60
 8005d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d3c:	fa93 f3a3 	rbit	r3, r3
 8005d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d42:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4e:	fa92 f2a2 	rbit	r2, r2
 8005d52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d56:	fab2 f282 	clz	r2, r2
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	f042 0220 	orr.w	r2, r2, #32
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	f002 021f 	and.w	r2, r2, #31
 8005d66:	2101      	movs	r1, #1
 8005d68:	fa01 f202 	lsl.w	r2, r1, r2
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d17b      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e0f3      	b.n	8005f5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d13c      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x178>
 8005d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d86:	fa93 f3a3 	rbit	r3, r3
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d102      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x128>
 8005da2:	4b4f      	ldr	r3, [pc, #316]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	e00f      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x148>
 8005da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db0:	fa93 f3a3 	rbit	r3, r3
 8005db4:	647b      	str	r3, [r7, #68]	; 0x44
 8005db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	fa93 f3a3 	rbit	r3, r3
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	4b46      	ldr	r3, [pc, #280]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8005dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd0:	fa92 f2a2 	rbit	r2, r2
 8005dd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd8:	fab2 f282 	clz	r2, r2
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	f042 0220 	orr.w	r2, r2, #32
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	f002 021f 	and.w	r2, r2, #31
 8005de8:	2101      	movs	r1, #1
 8005dea:	fa01 f202 	lsl.w	r2, r1, r2
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d13a      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0b2      	b.n	8005f5e <HAL_RCC_ClockConfig+0x2de>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	fa93 f3a3 	rbit	r3, r3
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e06:	fab3 f383 	clz	r3, r3
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d102      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x1a0>
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	e00d      	b.n	8005e3c <HAL_RCC_ClockConfig+0x1bc>
 8005e20:	2302      	movs	r3, #2
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	fa93 f3a3 	rbit	r3, r3
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	fa93 f3a3 	rbit	r3, r3
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	61ba      	str	r2, [r7, #24]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	fa92 f2a2 	rbit	r2, r2
 8005e46:	617a      	str	r2, [r7, #20]
  return result;
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	fab2 f282 	clz	r2, r2
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	f042 0220 	orr.w	r2, r2, #32
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	f002 021f 	and.w	r2, r2, #31
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e079      	b.n	8005f5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f023 0203 	bic.w	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	491a      	ldr	r1, [pc, #104]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e7c:	f7fc f806 	bl	8001e8c <HAL_GetTick>
 8005e80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e84:	f7fc f802 	bl	8001e8c <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e061      	b.n	8005f5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_RCC_ClockConfig+0x260>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 020c 	and.w	r2, r3, #12
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d1eb      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d214      	bcs.n	8005ee4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 0207 	bic.w	r2, r3, #7
 8005ec2:	4906      	ldr	r1, [pc, #24]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b04      	ldr	r3, [pc, #16]	; (8005edc <HAL_RCC_ClockConfig+0x25c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d005      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e040      	b.n	8005f5e <HAL_RCC_ClockConfig+0x2de>
 8005edc:	40022000 	.word	0x40022000
 8005ee0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <HAL_RCC_ClockConfig+0x2e8>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	491a      	ldr	r1, [pc, #104]	; (8005f68 <HAL_RCC_ClockConfig+0x2e8>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f0e:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <HAL_RCC_ClockConfig+0x2e8>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4912      	ldr	r1, [pc, #72]	; (8005f68 <HAL_RCC_ClockConfig+0x2e8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f22:	f000 f829 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 8005f26:	4601      	mov	r1, r0
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <HAL_RCC_ClockConfig+0x2e8>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f30:	22f0      	movs	r2, #240	; 0xf0
 8005f32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	fa92 f2a2 	rbit	r2, r2
 8005f3a:	60fa      	str	r2, [r7, #12]
  return result;
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	fab2 f282 	clz	r2, r2
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	40d3      	lsrs	r3, r2
 8005f46:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <HAL_RCC_ClockConfig+0x2ec>)
 8005f48:	5cd3      	ldrb	r3, [r2, r3]
 8005f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8005f4e:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <HAL_RCC_ClockConfig+0x2f0>)
 8005f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f52:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <HAL_RCC_ClockConfig+0x2f4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fb ff54 	bl	8001e04 <HAL_InitTick>
  
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3778      	adds	r7, #120	; 0x78
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	0800a438 	.word	0x0800a438
 8005f70:	20000004 	.word	0x20000004
 8005f74:	20000008 	.word	0x20000008

08005f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b08b      	sub	sp, #44	; 0x2c
 8005f7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005f92:	4b2a      	ldr	r3, [pc, #168]	; (800603c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d002      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d003      	beq.n	8005fae <HAL_RCC_GetSysClockFreq+0x36>
 8005fa6:	e03f      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fa8:	4b25      	ldr	r3, [pc, #148]	; (8006040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005faa:	623b      	str	r3, [r7, #32]
      break;
 8005fac:	e03f      	b.n	800602e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005fb4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005fb8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	fa92 f2a2 	rbit	r2, r2
 8005fc0:	607a      	str	r2, [r7, #4]
  return result;
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	fab2 f282 	clz	r2, r2
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	40d3      	lsrs	r3, r2
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005fce:	5cd3      	ldrb	r3, [r2, r3]
 8005fd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005fd2:	4b1a      	ldr	r3, [pc, #104]	; (800603c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	220f      	movs	r2, #15
 8005fdc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	fa92 f2a2 	rbit	r2, r2
 8005fe4:	60fa      	str	r2, [r7, #12]
  return result;
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	fab2 f282 	clz	r2, r2
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	40d3      	lsrs	r3, r2
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ff2:	5cd3      	ldrb	r3, [r2, r3]
 8005ff4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006000:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	fbb2 f2f3 	udiv	r2, r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
 8006010:	e007      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006012:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	fbb2 f2f3 	udiv	r2, r2, r3
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	fb02 f303 	mul.w	r3, r2, r3
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	623b      	str	r3, [r7, #32]
      break;
 8006026:	e002      	b.n	800602e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetSysClockFreq+0xc8>)
 800602a:	623b      	str	r3, [r7, #32]
      break;
 800602c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602e:	6a3b      	ldr	r3, [r7, #32]
}
 8006030:	4618      	mov	r0, r3
 8006032:	372c      	adds	r7, #44	; 0x2c
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40021000 	.word	0x40021000
 8006040:	007a1200 	.word	0x007a1200
 8006044:	0800a448 	.word	0x0800a448
 8006048:	0800a458 	.word	0x0800a458

0800604c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b092      	sub	sp, #72	; 0x48
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800605c:	2300      	movs	r3, #0
 800605e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80d4 	beq.w	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006070:	4b4e      	ldr	r3, [pc, #312]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10e      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800607c:	4b4b      	ldr	r3, [pc, #300]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	4a4a      	ldr	r2, [pc, #296]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006086:	61d3      	str	r3, [r2, #28]
 8006088:	4b48      	ldr	r3, [pc, #288]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609a:	4b45      	ldr	r3, [pc, #276]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d118      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a6:	4b42      	ldr	r3, [pc, #264]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a41      	ldr	r2, [pc, #260]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b2:	f7fb feeb 	bl	8001e8c <HAL_GetTick>
 80060b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b8:	e008      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ba:	f7fb fee7 	bl	8001e8c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b64      	cmp	r3, #100	; 0x64
 80060c6:	d901      	bls.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e1d6      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060cc:	4b38      	ldr	r3, [pc, #224]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060d8:	4b34      	ldr	r3, [pc, #208]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8084 	beq.w	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d07c      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060f8:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	fa93 f3a3 	rbit	r3, r3
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006112:	fab3 f383 	clz	r3, r3
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	461a      	mov	r2, r3
 8006122:	2301      	movs	r3, #1
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800612a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	fa93 f3a3 	rbit	r3, r3
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006136:	fab3 f383 	clz	r3, r3
 800613a:	b2db      	uxtb	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800614a:	4a18      	ldr	r2, [pc, #96]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d04b      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615a:	f7fb fe97 	bl	8001e8c <HAL_GetTick>
 800615e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006160:	e00a      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006162:	f7fb fe93 	bl	8001e8c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006170:	4293      	cmp	r3, r2
 8006172:	d901      	bls.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e180      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006178:	2302      	movs	r3, #2
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	fa93 f3a3 	rbit	r3, r3
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	2302      	movs	r3, #2
 8006186:	623b      	str	r3, [r7, #32]
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	fa93 f3a3 	rbit	r3, r3
 800618e:	61fb      	str	r3, [r7, #28]
  return result;
 8006190:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006192:	fab3 f383 	clz	r3, r3
 8006196:	b2db      	uxtb	r3, r3
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f043 0302 	orr.w	r3, r3, #2
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d108      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80061a6:	4b01      	ldr	r3, [pc, #4]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	e00d      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40007000 	.word	0x40007000
 80061b4:	10908100 	.word	0x10908100
 80061b8:	2302      	movs	r3, #2
 80061ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	fa93 f3a3 	rbit	r3, r3
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	4b9a      	ldr	r3, [pc, #616]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2202      	movs	r2, #2
 80061ca:	613a      	str	r2, [r7, #16]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	fa92 f2a2 	rbit	r2, r2
 80061d2:	60fa      	str	r2, [r7, #12]
  return result;
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	fab2 f282 	clz	r2, r2
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	f002 021f 	and.w	r2, r2, #31
 80061e6:	2101      	movs	r1, #1
 80061e8:	fa01 f202 	lsl.w	r2, r1, r2
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0b7      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80061f2:	4b8f      	ldr	r3, [pc, #572]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	498c      	ldr	r1, [pc, #560]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006200:	4313      	orrs	r3, r2
 8006202:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006204:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006208:	2b01      	cmp	r3, #1
 800620a:	d105      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800620c:	4b88      	ldr	r3, [pc, #544]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	4a87      	ldr	r2, [pc, #540]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006216:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006224:	4b82      	ldr	r3, [pc, #520]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	f023 0203 	bic.w	r2, r3, #3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	497f      	ldr	r1, [pc, #508]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006232:	4313      	orrs	r3, r2
 8006234:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006242:	4b7b      	ldr	r3, [pc, #492]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4978      	ldr	r1, [pc, #480]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006260:	4b73      	ldr	r3, [pc, #460]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	4970      	ldr	r1, [pc, #448]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800626e:	4313      	orrs	r3, r2
 8006270:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d008      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800627e:	4b6c      	ldr	r3, [pc, #432]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f023 0210 	bic.w	r2, r3, #16
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	4969      	ldr	r1, [pc, #420]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800628c:	4313      	orrs	r3, r2
 800628e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800629c:	4b64      	ldr	r3, [pc, #400]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a8:	4961      	ldr	r1, [pc, #388]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062ba:	4b5d      	ldr	r3, [pc, #372]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f023 0220 	bic.w	r2, r3, #32
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	495a      	ldr	r1, [pc, #360]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062d8:	4b55      	ldr	r3, [pc, #340]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	4952      	ldr	r1, [pc, #328]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062f6:	4b4e      	ldr	r3, [pc, #312]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	494b      	ldr	r1, [pc, #300]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006304:	4313      	orrs	r3, r2
 8006306:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006314:	4b46      	ldr	r3, [pc, #280]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	4943      	ldr	r1, [pc, #268]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006322:	4313      	orrs	r3, r2
 8006324:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006332:	4b3f      	ldr	r3, [pc, #252]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	493c      	ldr	r1, [pc, #240]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006340:	4313      	orrs	r3, r2
 8006342:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006350:	4b37      	ldr	r3, [pc, #220]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	4934      	ldr	r1, [pc, #208]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800636e:	4b30      	ldr	r3, [pc, #192]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	492d      	ldr	r1, [pc, #180]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800637c:	4313      	orrs	r3, r2
 800637e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800638c:	4b28      	ldr	r3, [pc, #160]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006398:	4925      	ldr	r1, [pc, #148]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80063aa:	4b21      	ldr	r3, [pc, #132]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	491e      	ldr	r1, [pc, #120]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	4916      	ldr	r1, [pc, #88]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	490f      	ldr	r1, [pc, #60]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006410:	4907      	ldr	r1, [pc, #28]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006412:	4313      	orrs	r3, r2
 8006414:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006422:	4b03      	ldr	r3, [pc, #12]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	e002      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800642e:	bf00      	nop
 8006430:	40021000 	.word	0x40021000
 8006434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006436:	4913      	ldr	r1, [pc, #76]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006438:	4313      	orrs	r3, r2
 800643a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006448:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006454:	490b      	ldr	r1, [pc, #44]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006456:	4313      	orrs	r3, r2
 8006458:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006466:	4b07      	ldr	r3, [pc, #28]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006472:	4904      	ldr	r1, [pc, #16]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006474:	4313      	orrs	r3, r2
 8006476:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3748      	adds	r7, #72	; 0x48
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40021000 	.word	0x40021000

08006488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e049      	b.n	800652e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fb fa8a 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f000 fd30 	bl	8006f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d001      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e04f      	b.n	80065f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <HAL_TIM_Base_Start_IT+0xc4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0x76>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657a:	d018      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0x76>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <HAL_TIM_Base_Start_IT+0xc8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0x76>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <HAL_TIM_Base_Start_IT+0xcc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0x76>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <HAL_TIM_Base_Start_IT+0xd0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0x76>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_TIM_Base_Start_IT+0xd4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_TIM_Base_Start_IT+0x76>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_TIM_Base_Start_IT+0xd8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d115      	bne.n	80065da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	4b17      	ldr	r3, [pc, #92]	; (8006614 <HAL_TIM_Base_Start_IT+0xdc>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b06      	cmp	r3, #6
 80065be:	d015      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0xb4>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c6:	d011      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d8:	e008      	b.n	80065ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e000      	b.n	80065ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800
 8006608:	40013400 	.word	0x40013400
 800660c:	40014000 	.word	0x40014000
 8006610:	40015000 	.word	0x40015000
 8006614:	00010007 	.word	0x00010007

08006618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e049      	b.n	80066be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb f9fc 	bl	8001a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f000 fc68 	bl	8006f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <HAL_TIM_PWM_Start+0x24>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	bf14      	ite	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	2300      	moveq	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e03c      	b.n	8006766 <HAL_TIM_PWM_Start+0x9e>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d109      	bne.n	8006706 <HAL_TIM_PWM_Start+0x3e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	bf14      	ite	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	2300      	moveq	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e02f      	b.n	8006766 <HAL_TIM_PWM_Start+0x9e>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d109      	bne.n	8006720 <HAL_TIM_PWM_Start+0x58>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e022      	b.n	8006766 <HAL_TIM_PWM_Start+0x9e>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d109      	bne.n	800673a <HAL_TIM_PWM_Start+0x72>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	bf14      	ite	ne
 8006732:	2301      	movne	r3, #1
 8006734:	2300      	moveq	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	e015      	b.n	8006766 <HAL_TIM_PWM_Start+0x9e>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b10      	cmp	r3, #16
 800673e:	d109      	bne.n	8006754 <HAL_TIM_PWM_Start+0x8c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	bf14      	ite	ne
 800674c:	2301      	movne	r3, #1
 800674e:	2300      	moveq	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e008      	b.n	8006766 <HAL_TIM_PWM_Start+0x9e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	bf14      	ite	ne
 8006760:	2301      	movne	r3, #1
 8006762:	2300      	moveq	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0a1      	b.n	80068b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <HAL_TIM_PWM_Start+0xb6>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677c:	e023      	b.n	80067c6 <HAL_TIM_PWM_Start+0xfe>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d104      	bne.n	800678e <HAL_TIM_PWM_Start+0xc6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678c:	e01b      	b.n	80067c6 <HAL_TIM_PWM_Start+0xfe>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Start+0xd6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800679c:	e013      	b.n	80067c6 <HAL_TIM_PWM_Start+0xfe>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start+0xe6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ac:	e00b      	b.n	80067c6 <HAL_TIM_PWM_Start+0xfe>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0xf6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	e003      	b.n	80067c6 <HAL_TIM_PWM_Start+0xfe>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2201      	movs	r2, #1
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 ffea 	bl	80077a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a38      	ldr	r2, [pc, #224]	; (80068bc <HAL_TIM_PWM_Start+0x1f4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d018      	beq.n	8006810 <HAL_TIM_PWM_Start+0x148>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a37      	ldr	r2, [pc, #220]	; (80068c0 <HAL_TIM_PWM_Start+0x1f8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d013      	beq.n	8006810 <HAL_TIM_PWM_Start+0x148>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a35      	ldr	r2, [pc, #212]	; (80068c4 <HAL_TIM_PWM_Start+0x1fc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00e      	beq.n	8006810 <HAL_TIM_PWM_Start+0x148>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a34      	ldr	r2, [pc, #208]	; (80068c8 <HAL_TIM_PWM_Start+0x200>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d009      	beq.n	8006810 <HAL_TIM_PWM_Start+0x148>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a32      	ldr	r2, [pc, #200]	; (80068cc <HAL_TIM_PWM_Start+0x204>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <HAL_TIM_PWM_Start+0x148>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a31      	ldr	r2, [pc, #196]	; (80068d0 <HAL_TIM_PWM_Start+0x208>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d101      	bne.n	8006814 <HAL_TIM_PWM_Start+0x14c>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <HAL_TIM_PWM_Start+0x14e>
 8006814:	2300      	movs	r3, #0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a23      	ldr	r2, [pc, #140]	; (80068bc <HAL_TIM_PWM_Start+0x1f4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d01d      	beq.n	8006870 <HAL_TIM_PWM_Start+0x1a8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683c:	d018      	beq.n	8006870 <HAL_TIM_PWM_Start+0x1a8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a24      	ldr	r2, [pc, #144]	; (80068d4 <HAL_TIM_PWM_Start+0x20c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <HAL_TIM_PWM_Start+0x1a8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_TIM_PWM_Start+0x210>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00e      	beq.n	8006870 <HAL_TIM_PWM_Start+0x1a8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_TIM_PWM_Start+0x1f8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d009      	beq.n	8006870 <HAL_TIM_PWM_Start+0x1a8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <HAL_TIM_PWM_Start+0x1fc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_PWM_Start+0x1a8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a19      	ldr	r2, [pc, #100]	; (80068d0 <HAL_TIM_PWM_Start+0x208>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d115      	bne.n	800689c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	4b19      	ldr	r3, [pc, #100]	; (80068dc <HAL_TIM_PWM_Start+0x214>)
 8006878:	4013      	ands	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b06      	cmp	r3, #6
 8006880:	d015      	beq.n	80068ae <HAL_TIM_PWM_Start+0x1e6>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d011      	beq.n	80068ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689a:	e008      	b.n	80068ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e000      	b.n	80068b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800
 80068d0:	40015000 	.word	0x40015000
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	00010007 	.word	0x00010007

080068e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d122      	bne.n	800693c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b02      	cmp	r3, #2
 8006902:	d11b      	bne.n	800693c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0202 	mvn.w	r2, #2
 800690c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fae3 	bl	8006eee <HAL_TIM_IC_CaptureCallback>
 8006928:	e005      	b.n	8006936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fad5 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fae6 	bl	8006f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b04      	cmp	r3, #4
 8006948:	d122      	bne.n	8006990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d11b      	bne.n	8006990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0204 	mvn.w	r2, #4
 8006960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fab9 	bl	8006eee <HAL_TIM_IC_CaptureCallback>
 800697c:	e005      	b.n	800698a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 faab 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fabc 	bl	8006f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b08      	cmp	r3, #8
 800699c:	d122      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d11b      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0208 	mvn.w	r2, #8
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2204      	movs	r2, #4
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa8f 	bl	8006eee <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa81 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fa92 	bl	8006f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d122      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d11b      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0210 	mvn.w	r2, #16
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa65 	bl	8006eee <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa57 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fa68 	bl	8006f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10e      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d107      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0201 	mvn.w	r2, #1
 8006a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fa f974 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6e:	2b80      	cmp	r3, #128	; 0x80
 8006a70:	d10e      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	d107      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 ff48 	bl	8007920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d10e      	bne.n	8006abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d107      	bne.n	8006abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 ff3b 	bl	8007934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b40      	cmp	r3, #64	; 0x40
 8006aca:	d10e      	bne.n	8006aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d107      	bne.n	8006aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fa16 	bl	8006f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d10e      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d107      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f06f 0220 	mvn.w	r2, #32
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fefb 	bl	800790c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e0ff      	b.n	8006d3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b14      	cmp	r3, #20
 8006b4a:	f200 80f0 	bhi.w	8006d2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006ba9 	.word	0x08006ba9
 8006b58:	08006d2f 	.word	0x08006d2f
 8006b5c:	08006d2f 	.word	0x08006d2f
 8006b60:	08006d2f 	.word	0x08006d2f
 8006b64:	08006be9 	.word	0x08006be9
 8006b68:	08006d2f 	.word	0x08006d2f
 8006b6c:	08006d2f 	.word	0x08006d2f
 8006b70:	08006d2f 	.word	0x08006d2f
 8006b74:	08006c2b 	.word	0x08006c2b
 8006b78:	08006d2f 	.word	0x08006d2f
 8006b7c:	08006d2f 	.word	0x08006d2f
 8006b80:	08006d2f 	.word	0x08006d2f
 8006b84:	08006c6b 	.word	0x08006c6b
 8006b88:	08006d2f 	.word	0x08006d2f
 8006b8c:	08006d2f 	.word	0x08006d2f
 8006b90:	08006d2f 	.word	0x08006d2f
 8006b94:	08006cad 	.word	0x08006cad
 8006b98:	08006d2f 	.word	0x08006d2f
 8006b9c:	08006d2f 	.word	0x08006d2f
 8006ba0:	08006d2f 	.word	0x08006d2f
 8006ba4:	08006ced 	.word	0x08006ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fa5a 	bl	8007068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0208 	orr.w	r2, r2, #8
 8006bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0204 	bic.w	r2, r2, #4
 8006bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6999      	ldr	r1, [r3, #24]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	619a      	str	r2, [r3, #24]
      break;
 8006be6:	e0a5      	b.n	8006d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fad4 	bl	800719c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6999      	ldr	r1, [r3, #24]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	021a      	lsls	r2, r3, #8
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	619a      	str	r2, [r3, #24]
      break;
 8006c28:	e084      	b.n	8006d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fb47 	bl	80072c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0208 	orr.w	r2, r2, #8
 8006c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0204 	bic.w	r2, r2, #4
 8006c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69d9      	ldr	r1, [r3, #28]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	61da      	str	r2, [r3, #28]
      break;
 8006c68:	e064      	b.n	8006d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fbb9 	bl	80073e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69d9      	ldr	r1, [r3, #28]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	021a      	lsls	r2, r3, #8
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	61da      	str	r2, [r3, #28]
      break;
 8006caa:	e043      	b.n	8006d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fc08 	bl	80074c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0208 	orr.w	r2, r2, #8
 8006cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0204 	bic.w	r2, r2, #4
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cea:	e023      	b.n	8006d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fc52 	bl	800759c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	021a      	lsls	r2, r3, #8
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d2c:	e002      	b.n	8006d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
      break;
 8006d32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop

08006d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIM_ConfigClockSource+0x1c>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e0b6      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x18a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da0:	d03e      	beq.n	8006e20 <HAL_TIM_ConfigClockSource+0xd8>
 8006da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da6:	f200 8087 	bhi.w	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dae:	f000 8086 	beq.w	8006ebe <HAL_TIM_ConfigClockSource+0x176>
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	d87f      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006db8:	2b70      	cmp	r3, #112	; 0x70
 8006dba:	d01a      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0xaa>
 8006dbc:	2b70      	cmp	r3, #112	; 0x70
 8006dbe:	d87b      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006dc0:	2b60      	cmp	r3, #96	; 0x60
 8006dc2:	d050      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x11e>
 8006dc4:	2b60      	cmp	r3, #96	; 0x60
 8006dc6:	d877      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006dc8:	2b50      	cmp	r3, #80	; 0x50
 8006dca:	d03c      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0xfe>
 8006dcc:	2b50      	cmp	r3, #80	; 0x50
 8006dce:	d873      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d058      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0x13e>
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d86f      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006dd8:	2b30      	cmp	r3, #48	; 0x30
 8006dda:	d064      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8006ddc:	2b30      	cmp	r3, #48	; 0x30
 8006dde:	d86b      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d060      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d867      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d05c      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d05a      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8006df0:	e062      	b.n	8006eb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6899      	ldr	r1, [r3, #8]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f000 fcb1 	bl	8007768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	609a      	str	r2, [r3, #8]
      break;
 8006e1e:	e04f      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6899      	ldr	r1, [r3, #8]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f000 fc9a 	bl	8007768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e42:	609a      	str	r2, [r3, #8]
      break;
 8006e44:	e03c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 fc0e 	bl	8007674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2150      	movs	r1, #80	; 0x50
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fc67 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e02c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6859      	ldr	r1, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f000 fc2d 	bl	80076d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2160      	movs	r1, #96	; 0x60
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fc57 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 8006e84:	e01c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 fbee 	bl	8007674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2140      	movs	r1, #64	; 0x40
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fc47 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e00c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f000 fc3e 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 8006eb6:	e003      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebc:	e000      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a42      	ldr	r2, [pc, #264]	; (8007048 <TIM_Base_SetConfig+0x11c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d013      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4a:	d00f      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a3f      	ldr	r2, [pc, #252]	; (800704c <TIM_Base_SetConfig+0x120>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a3e      	ldr	r2, [pc, #248]	; (8007050 <TIM_Base_SetConfig+0x124>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d007      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3d      	ldr	r2, [pc, #244]	; (8007054 <TIM_Base_SetConfig+0x128>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <TIM_Base_SetConfig+0x12c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d108      	bne.n	8006f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a31      	ldr	r2, [pc, #196]	; (8007048 <TIM_Base_SetConfig+0x11c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01f      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8c:	d01b      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2e      	ldr	r2, [pc, #184]	; (800704c <TIM_Base_SetConfig+0x120>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d017      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2d      	ldr	r2, [pc, #180]	; (8007050 <TIM_Base_SetConfig+0x124>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <TIM_Base_SetConfig+0x128>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00f      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2c      	ldr	r2, [pc, #176]	; (800705c <TIM_Base_SetConfig+0x130>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00b      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2b      	ldr	r2, [pc, #172]	; (8007060 <TIM_Base_SetConfig+0x134>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d007      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2a      	ldr	r2, [pc, #168]	; (8007064 <TIM_Base_SetConfig+0x138>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_Base_SetConfig+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a25      	ldr	r2, [pc, #148]	; (8007058 <TIM_Base_SetConfig+0x12c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d108      	bne.n	8006fd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a12      	ldr	r2, [pc, #72]	; (8007048 <TIM_Base_SetConfig+0x11c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <TIM_Base_SetConfig+0x100>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a13      	ldr	r2, [pc, #76]	; (8007054 <TIM_Base_SetConfig+0x128>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00f      	beq.n	800702c <TIM_Base_SetConfig+0x100>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a13      	ldr	r2, [pc, #76]	; (800705c <TIM_Base_SetConfig+0x130>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_Base_SetConfig+0x100>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a12      	ldr	r2, [pc, #72]	; (8007060 <TIM_Base_SetConfig+0x134>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_Base_SetConfig+0x100>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a11      	ldr	r2, [pc, #68]	; (8007064 <TIM_Base_SetConfig+0x138>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_Base_SetConfig+0x100>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a0c      	ldr	r2, [pc, #48]	; (8007058 <TIM_Base_SetConfig+0x12c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d103      	bne.n	8007034 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	615a      	str	r2, [r3, #20]
}
 800703a:	bf00      	nop
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40012c00 	.word	0x40012c00
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40013400 	.word	0x40013400
 8007058:	40015000 	.word	0x40015000
 800705c:	40014000 	.word	0x40014000
 8007060:	40014400 	.word	0x40014400
 8007064:	40014800 	.word	0x40014800

08007068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 0302 	bic.w	r3, r3, #2
 80070b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a30      	ldr	r2, [pc, #192]	; (8007184 <TIM_OC1_SetConfig+0x11c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a2f      	ldr	r2, [pc, #188]	; (8007188 <TIM_OC1_SetConfig+0x120>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00f      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a2e      	ldr	r2, [pc, #184]	; (800718c <TIM_OC1_SetConfig+0x124>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00b      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <TIM_OC1_SetConfig+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d007      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <TIM_OC1_SetConfig+0x12c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a2b      	ldr	r2, [pc, #172]	; (8007198 <TIM_OC1_SetConfig+0x130>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10c      	bne.n	800710a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0308 	bic.w	r3, r3, #8
 80070f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 0304 	bic.w	r3, r3, #4
 8007108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <TIM_OC1_SetConfig+0x11c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <TIM_OC1_SetConfig+0x120>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00f      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a1b      	ldr	r2, [pc, #108]	; (800718c <TIM_OC1_SetConfig+0x124>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00b      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a1a      	ldr	r2, [pc, #104]	; (8007190 <TIM_OC1_SetConfig+0x128>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d007      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <TIM_OC1_SetConfig+0x12c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a18      	ldr	r2, [pc, #96]	; (8007198 <TIM_OC1_SetConfig+0x130>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d111      	bne.n	800715e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	621a      	str	r2, [r3, #32]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	40012c00 	.word	0x40012c00
 8007188:	40013400 	.word	0x40013400
 800718c:	40014000 	.word	0x40014000
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800
 8007198:	40015000 	.word	0x40015000

0800719c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f023 0210 	bic.w	r2, r3, #16
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0320 	bic.w	r3, r3, #32
 80071ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a2c      	ldr	r2, [pc, #176]	; (80072ac <TIM_OC2_SetConfig+0x110>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_OC2_SetConfig+0x74>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a2b      	ldr	r2, [pc, #172]	; (80072b0 <TIM_OC2_SetConfig+0x114>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC2_SetConfig+0x74>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <TIM_OC2_SetConfig+0x118>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10d      	bne.n	800722c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a1f      	ldr	r2, [pc, #124]	; (80072ac <TIM_OC2_SetConfig+0x110>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a1e      	ldr	r2, [pc, #120]	; (80072b0 <TIM_OC2_SetConfig+0x114>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00f      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <TIM_OC2_SetConfig+0x11c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00b      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <TIM_OC2_SetConfig+0x120>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d007      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <TIM_OC2_SetConfig+0x124>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <TIM_OC2_SetConfig+0x118>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d113      	bne.n	8007284 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007262:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800726a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40013400 	.word	0x40013400
 80072b4:	40015000 	.word	0x40015000
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800

080072c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a2b      	ldr	r2, [pc, #172]	; (80073d0 <TIM_OC3_SetConfig+0x10c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_OC3_SetConfig+0x72>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <TIM_OC3_SetConfig+0x110>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_OC3_SetConfig+0x72>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a29      	ldr	r2, [pc, #164]	; (80073d8 <TIM_OC3_SetConfig+0x114>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d10d      	bne.n	8007352 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800733c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007350:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <TIM_OC3_SetConfig+0x10c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <TIM_OC3_SetConfig+0x110>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00f      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <TIM_OC3_SetConfig+0x118>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00b      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <TIM_OC3_SetConfig+0x11c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d007      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1b      	ldr	r2, [pc, #108]	; (80073e4 <TIM_OC3_SetConfig+0x120>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a16      	ldr	r2, [pc, #88]	; (80073d8 <TIM_OC3_SetConfig+0x114>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d113      	bne.n	80073aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	621a      	str	r2, [r3, #32]
}
 80073c4:	bf00      	nop
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40013400 	.word	0x40013400
 80073d8:	40015000 	.word	0x40015000
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40014400 	.word	0x40014400
 80073e4:	40014800 	.word	0x40014800

080073e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a1a      	ldr	r2, [pc, #104]	; (80074b0 <TIM_OC4_SetConfig+0xc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <TIM_OC4_SetConfig+0x8c>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a19      	ldr	r2, [pc, #100]	; (80074b4 <TIM_OC4_SetConfig+0xcc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00f      	beq.n	8007474 <TIM_OC4_SetConfig+0x8c>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a18      	ldr	r2, [pc, #96]	; (80074b8 <TIM_OC4_SetConfig+0xd0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00b      	beq.n	8007474 <TIM_OC4_SetConfig+0x8c>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a17      	ldr	r2, [pc, #92]	; (80074bc <TIM_OC4_SetConfig+0xd4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d007      	beq.n	8007474 <TIM_OC4_SetConfig+0x8c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a16      	ldr	r2, [pc, #88]	; (80074c0 <TIM_OC4_SetConfig+0xd8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_OC4_SetConfig+0x8c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <TIM_OC4_SetConfig+0xdc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d109      	bne.n	8007488 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800747a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	019b      	lsls	r3, r3, #6
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	40012c00 	.word	0x40012c00
 80074b4:	40013400 	.word	0x40013400
 80074b8:	40014000 	.word	0x40014000
 80074bc:	40014400 	.word	0x40014400
 80074c0:	40014800 	.word	0x40014800
 80074c4:	40015000 	.word	0x40015000

080074c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800750c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a19      	ldr	r2, [pc, #100]	; (8007584 <TIM_OC5_SetConfig+0xbc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <TIM_OC5_SetConfig+0x82>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a18      	ldr	r2, [pc, #96]	; (8007588 <TIM_OC5_SetConfig+0xc0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00f      	beq.n	800754a <TIM_OC5_SetConfig+0x82>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a17      	ldr	r2, [pc, #92]	; (800758c <TIM_OC5_SetConfig+0xc4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00b      	beq.n	800754a <TIM_OC5_SetConfig+0x82>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a16      	ldr	r2, [pc, #88]	; (8007590 <TIM_OC5_SetConfig+0xc8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d007      	beq.n	800754a <TIM_OC5_SetConfig+0x82>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a15      	ldr	r2, [pc, #84]	; (8007594 <TIM_OC5_SetConfig+0xcc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_OC5_SetConfig+0x82>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a14      	ldr	r2, [pc, #80]	; (8007598 <TIM_OC5_SetConfig+0xd0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d109      	bne.n	800755e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	621a      	str	r2, [r3, #32]
}
 8007578:	bf00      	nop
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40012c00 	.word	0x40012c00
 8007588:	40013400 	.word	0x40013400
 800758c:	40014000 	.word	0x40014000
 8007590:	40014400 	.word	0x40014400
 8007594:	40014800 	.word	0x40014800
 8007598:	40015000 	.word	0x40015000

0800759c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	051b      	lsls	r3, r3, #20
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a1a      	ldr	r2, [pc, #104]	; (800765c <TIM_OC6_SetConfig+0xc0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d013      	beq.n	8007620 <TIM_OC6_SetConfig+0x84>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a19      	ldr	r2, [pc, #100]	; (8007660 <TIM_OC6_SetConfig+0xc4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00f      	beq.n	8007620 <TIM_OC6_SetConfig+0x84>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a18      	ldr	r2, [pc, #96]	; (8007664 <TIM_OC6_SetConfig+0xc8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00b      	beq.n	8007620 <TIM_OC6_SetConfig+0x84>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <TIM_OC6_SetConfig+0xcc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d007      	beq.n	8007620 <TIM_OC6_SetConfig+0x84>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a16      	ldr	r2, [pc, #88]	; (800766c <TIM_OC6_SetConfig+0xd0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d003      	beq.n	8007620 <TIM_OC6_SetConfig+0x84>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a15      	ldr	r2, [pc, #84]	; (8007670 <TIM_OC6_SetConfig+0xd4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d109      	bne.n	8007634 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007626:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	621a      	str	r2, [r3, #32]
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40013400 	.word	0x40013400
 8007664:	40014000 	.word	0x40014000
 8007668:	40014400 	.word	0x40014400
 800766c:	40014800 	.word	0x40014800
 8007670:	40015000 	.word	0x40015000

08007674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 030a 	bic.w	r3, r3, #10
 80076b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f023 0210 	bic.w	r2, r3, #16
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	031b      	lsls	r3, r3, #12
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800770e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	f043 0307 	orr.w	r3, r3, #7
 8007754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	609a      	str	r2, [r3, #8]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	431a      	orrs	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	609a      	str	r2, [r3, #8]
}
 800779c:	bf00      	nop
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2201      	movs	r2, #1
 80077bc:	fa02 f303 	lsl.w	r3, r2, r3
 80077c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1a      	ldr	r2, [r3, #32]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	401a      	ands	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	fa01 f303 	lsl.w	r3, r1, r3
 80077e0:	431a      	orrs	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	621a      	str	r2, [r3, #32]
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007808:	2302      	movs	r3, #2
 800780a:	e06d      	b.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a30      	ldr	r2, [pc, #192]	; (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d009      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a2f      	ldr	r2, [pc, #188]	; (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d004      	beq.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a2d      	ldr	r2, [pc, #180]	; (80078fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d108      	bne.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007850:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d01d      	beq.n	80078bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007888:	d018      	beq.n	80078bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d013      	beq.n	80078bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00e      	beq.n	80078bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d009      	beq.n	80078bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a16      	ldr	r2, [pc, #88]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a11      	ldr	r2, [pc, #68]	; (80078fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d10c      	bne.n	80078d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	40013400 	.word	0x40013400
 80078fc:	40015000 	.word	0x40015000
 8007900:	40000400 	.word	0x40000400
 8007904:	40000800 	.word	0x40000800
 8007908:	40014000 	.word	0x40014000

0800790c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <__errno>:
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <__errno+0x8>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000010 	.word	0x20000010

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4d0d      	ldr	r5, [pc, #52]	; (800798c <__libc_init_array+0x38>)
 8007958:	4c0d      	ldr	r4, [pc, #52]	; (8007990 <__libc_init_array+0x3c>)
 800795a:	1b64      	subs	r4, r4, r5
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	2600      	movs	r6, #0
 8007960:	42a6      	cmp	r6, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	4d0b      	ldr	r5, [pc, #44]	; (8007994 <__libc_init_array+0x40>)
 8007966:	4c0c      	ldr	r4, [pc, #48]	; (8007998 <__libc_init_array+0x44>)
 8007968:	f002 fd5a 	bl	800a420 <_init>
 800796c:	1b64      	subs	r4, r4, r5
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	2600      	movs	r6, #0
 8007972:	42a6      	cmp	r6, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	f855 3b04 	ldr.w	r3, [r5], #4
 800797c:	4798      	blx	r3
 800797e:	3601      	adds	r6, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	f855 3b04 	ldr.w	r3, [r5], #4
 8007986:	4798      	blx	r3
 8007988:	3601      	adds	r6, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	0800a844 	.word	0x0800a844
 8007990:	0800a844 	.word	0x0800a844
 8007994:	0800a844 	.word	0x0800a844
 8007998:	0800a848 	.word	0x0800a848

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <__cvt>:
 80079ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	ec55 4b10 	vmov	r4, r5, d0
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	460e      	mov	r6, r1
 80079b8:	4619      	mov	r1, r3
 80079ba:	462b      	mov	r3, r5
 80079bc:	bfbb      	ittet	lt
 80079be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079c2:	461d      	movlt	r5, r3
 80079c4:	2300      	movge	r3, #0
 80079c6:	232d      	movlt	r3, #45	; 0x2d
 80079c8:	700b      	strb	r3, [r1, #0]
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079d0:	4691      	mov	r9, r2
 80079d2:	f023 0820 	bic.w	r8, r3, #32
 80079d6:	bfbc      	itt	lt
 80079d8:	4622      	movlt	r2, r4
 80079da:	4614      	movlt	r4, r2
 80079dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079e0:	d005      	beq.n	80079ee <__cvt+0x42>
 80079e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079e6:	d100      	bne.n	80079ea <__cvt+0x3e>
 80079e8:	3601      	adds	r6, #1
 80079ea:	2102      	movs	r1, #2
 80079ec:	e000      	b.n	80079f0 <__cvt+0x44>
 80079ee:	2103      	movs	r1, #3
 80079f0:	ab03      	add	r3, sp, #12
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	ab02      	add	r3, sp, #8
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	ec45 4b10 	vmov	d0, r4, r5
 80079fc:	4653      	mov	r3, sl
 80079fe:	4632      	mov	r2, r6
 8007a00:	f000 fcca 	bl	8008398 <_dtoa_r>
 8007a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a08:	4607      	mov	r7, r0
 8007a0a:	d102      	bne.n	8007a12 <__cvt+0x66>
 8007a0c:	f019 0f01 	tst.w	r9, #1
 8007a10:	d022      	beq.n	8007a58 <__cvt+0xac>
 8007a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a16:	eb07 0906 	add.w	r9, r7, r6
 8007a1a:	d110      	bne.n	8007a3e <__cvt+0x92>
 8007a1c:	783b      	ldrb	r3, [r7, #0]
 8007a1e:	2b30      	cmp	r3, #48	; 0x30
 8007a20:	d10a      	bne.n	8007a38 <__cvt+0x8c>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f9 f855 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a2e:	b918      	cbnz	r0, 8007a38 <__cvt+0x8c>
 8007a30:	f1c6 0601 	rsb	r6, r6, #1
 8007a34:	f8ca 6000 	str.w	r6, [sl]
 8007a38:	f8da 3000 	ldr.w	r3, [sl]
 8007a3c:	4499      	add	r9, r3
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2300      	movs	r3, #0
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7f9 f847 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a4a:	b108      	cbz	r0, 8007a50 <__cvt+0xa4>
 8007a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a50:	2230      	movs	r2, #48	; 0x30
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	454b      	cmp	r3, r9
 8007a56:	d307      	bcc.n	8007a68 <__cvt+0xbc>
 8007a58:	9b03      	ldr	r3, [sp, #12]
 8007a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a5c:	1bdb      	subs	r3, r3, r7
 8007a5e:	4638      	mov	r0, r7
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	b004      	add	sp, #16
 8007a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	9103      	str	r1, [sp, #12]
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e7f0      	b.n	8007a52 <__cvt+0xa6>

08007a70 <__exponent>:
 8007a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a72:	4603      	mov	r3, r0
 8007a74:	2900      	cmp	r1, #0
 8007a76:	bfb8      	it	lt
 8007a78:	4249      	neglt	r1, r1
 8007a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8007a7e:	bfb4      	ite	lt
 8007a80:	222d      	movlt	r2, #45	; 0x2d
 8007a82:	222b      	movge	r2, #43	; 0x2b
 8007a84:	2909      	cmp	r1, #9
 8007a86:	7042      	strb	r2, [r0, #1]
 8007a88:	dd2a      	ble.n	8007ae0 <__exponent+0x70>
 8007a8a:	f10d 0407 	add.w	r4, sp, #7
 8007a8e:	46a4      	mov	ip, r4
 8007a90:	270a      	movs	r7, #10
 8007a92:	46a6      	mov	lr, r4
 8007a94:	460a      	mov	r2, r1
 8007a96:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a9a:	fb07 1516 	mls	r5, r7, r6, r1
 8007a9e:	3530      	adds	r5, #48	; 0x30
 8007aa0:	2a63      	cmp	r2, #99	; 0x63
 8007aa2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007aa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007aaa:	4631      	mov	r1, r6
 8007aac:	dcf1      	bgt.n	8007a92 <__exponent+0x22>
 8007aae:	3130      	adds	r1, #48	; 0x30
 8007ab0:	f1ae 0502 	sub.w	r5, lr, #2
 8007ab4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ab8:	1c44      	adds	r4, r0, #1
 8007aba:	4629      	mov	r1, r5
 8007abc:	4561      	cmp	r1, ip
 8007abe:	d30a      	bcc.n	8007ad6 <__exponent+0x66>
 8007ac0:	f10d 0209 	add.w	r2, sp, #9
 8007ac4:	eba2 020e 	sub.w	r2, r2, lr
 8007ac8:	4565      	cmp	r5, ip
 8007aca:	bf88      	it	hi
 8007acc:	2200      	movhi	r2, #0
 8007ace:	4413      	add	r3, r2
 8007ad0:	1a18      	subs	r0, r3, r0
 8007ad2:	b003      	add	sp, #12
 8007ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ada:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ade:	e7ed      	b.n	8007abc <__exponent+0x4c>
 8007ae0:	2330      	movs	r3, #48	; 0x30
 8007ae2:	3130      	adds	r1, #48	; 0x30
 8007ae4:	7083      	strb	r3, [r0, #2]
 8007ae6:	70c1      	strb	r1, [r0, #3]
 8007ae8:	1d03      	adds	r3, r0, #4
 8007aea:	e7f1      	b.n	8007ad0 <__exponent+0x60>

08007aec <_printf_float>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	ed2d 8b02 	vpush	{d8}
 8007af4:	b08d      	sub	sp, #52	; 0x34
 8007af6:	460c      	mov	r4, r1
 8007af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007afc:	4616      	mov	r6, r2
 8007afe:	461f      	mov	r7, r3
 8007b00:	4605      	mov	r5, r0
 8007b02:	f001 fa37 	bl	8008f74 <_localeconv_r>
 8007b06:	f8d0 a000 	ldr.w	sl, [r0]
 8007b0a:	4650      	mov	r0, sl
 8007b0c:	f7f8 fb68 	bl	80001e0 <strlen>
 8007b10:	2300      	movs	r3, #0
 8007b12:	930a      	str	r3, [sp, #40]	; 0x28
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	9305      	str	r3, [sp, #20]
 8007b18:	f8d8 3000 	ldr.w	r3, [r8]
 8007b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b20:	3307      	adds	r3, #7
 8007b22:	f023 0307 	bic.w	r3, r3, #7
 8007b26:	f103 0208 	add.w	r2, r3, #8
 8007b2a:	f8c8 2000 	str.w	r2, [r8]
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b44:	ee08 0a10 	vmov	s16, r0
 8007b48:	4b9f      	ldr	r3, [pc, #636]	; (8007dc8 <_printf_float+0x2dc>)
 8007b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b52:	f7f8 fff3 	bl	8000b3c <__aeabi_dcmpun>
 8007b56:	bb88      	cbnz	r0, 8007bbc <_printf_float+0xd0>
 8007b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b5c:	4b9a      	ldr	r3, [pc, #616]	; (8007dc8 <_printf_float+0x2dc>)
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b62:	f7f8 ffcd 	bl	8000b00 <__aeabi_dcmple>
 8007b66:	bb48      	cbnz	r0, 8007bbc <_printf_float+0xd0>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 ffbc 	bl	8000aec <__aeabi_dcmplt>
 8007b74:	b110      	cbz	r0, 8007b7c <_printf_float+0x90>
 8007b76:	232d      	movs	r3, #45	; 0x2d
 8007b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7c:	4b93      	ldr	r3, [pc, #588]	; (8007dcc <_printf_float+0x2e0>)
 8007b7e:	4894      	ldr	r0, [pc, #592]	; (8007dd0 <_printf_float+0x2e4>)
 8007b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b84:	bf94      	ite	ls
 8007b86:	4698      	movls	r8, r3
 8007b88:	4680      	movhi	r8, r0
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	f023 0204 	bic.w	r2, r3, #4
 8007b94:	6022      	str	r2, [r4, #0]
 8007b96:	f04f 0900 	mov.w	r9, #0
 8007b9a:	9700      	str	r7, [sp, #0]
 8007b9c:	4633      	mov	r3, r6
 8007b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f9d8 	bl	8007f58 <_printf_common>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f040 8090 	bne.w	8007cce <_printf_float+0x1e2>
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bb2:	b00d      	add	sp, #52	; 0x34
 8007bb4:	ecbd 8b02 	vpop	{d8}
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f8 ffba 	bl	8000b3c <__aeabi_dcmpun>
 8007bc8:	b140      	cbz	r0, 8007bdc <_printf_float+0xf0>
 8007bca:	464b      	mov	r3, r9
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfbc      	itt	lt
 8007bd0:	232d      	movlt	r3, #45	; 0x2d
 8007bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bd6:	487f      	ldr	r0, [pc, #508]	; (8007dd4 <_printf_float+0x2e8>)
 8007bd8:	4b7f      	ldr	r3, [pc, #508]	; (8007dd8 <_printf_float+0x2ec>)
 8007bda:	e7d1      	b.n	8007b80 <_printf_float+0x94>
 8007bdc:	6863      	ldr	r3, [r4, #4]
 8007bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007be2:	9206      	str	r2, [sp, #24]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	d13f      	bne.n	8007c68 <_printf_float+0x17c>
 8007be8:	2306      	movs	r3, #6
 8007bea:	6063      	str	r3, [r4, #4]
 8007bec:	9b05      	ldr	r3, [sp, #20]
 8007bee:	6861      	ldr	r1, [r4, #4]
 8007bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8007bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bfe:	ab09      	add	r3, sp, #36	; 0x24
 8007c00:	ec49 8b10 	vmov	d0, r8, r9
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f7ff fecd 	bl	80079ac <__cvt>
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c16:	2b47      	cmp	r3, #71	; 0x47
 8007c18:	4680      	mov	r8, r0
 8007c1a:	d108      	bne.n	8007c2e <_printf_float+0x142>
 8007c1c:	1cc8      	adds	r0, r1, #3
 8007c1e:	db02      	blt.n	8007c26 <_printf_float+0x13a>
 8007c20:	6863      	ldr	r3, [r4, #4]
 8007c22:	4299      	cmp	r1, r3
 8007c24:	dd41      	ble.n	8007caa <_printf_float+0x1be>
 8007c26:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c2a:	fa5f fb8b 	uxtb.w	fp, fp
 8007c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c32:	d820      	bhi.n	8007c76 <_printf_float+0x18a>
 8007c34:	3901      	subs	r1, #1
 8007c36:	465a      	mov	r2, fp
 8007c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007c3e:	f7ff ff17 	bl	8007a70 <__exponent>
 8007c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c44:	1813      	adds	r3, r2, r0
 8007c46:	2a01      	cmp	r2, #1
 8007c48:	4681      	mov	r9, r0
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	dc02      	bgt.n	8007c54 <_printf_float+0x168>
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	07d2      	lsls	r2, r2, #31
 8007c52:	d501      	bpl.n	8007c58 <_printf_float+0x16c>
 8007c54:	3301      	adds	r3, #1
 8007c56:	6123      	str	r3, [r4, #16]
 8007c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d09c      	beq.n	8007b9a <_printf_float+0xae>
 8007c60:	232d      	movs	r3, #45	; 0x2d
 8007c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c66:	e798      	b.n	8007b9a <_printf_float+0xae>
 8007c68:	9a06      	ldr	r2, [sp, #24]
 8007c6a:	2a47      	cmp	r2, #71	; 0x47
 8007c6c:	d1be      	bne.n	8007bec <_printf_float+0x100>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1bc      	bne.n	8007bec <_printf_float+0x100>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e7b9      	b.n	8007bea <_printf_float+0xfe>
 8007c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c7a:	d118      	bne.n	8007cae <_printf_float+0x1c2>
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	6863      	ldr	r3, [r4, #4]
 8007c80:	dd0b      	ble.n	8007c9a <_printf_float+0x1ae>
 8007c82:	6121      	str	r1, [r4, #16]
 8007c84:	b913      	cbnz	r3, 8007c8c <_printf_float+0x1a0>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	07d0      	lsls	r0, r2, #31
 8007c8a:	d502      	bpl.n	8007c92 <_printf_float+0x1a6>
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	440b      	add	r3, r1
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c94:	f04f 0900 	mov.w	r9, #0
 8007c98:	e7de      	b.n	8007c58 <_printf_float+0x16c>
 8007c9a:	b913      	cbnz	r3, 8007ca2 <_printf_float+0x1b6>
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	07d2      	lsls	r2, r2, #31
 8007ca0:	d501      	bpl.n	8007ca6 <_printf_float+0x1ba>
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	e7f4      	b.n	8007c90 <_printf_float+0x1a4>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e7f2      	b.n	8007c90 <_printf_float+0x1a4>
 8007caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	db05      	blt.n	8007cc0 <_printf_float+0x1d4>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	6121      	str	r1, [r4, #16]
 8007cb8:	07d8      	lsls	r0, r3, #31
 8007cba:	d5ea      	bpl.n	8007c92 <_printf_float+0x1a6>
 8007cbc:	1c4b      	adds	r3, r1, #1
 8007cbe:	e7e7      	b.n	8007c90 <_printf_float+0x1a4>
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	bfd4      	ite	le
 8007cc4:	f1c1 0202 	rsble	r2, r1, #2
 8007cc8:	2201      	movgt	r2, #1
 8007cca:	4413      	add	r3, r2
 8007ccc:	e7e0      	b.n	8007c90 <_printf_float+0x1a4>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	055a      	lsls	r2, r3, #21
 8007cd2:	d407      	bmi.n	8007ce4 <_printf_float+0x1f8>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	4642      	mov	r2, r8
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d12c      	bne.n	8007d3c <_printf_float+0x250>
 8007ce2:	e764      	b.n	8007bae <_printf_float+0xc2>
 8007ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ce8:	f240 80e0 	bls.w	8007eac <_printf_float+0x3c0>
 8007cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f7f8 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d034      	beq.n	8007d66 <_printf_float+0x27a>
 8007cfc:	4a37      	ldr	r2, [pc, #220]	; (8007ddc <_printf_float+0x2f0>)
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f af51 	beq.w	8007bae <_printf_float+0xc2>
 8007d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d10:	429a      	cmp	r2, r3
 8007d12:	db02      	blt.n	8007d1a <_printf_float+0x22e>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	07d8      	lsls	r0, r3, #31
 8007d18:	d510      	bpl.n	8007d3c <_printf_float+0x250>
 8007d1a:	ee18 3a10 	vmov	r3, s16
 8007d1e:	4652      	mov	r2, sl
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f af41 	beq.w	8007bae <_printf_float+0xc2>
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	f104 091a 	add.w	r9, r4, #26
 8007d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4543      	cmp	r3, r8
 8007d3a:	dc09      	bgt.n	8007d50 <_printf_float+0x264>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	079b      	lsls	r3, r3, #30
 8007d40:	f100 8105 	bmi.w	8007f4e <_printf_float+0x462>
 8007d44:	68e0      	ldr	r0, [r4, #12]
 8007d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d48:	4298      	cmp	r0, r3
 8007d4a:	bfb8      	it	lt
 8007d4c:	4618      	movlt	r0, r3
 8007d4e:	e730      	b.n	8007bb2 <_printf_float+0xc6>
 8007d50:	2301      	movs	r3, #1
 8007d52:	464a      	mov	r2, r9
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f af27 	beq.w	8007bae <_printf_float+0xc2>
 8007d60:	f108 0801 	add.w	r8, r8, #1
 8007d64:	e7e6      	b.n	8007d34 <_printf_float+0x248>
 8007d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dc39      	bgt.n	8007de0 <_printf_float+0x2f4>
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <_printf_float+0x2f0>)
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4631      	mov	r1, r6
 8007d72:	4628      	mov	r0, r5
 8007d74:	47b8      	blx	r7
 8007d76:	3001      	adds	r0, #1
 8007d78:	f43f af19 	beq.w	8007bae <_printf_float+0xc2>
 8007d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d102      	bne.n	8007d8a <_printf_float+0x29e>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	07d9      	lsls	r1, r3, #31
 8007d88:	d5d8      	bpl.n	8007d3c <_printf_float+0x250>
 8007d8a:	ee18 3a10 	vmov	r3, s16
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af09 	beq.w	8007bae <_printf_float+0xc2>
 8007d9c:	f04f 0900 	mov.w	r9, #0
 8007da0:	f104 0a1a 	add.w	sl, r4, #26
 8007da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da6:	425b      	negs	r3, r3
 8007da8:	454b      	cmp	r3, r9
 8007daa:	dc01      	bgt.n	8007db0 <_printf_float+0x2c4>
 8007dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dae:	e792      	b.n	8007cd6 <_printf_float+0x1ea>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4652      	mov	r2, sl
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f43f aef7 	beq.w	8007bae <_printf_float+0xc2>
 8007dc0:	f109 0901 	add.w	r9, r9, #1
 8007dc4:	e7ee      	b.n	8007da4 <_printf_float+0x2b8>
 8007dc6:	bf00      	nop
 8007dc8:	7fefffff 	.word	0x7fefffff
 8007dcc:	0800a46c 	.word	0x0800a46c
 8007dd0:	0800a470 	.word	0x0800a470
 8007dd4:	0800a478 	.word	0x0800a478
 8007dd8:	0800a474 	.word	0x0800a474
 8007ddc:	0800a47c 	.word	0x0800a47c
 8007de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de4:	429a      	cmp	r2, r3
 8007de6:	bfa8      	it	ge
 8007de8:	461a      	movge	r2, r3
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	4691      	mov	r9, r2
 8007dee:	dc37      	bgt.n	8007e60 <_printf_float+0x374>
 8007df0:	f04f 0b00 	mov.w	fp, #0
 8007df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007df8:	f104 021a 	add.w	r2, r4, #26
 8007dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	eba3 0309 	sub.w	r3, r3, r9
 8007e04:	455b      	cmp	r3, fp
 8007e06:	dc33      	bgt.n	8007e70 <_printf_float+0x384>
 8007e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	db3b      	blt.n	8007e88 <_printf_float+0x39c>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d438      	bmi.n	8007e88 <_printf_float+0x39c>
 8007e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e18:	9a05      	ldr	r2, [sp, #20]
 8007e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e1c:	1a9a      	subs	r2, r3, r2
 8007e1e:	eba3 0901 	sub.w	r9, r3, r1
 8007e22:	4591      	cmp	r9, r2
 8007e24:	bfa8      	it	ge
 8007e26:	4691      	movge	r9, r2
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	dc35      	bgt.n	8007e9a <_printf_float+0x3ae>
 8007e2e:	f04f 0800 	mov.w	r8, #0
 8007e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e36:	f104 0a1a 	add.w	sl, r4, #26
 8007e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	eba3 0309 	sub.w	r3, r3, r9
 8007e44:	4543      	cmp	r3, r8
 8007e46:	f77f af79 	ble.w	8007d3c <_printf_float+0x250>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f aeaa 	beq.w	8007bae <_printf_float+0xc2>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	e7ec      	b.n	8007e3a <_printf_float+0x34e>
 8007e60:	4613      	mov	r3, r2
 8007e62:	4631      	mov	r1, r6
 8007e64:	4642      	mov	r2, r8
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d1c0      	bne.n	8007df0 <_printf_float+0x304>
 8007e6e:	e69e      	b.n	8007bae <_printf_float+0xc2>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4631      	mov	r1, r6
 8007e74:	4628      	mov	r0, r5
 8007e76:	9205      	str	r2, [sp, #20]
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f ae97 	beq.w	8007bae <_printf_float+0xc2>
 8007e80:	9a05      	ldr	r2, [sp, #20]
 8007e82:	f10b 0b01 	add.w	fp, fp, #1
 8007e86:	e7b9      	b.n	8007dfc <_printf_float+0x310>
 8007e88:	ee18 3a10 	vmov	r3, s16
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	d1be      	bne.n	8007e16 <_printf_float+0x32a>
 8007e98:	e689      	b.n	8007bae <_printf_float+0xc2>
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	4442      	add	r2, r8
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d1c1      	bne.n	8007e2e <_printf_float+0x342>
 8007eaa:	e680      	b.n	8007bae <_printf_float+0xc2>
 8007eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eae:	2a01      	cmp	r2, #1
 8007eb0:	dc01      	bgt.n	8007eb6 <_printf_float+0x3ca>
 8007eb2:	07db      	lsls	r3, r3, #31
 8007eb4:	d538      	bpl.n	8007f28 <_printf_float+0x43c>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4642      	mov	r2, r8
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b8      	blx	r7
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	f43f ae74 	beq.w	8007bae <_printf_float+0xc2>
 8007ec6:	ee18 3a10 	vmov	r3, s16
 8007eca:	4652      	mov	r2, sl
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f ae6b 	beq.w	8007bae <_printf_float+0xc2>
 8007ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f7f8 fdfa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ee4:	b9d8      	cbnz	r0, 8007f1e <_printf_float+0x432>
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee8:	f108 0201 	add.w	r2, r8, #1
 8007eec:	3b01      	subs	r3, #1
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d10e      	bne.n	8007f16 <_printf_float+0x42a>
 8007ef8:	e659      	b.n	8007bae <_printf_float+0xc2>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4652      	mov	r2, sl
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	f43f ae52 	beq.w	8007bae <_printf_float+0xc2>
 8007f0a:	f108 0801 	add.w	r8, r8, #1
 8007f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f10:	3b01      	subs	r3, #1
 8007f12:	4543      	cmp	r3, r8
 8007f14:	dcf1      	bgt.n	8007efa <_printf_float+0x40e>
 8007f16:	464b      	mov	r3, r9
 8007f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f1c:	e6dc      	b.n	8007cd8 <_printf_float+0x1ec>
 8007f1e:	f04f 0800 	mov.w	r8, #0
 8007f22:	f104 0a1a 	add.w	sl, r4, #26
 8007f26:	e7f2      	b.n	8007f0e <_printf_float+0x422>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	e7df      	b.n	8007eee <_printf_float+0x402>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	464a      	mov	r2, r9
 8007f32:	4631      	mov	r1, r6
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b8      	blx	r7
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f43f ae38 	beq.w	8007bae <_printf_float+0xc2>
 8007f3e:	f108 0801 	add.w	r8, r8, #1
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f46:	1a5b      	subs	r3, r3, r1
 8007f48:	4543      	cmp	r3, r8
 8007f4a:	dcf0      	bgt.n	8007f2e <_printf_float+0x442>
 8007f4c:	e6fa      	b.n	8007d44 <_printf_float+0x258>
 8007f4e:	f04f 0800 	mov.w	r8, #0
 8007f52:	f104 0919 	add.w	r9, r4, #25
 8007f56:	e7f4      	b.n	8007f42 <_printf_float+0x456>

08007f58 <_printf_common>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	4699      	mov	r9, r3
 8007f60:	688a      	ldr	r2, [r1, #8]
 8007f62:	690b      	ldr	r3, [r1, #16]
 8007f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bfb8      	it	lt
 8007f6c:	4613      	movlt	r3, r2
 8007f6e:	6033      	str	r3, [r6, #0]
 8007f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f74:	4607      	mov	r7, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	b10a      	cbz	r2, 8007f7e <_printf_common+0x26>
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	0699      	lsls	r1, r3, #26
 8007f82:	bf42      	ittt	mi
 8007f84:	6833      	ldrmi	r3, [r6, #0]
 8007f86:	3302      	addmi	r3, #2
 8007f88:	6033      	strmi	r3, [r6, #0]
 8007f8a:	6825      	ldr	r5, [r4, #0]
 8007f8c:	f015 0506 	ands.w	r5, r5, #6
 8007f90:	d106      	bne.n	8007fa0 <_printf_common+0x48>
 8007f92:	f104 0a19 	add.w	sl, r4, #25
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	6832      	ldr	r2, [r6, #0]
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	42ab      	cmp	r3, r5
 8007f9e:	dc26      	bgt.n	8007fee <_printf_common+0x96>
 8007fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fa4:	1e13      	subs	r3, r2, #0
 8007fa6:	6822      	ldr	r2, [r4, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	2301      	movne	r3, #1
 8007fac:	0692      	lsls	r2, r2, #26
 8007fae:	d42b      	bmi.n	8008008 <_printf_common+0xb0>
 8007fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	47c0      	blx	r8
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d01e      	beq.n	8007ffc <_printf_common+0xa4>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	68e5      	ldr	r5, [r4, #12]
 8007fc2:	6832      	ldr	r2, [r6, #0]
 8007fc4:	f003 0306 	and.w	r3, r3, #6
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	bf08      	it	eq
 8007fcc:	1aad      	subeq	r5, r5, r2
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	6922      	ldr	r2, [r4, #16]
 8007fd2:	bf0c      	ite	eq
 8007fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd8:	2500      	movne	r5, #0
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	bfc4      	itt	gt
 8007fde:	1a9b      	subgt	r3, r3, r2
 8007fe0:	18ed      	addgt	r5, r5, r3
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	341a      	adds	r4, #26
 8007fe6:	42b5      	cmp	r5, r6
 8007fe8:	d11a      	bne.n	8008020 <_printf_common+0xc8>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e008      	b.n	8008000 <_printf_common+0xa8>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	47c0      	blx	r8
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d103      	bne.n	8008004 <_printf_common+0xac>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	3501      	adds	r5, #1
 8008006:	e7c6      	b.n	8007f96 <_printf_common+0x3e>
 8008008:	18e1      	adds	r1, r4, r3
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	2030      	movs	r0, #48	; 0x30
 800800e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008012:	4422      	add	r2, r4
 8008014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800801c:	3302      	adds	r3, #2
 800801e:	e7c7      	b.n	8007fb0 <_printf_common+0x58>
 8008020:	2301      	movs	r3, #1
 8008022:	4622      	mov	r2, r4
 8008024:	4649      	mov	r1, r9
 8008026:	4638      	mov	r0, r7
 8008028:	47c0      	blx	r8
 800802a:	3001      	adds	r0, #1
 800802c:	d0e6      	beq.n	8007ffc <_printf_common+0xa4>
 800802e:	3601      	adds	r6, #1
 8008030:	e7d9      	b.n	8007fe6 <_printf_common+0x8e>
	...

08008034 <_printf_i>:
 8008034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	7e0f      	ldrb	r7, [r1, #24]
 800803a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800803c:	2f78      	cmp	r7, #120	; 0x78
 800803e:	4691      	mov	r9, r2
 8008040:	4680      	mov	r8, r0
 8008042:	460c      	mov	r4, r1
 8008044:	469a      	mov	sl, r3
 8008046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800804a:	d807      	bhi.n	800805c <_printf_i+0x28>
 800804c:	2f62      	cmp	r7, #98	; 0x62
 800804e:	d80a      	bhi.n	8008066 <_printf_i+0x32>
 8008050:	2f00      	cmp	r7, #0
 8008052:	f000 80d8 	beq.w	8008206 <_printf_i+0x1d2>
 8008056:	2f58      	cmp	r7, #88	; 0x58
 8008058:	f000 80a3 	beq.w	80081a2 <_printf_i+0x16e>
 800805c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008064:	e03a      	b.n	80080dc <_printf_i+0xa8>
 8008066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800806a:	2b15      	cmp	r3, #21
 800806c:	d8f6      	bhi.n	800805c <_printf_i+0x28>
 800806e:	a101      	add	r1, pc, #4	; (adr r1, 8008074 <_printf_i+0x40>)
 8008070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080e1 	.word	0x080080e1
 800807c:	0800805d 	.word	0x0800805d
 8008080:	0800805d 	.word	0x0800805d
 8008084:	0800805d 	.word	0x0800805d
 8008088:	0800805d 	.word	0x0800805d
 800808c:	080080e1 	.word	0x080080e1
 8008090:	0800805d 	.word	0x0800805d
 8008094:	0800805d 	.word	0x0800805d
 8008098:	0800805d 	.word	0x0800805d
 800809c:	0800805d 	.word	0x0800805d
 80080a0:	080081ed 	.word	0x080081ed
 80080a4:	08008111 	.word	0x08008111
 80080a8:	080081cf 	.word	0x080081cf
 80080ac:	0800805d 	.word	0x0800805d
 80080b0:	0800805d 	.word	0x0800805d
 80080b4:	0800820f 	.word	0x0800820f
 80080b8:	0800805d 	.word	0x0800805d
 80080bc:	08008111 	.word	0x08008111
 80080c0:	0800805d 	.word	0x0800805d
 80080c4:	0800805d 	.word	0x0800805d
 80080c8:	080081d7 	.word	0x080081d7
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	602a      	str	r2, [r5, #0]
 80080d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080dc:	2301      	movs	r3, #1
 80080de:	e0a3      	b.n	8008228 <_printf_i+0x1f4>
 80080e0:	6820      	ldr	r0, [r4, #0]
 80080e2:	6829      	ldr	r1, [r5, #0]
 80080e4:	0606      	lsls	r6, r0, #24
 80080e6:	f101 0304 	add.w	r3, r1, #4
 80080ea:	d50a      	bpl.n	8008102 <_printf_i+0xce>
 80080ec:	680e      	ldr	r6, [r1, #0]
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	da03      	bge.n	80080fc <_printf_i+0xc8>
 80080f4:	232d      	movs	r3, #45	; 0x2d
 80080f6:	4276      	negs	r6, r6
 80080f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fc:	485e      	ldr	r0, [pc, #376]	; (8008278 <_printf_i+0x244>)
 80080fe:	230a      	movs	r3, #10
 8008100:	e019      	b.n	8008136 <_printf_i+0x102>
 8008102:	680e      	ldr	r6, [r1, #0]
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	f010 0f40 	tst.w	r0, #64	; 0x40
 800810a:	bf18      	it	ne
 800810c:	b236      	sxthne	r6, r6
 800810e:	e7ef      	b.n	80080f0 <_printf_i+0xbc>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	6820      	ldr	r0, [r4, #0]
 8008114:	1d19      	adds	r1, r3, #4
 8008116:	6029      	str	r1, [r5, #0]
 8008118:	0601      	lsls	r1, r0, #24
 800811a:	d501      	bpl.n	8008120 <_printf_i+0xec>
 800811c:	681e      	ldr	r6, [r3, #0]
 800811e:	e002      	b.n	8008126 <_printf_i+0xf2>
 8008120:	0646      	lsls	r6, r0, #25
 8008122:	d5fb      	bpl.n	800811c <_printf_i+0xe8>
 8008124:	881e      	ldrh	r6, [r3, #0]
 8008126:	4854      	ldr	r0, [pc, #336]	; (8008278 <_printf_i+0x244>)
 8008128:	2f6f      	cmp	r7, #111	; 0x6f
 800812a:	bf0c      	ite	eq
 800812c:	2308      	moveq	r3, #8
 800812e:	230a      	movne	r3, #10
 8008130:	2100      	movs	r1, #0
 8008132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008136:	6865      	ldr	r5, [r4, #4]
 8008138:	60a5      	str	r5, [r4, #8]
 800813a:	2d00      	cmp	r5, #0
 800813c:	bfa2      	ittt	ge
 800813e:	6821      	ldrge	r1, [r4, #0]
 8008140:	f021 0104 	bicge.w	r1, r1, #4
 8008144:	6021      	strge	r1, [r4, #0]
 8008146:	b90e      	cbnz	r6, 800814c <_printf_i+0x118>
 8008148:	2d00      	cmp	r5, #0
 800814a:	d04d      	beq.n	80081e8 <_printf_i+0x1b4>
 800814c:	4615      	mov	r5, r2
 800814e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008152:	fb03 6711 	mls	r7, r3, r1, r6
 8008156:	5dc7      	ldrb	r7, [r0, r7]
 8008158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800815c:	4637      	mov	r7, r6
 800815e:	42bb      	cmp	r3, r7
 8008160:	460e      	mov	r6, r1
 8008162:	d9f4      	bls.n	800814e <_printf_i+0x11a>
 8008164:	2b08      	cmp	r3, #8
 8008166:	d10b      	bne.n	8008180 <_printf_i+0x14c>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	07de      	lsls	r6, r3, #31
 800816c:	d508      	bpl.n	8008180 <_printf_i+0x14c>
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	6861      	ldr	r1, [r4, #4]
 8008172:	4299      	cmp	r1, r3
 8008174:	bfde      	ittt	le
 8008176:	2330      	movle	r3, #48	; 0x30
 8008178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800817c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008180:	1b52      	subs	r2, r2, r5
 8008182:	6122      	str	r2, [r4, #16]
 8008184:	f8cd a000 	str.w	sl, [sp]
 8008188:	464b      	mov	r3, r9
 800818a:	aa03      	add	r2, sp, #12
 800818c:	4621      	mov	r1, r4
 800818e:	4640      	mov	r0, r8
 8008190:	f7ff fee2 	bl	8007f58 <_printf_common>
 8008194:	3001      	adds	r0, #1
 8008196:	d14c      	bne.n	8008232 <_printf_i+0x1fe>
 8008198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800819c:	b004      	add	sp, #16
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	4835      	ldr	r0, [pc, #212]	; (8008278 <_printf_i+0x244>)
 80081a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081a8:	6829      	ldr	r1, [r5, #0]
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80081b0:	6029      	str	r1, [r5, #0]
 80081b2:	061d      	lsls	r5, r3, #24
 80081b4:	d514      	bpl.n	80081e0 <_printf_i+0x1ac>
 80081b6:	07df      	lsls	r7, r3, #31
 80081b8:	bf44      	itt	mi
 80081ba:	f043 0320 	orrmi.w	r3, r3, #32
 80081be:	6023      	strmi	r3, [r4, #0]
 80081c0:	b91e      	cbnz	r6, 80081ca <_printf_i+0x196>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f023 0320 	bic.w	r3, r3, #32
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	2310      	movs	r3, #16
 80081cc:	e7b0      	b.n	8008130 <_printf_i+0xfc>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f043 0320 	orr.w	r3, r3, #32
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	2378      	movs	r3, #120	; 0x78
 80081d8:	4828      	ldr	r0, [pc, #160]	; (800827c <_printf_i+0x248>)
 80081da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081de:	e7e3      	b.n	80081a8 <_printf_i+0x174>
 80081e0:	0659      	lsls	r1, r3, #25
 80081e2:	bf48      	it	mi
 80081e4:	b2b6      	uxthmi	r6, r6
 80081e6:	e7e6      	b.n	80081b6 <_printf_i+0x182>
 80081e8:	4615      	mov	r5, r2
 80081ea:	e7bb      	b.n	8008164 <_printf_i+0x130>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	6826      	ldr	r6, [r4, #0]
 80081f0:	6961      	ldr	r1, [r4, #20]
 80081f2:	1d18      	adds	r0, r3, #4
 80081f4:	6028      	str	r0, [r5, #0]
 80081f6:	0635      	lsls	r5, r6, #24
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	d501      	bpl.n	8008200 <_printf_i+0x1cc>
 80081fc:	6019      	str	r1, [r3, #0]
 80081fe:	e002      	b.n	8008206 <_printf_i+0x1d2>
 8008200:	0670      	lsls	r0, r6, #25
 8008202:	d5fb      	bpl.n	80081fc <_printf_i+0x1c8>
 8008204:	8019      	strh	r1, [r3, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	4615      	mov	r5, r2
 800820c:	e7ba      	b.n	8008184 <_printf_i+0x150>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	1d1a      	adds	r2, r3, #4
 8008212:	602a      	str	r2, [r5, #0]
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	6862      	ldr	r2, [r4, #4]
 8008218:	2100      	movs	r1, #0
 800821a:	4628      	mov	r0, r5
 800821c:	f7f7 ffe8 	bl	80001f0 <memchr>
 8008220:	b108      	cbz	r0, 8008226 <_printf_i+0x1f2>
 8008222:	1b40      	subs	r0, r0, r5
 8008224:	6060      	str	r0, [r4, #4]
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	2300      	movs	r3, #0
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	e7a8      	b.n	8008184 <_printf_i+0x150>
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	462a      	mov	r2, r5
 8008236:	4649      	mov	r1, r9
 8008238:	4640      	mov	r0, r8
 800823a:	47d0      	blx	sl
 800823c:	3001      	adds	r0, #1
 800823e:	d0ab      	beq.n	8008198 <_printf_i+0x164>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	079b      	lsls	r3, r3, #30
 8008244:	d413      	bmi.n	800826e <_printf_i+0x23a>
 8008246:	68e0      	ldr	r0, [r4, #12]
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	4298      	cmp	r0, r3
 800824c:	bfb8      	it	lt
 800824e:	4618      	movlt	r0, r3
 8008250:	e7a4      	b.n	800819c <_printf_i+0x168>
 8008252:	2301      	movs	r3, #1
 8008254:	4632      	mov	r2, r6
 8008256:	4649      	mov	r1, r9
 8008258:	4640      	mov	r0, r8
 800825a:	47d0      	blx	sl
 800825c:	3001      	adds	r0, #1
 800825e:	d09b      	beq.n	8008198 <_printf_i+0x164>
 8008260:	3501      	adds	r5, #1
 8008262:	68e3      	ldr	r3, [r4, #12]
 8008264:	9903      	ldr	r1, [sp, #12]
 8008266:	1a5b      	subs	r3, r3, r1
 8008268:	42ab      	cmp	r3, r5
 800826a:	dcf2      	bgt.n	8008252 <_printf_i+0x21e>
 800826c:	e7eb      	b.n	8008246 <_printf_i+0x212>
 800826e:	2500      	movs	r5, #0
 8008270:	f104 0619 	add.w	r6, r4, #25
 8008274:	e7f5      	b.n	8008262 <_printf_i+0x22e>
 8008276:	bf00      	nop
 8008278:	0800a47e 	.word	0x0800a47e
 800827c:	0800a48f 	.word	0x0800a48f

08008280 <quorem>:
 8008280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	6903      	ldr	r3, [r0, #16]
 8008286:	690c      	ldr	r4, [r1, #16]
 8008288:	42a3      	cmp	r3, r4
 800828a:	4607      	mov	r7, r0
 800828c:	f2c0 8081 	blt.w	8008392 <quorem+0x112>
 8008290:	3c01      	subs	r4, #1
 8008292:	f101 0814 	add.w	r8, r1, #20
 8008296:	f100 0514 	add.w	r5, r0, #20
 800829a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a8:	3301      	adds	r3, #1
 80082aa:	429a      	cmp	r2, r3
 80082ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082b8:	d331      	bcc.n	800831e <quorem+0x9e>
 80082ba:	f04f 0e00 	mov.w	lr, #0
 80082be:	4640      	mov	r0, r8
 80082c0:	46ac      	mov	ip, r5
 80082c2:	46f2      	mov	sl, lr
 80082c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80082c8:	b293      	uxth	r3, r2
 80082ca:	fb06 e303 	mla	r3, r6, r3, lr
 80082ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	ebaa 0303 	sub.w	r3, sl, r3
 80082d8:	f8dc a000 	ldr.w	sl, [ip]
 80082dc:	0c12      	lsrs	r2, r2, #16
 80082de:	fa13 f38a 	uxtah	r3, r3, sl
 80082e2:	fb06 e202 	mla	r2, r6, r2, lr
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ee:	b292      	uxth	r2, r2
 80082f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80082fc:	4581      	cmp	r9, r0
 80082fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008302:	f84c 3b04 	str.w	r3, [ip], #4
 8008306:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800830a:	d2db      	bcs.n	80082c4 <quorem+0x44>
 800830c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008310:	b92b      	cbnz	r3, 800831e <quorem+0x9e>
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	3b04      	subs	r3, #4
 8008316:	429d      	cmp	r5, r3
 8008318:	461a      	mov	r2, r3
 800831a:	d32e      	bcc.n	800837a <quorem+0xfa>
 800831c:	613c      	str	r4, [r7, #16]
 800831e:	4638      	mov	r0, r7
 8008320:	f001 f8c4 	bl	80094ac <__mcmp>
 8008324:	2800      	cmp	r0, #0
 8008326:	db24      	blt.n	8008372 <quorem+0xf2>
 8008328:	3601      	adds	r6, #1
 800832a:	4628      	mov	r0, r5
 800832c:	f04f 0c00 	mov.w	ip, #0
 8008330:	f858 2b04 	ldr.w	r2, [r8], #4
 8008334:	f8d0 e000 	ldr.w	lr, [r0]
 8008338:	b293      	uxth	r3, r2
 800833a:	ebac 0303 	sub.w	r3, ip, r3
 800833e:	0c12      	lsrs	r2, r2, #16
 8008340:	fa13 f38e 	uxtah	r3, r3, lr
 8008344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800834c:	b29b      	uxth	r3, r3
 800834e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008352:	45c1      	cmp	r9, r8
 8008354:	f840 3b04 	str.w	r3, [r0], #4
 8008358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800835c:	d2e8      	bcs.n	8008330 <quorem+0xb0>
 800835e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008366:	b922      	cbnz	r2, 8008372 <quorem+0xf2>
 8008368:	3b04      	subs	r3, #4
 800836a:	429d      	cmp	r5, r3
 800836c:	461a      	mov	r2, r3
 800836e:	d30a      	bcc.n	8008386 <quorem+0x106>
 8008370:	613c      	str	r4, [r7, #16]
 8008372:	4630      	mov	r0, r6
 8008374:	b003      	add	sp, #12
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	3b04      	subs	r3, #4
 800837e:	2a00      	cmp	r2, #0
 8008380:	d1cc      	bne.n	800831c <quorem+0x9c>
 8008382:	3c01      	subs	r4, #1
 8008384:	e7c7      	b.n	8008316 <quorem+0x96>
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	3b04      	subs	r3, #4
 800838a:	2a00      	cmp	r2, #0
 800838c:	d1f0      	bne.n	8008370 <quorem+0xf0>
 800838e:	3c01      	subs	r4, #1
 8008390:	e7eb      	b.n	800836a <quorem+0xea>
 8008392:	2000      	movs	r0, #0
 8008394:	e7ee      	b.n	8008374 <quorem+0xf4>
	...

08008398 <_dtoa_r>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	ed2d 8b04 	vpush	{d8-d9}
 80083a0:	ec57 6b10 	vmov	r6, r7, d0
 80083a4:	b093      	sub	sp, #76	; 0x4c
 80083a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80083ac:	9106      	str	r1, [sp, #24]
 80083ae:	ee10 aa10 	vmov	sl, s0
 80083b2:	4604      	mov	r4, r0
 80083b4:	9209      	str	r2, [sp, #36]	; 0x24
 80083b6:	930c      	str	r3, [sp, #48]	; 0x30
 80083b8:	46bb      	mov	fp, r7
 80083ba:	b975      	cbnz	r5, 80083da <_dtoa_r+0x42>
 80083bc:	2010      	movs	r0, #16
 80083be:	f000 fddd 	bl	8008f7c <malloc>
 80083c2:	4602      	mov	r2, r0
 80083c4:	6260      	str	r0, [r4, #36]	; 0x24
 80083c6:	b920      	cbnz	r0, 80083d2 <_dtoa_r+0x3a>
 80083c8:	4ba7      	ldr	r3, [pc, #668]	; (8008668 <_dtoa_r+0x2d0>)
 80083ca:	21ea      	movs	r1, #234	; 0xea
 80083cc:	48a7      	ldr	r0, [pc, #668]	; (800866c <_dtoa_r+0x2d4>)
 80083ce:	f001 fa75 	bl	80098bc <__assert_func>
 80083d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083d6:	6005      	str	r5, [r0, #0]
 80083d8:	60c5      	str	r5, [r0, #12]
 80083da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083dc:	6819      	ldr	r1, [r3, #0]
 80083de:	b151      	cbz	r1, 80083f6 <_dtoa_r+0x5e>
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	604a      	str	r2, [r1, #4]
 80083e4:	2301      	movs	r3, #1
 80083e6:	4093      	lsls	r3, r2
 80083e8:	608b      	str	r3, [r1, #8]
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fe1c 	bl	8009028 <_Bfree>
 80083f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	1e3b      	subs	r3, r7, #0
 80083f8:	bfaa      	itet	ge
 80083fa:	2300      	movge	r3, #0
 80083fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008400:	f8c8 3000 	strge.w	r3, [r8]
 8008404:	4b9a      	ldr	r3, [pc, #616]	; (8008670 <_dtoa_r+0x2d8>)
 8008406:	bfbc      	itt	lt
 8008408:	2201      	movlt	r2, #1
 800840a:	f8c8 2000 	strlt.w	r2, [r8]
 800840e:	ea33 030b 	bics.w	r3, r3, fp
 8008412:	d11b      	bne.n	800844c <_dtoa_r+0xb4>
 8008414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008416:	f242 730f 	movw	r3, #9999	; 0x270f
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008420:	4333      	orrs	r3, r6
 8008422:	f000 8592 	beq.w	8008f4a <_dtoa_r+0xbb2>
 8008426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008428:	b963      	cbnz	r3, 8008444 <_dtoa_r+0xac>
 800842a:	4b92      	ldr	r3, [pc, #584]	; (8008674 <_dtoa_r+0x2dc>)
 800842c:	e022      	b.n	8008474 <_dtoa_r+0xdc>
 800842e:	4b92      	ldr	r3, [pc, #584]	; (8008678 <_dtoa_r+0x2e0>)
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	3308      	adds	r3, #8
 8008434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	9801      	ldr	r0, [sp, #4]
 800843a:	b013      	add	sp, #76	; 0x4c
 800843c:	ecbd 8b04 	vpop	{d8-d9}
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	4b8b      	ldr	r3, [pc, #556]	; (8008674 <_dtoa_r+0x2dc>)
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	3303      	adds	r3, #3
 800844a:	e7f3      	b.n	8008434 <_dtoa_r+0x9c>
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	f7f8 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8008458:	ec4b ab19 	vmov	d9, sl, fp
 800845c:	4680      	mov	r8, r0
 800845e:	b158      	cbz	r0, 8008478 <_dtoa_r+0xe0>
 8008460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008462:	2301      	movs	r3, #1
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 856b 	beq.w	8008f44 <_dtoa_r+0xbac>
 800846e:	4883      	ldr	r0, [pc, #524]	; (800867c <_dtoa_r+0x2e4>)
 8008470:	6018      	str	r0, [r3, #0]
 8008472:	1e43      	subs	r3, r0, #1
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	e7df      	b.n	8008438 <_dtoa_r+0xa0>
 8008478:	ec4b ab10 	vmov	d0, sl, fp
 800847c:	aa10      	add	r2, sp, #64	; 0x40
 800847e:	a911      	add	r1, sp, #68	; 0x44
 8008480:	4620      	mov	r0, r4
 8008482:	f001 f8b9 	bl	80095f8 <__d2b>
 8008486:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800848a:	ee08 0a10 	vmov	s16, r0
 800848e:	2d00      	cmp	r5, #0
 8008490:	f000 8084 	beq.w	800859c <_dtoa_r+0x204>
 8008494:	ee19 3a90 	vmov	r3, s19
 8008498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800849c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80084a0:	4656      	mov	r6, sl
 80084a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80084a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80084aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80084ae:	4b74      	ldr	r3, [pc, #464]	; (8008680 <_dtoa_r+0x2e8>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	4630      	mov	r0, r6
 80084b4:	4639      	mov	r1, r7
 80084b6:	f7f7 feef 	bl	8000298 <__aeabi_dsub>
 80084ba:	a365      	add	r3, pc, #404	; (adr r3, 8008650 <_dtoa_r+0x2b8>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	a364      	add	r3, pc, #400	; (adr r3, 8008658 <_dtoa_r+0x2c0>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f7 fee7 	bl	800029c <__adddf3>
 80084ce:	4606      	mov	r6, r0
 80084d0:	4628      	mov	r0, r5
 80084d2:	460f      	mov	r7, r1
 80084d4:	f7f8 f82e 	bl	8000534 <__aeabi_i2d>
 80084d8:	a361      	add	r3, pc, #388	; (adr r3, 8008660 <_dtoa_r+0x2c8>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f8 f893 	bl	8000608 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f7 fed7 	bl	800029c <__adddf3>
 80084ee:	4606      	mov	r6, r0
 80084f0:	460f      	mov	r7, r1
 80084f2:	f7f8 fb39 	bl	8000b68 <__aeabi_d2iz>
 80084f6:	2200      	movs	r2, #0
 80084f8:	9000      	str	r0, [sp, #0]
 80084fa:	2300      	movs	r3, #0
 80084fc:	4630      	mov	r0, r6
 80084fe:	4639      	mov	r1, r7
 8008500:	f7f8 faf4 	bl	8000aec <__aeabi_dcmplt>
 8008504:	b150      	cbz	r0, 800851c <_dtoa_r+0x184>
 8008506:	9800      	ldr	r0, [sp, #0]
 8008508:	f7f8 f814 	bl	8000534 <__aeabi_i2d>
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	f7f8 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008514:	b910      	cbnz	r0, 800851c <_dtoa_r+0x184>
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	3b01      	subs	r3, #1
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	2b16      	cmp	r3, #22
 8008520:	d85a      	bhi.n	80085d8 <_dtoa_r+0x240>
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	4b57      	ldr	r3, [pc, #348]	; (8008684 <_dtoa_r+0x2ec>)
 8008526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	ec51 0b19 	vmov	r0, r1, d9
 8008532:	f7f8 fadb 	bl	8000aec <__aeabi_dcmplt>
 8008536:	2800      	cmp	r0, #0
 8008538:	d050      	beq.n	80085dc <_dtoa_r+0x244>
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	3b01      	subs	r3, #1
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	930b      	str	r3, [sp, #44]	; 0x2c
 8008544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008546:	1b5d      	subs	r5, r3, r5
 8008548:	1e6b      	subs	r3, r5, #1
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	bf45      	ittet	mi
 800854e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008552:	9304      	strmi	r3, [sp, #16]
 8008554:	2300      	movpl	r3, #0
 8008556:	2300      	movmi	r3, #0
 8008558:	bf4c      	ite	mi
 800855a:	9305      	strmi	r3, [sp, #20]
 800855c:	9304      	strpl	r3, [sp, #16]
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	db3d      	blt.n	80085e0 <_dtoa_r+0x248>
 8008564:	9b05      	ldr	r3, [sp, #20]
 8008566:	9a00      	ldr	r2, [sp, #0]
 8008568:	920a      	str	r2, [sp, #40]	; 0x28
 800856a:	4413      	add	r3, r2
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	2300      	movs	r3, #0
 8008570:	9307      	str	r3, [sp, #28]
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	2b09      	cmp	r3, #9
 8008576:	f200 8089 	bhi.w	800868c <_dtoa_r+0x2f4>
 800857a:	2b05      	cmp	r3, #5
 800857c:	bfc4      	itt	gt
 800857e:	3b04      	subgt	r3, #4
 8008580:	9306      	strgt	r3, [sp, #24]
 8008582:	9b06      	ldr	r3, [sp, #24]
 8008584:	f1a3 0302 	sub.w	r3, r3, #2
 8008588:	bfcc      	ite	gt
 800858a:	2500      	movgt	r5, #0
 800858c:	2501      	movle	r5, #1
 800858e:	2b03      	cmp	r3, #3
 8008590:	f200 8087 	bhi.w	80086a2 <_dtoa_r+0x30a>
 8008594:	e8df f003 	tbb	[pc, r3]
 8008598:	59383a2d 	.word	0x59383a2d
 800859c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80085a0:	441d      	add	r5, r3
 80085a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	bfc1      	itttt	gt
 80085aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80085b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80085b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085ba:	bfda      	itte	le
 80085bc:	f1c3 0320 	rsble	r3, r3, #32
 80085c0:	fa06 f003 	lslle.w	r0, r6, r3
 80085c4:	4318      	orrgt	r0, r3
 80085c6:	f7f7 ffa5 	bl	8000514 <__aeabi_ui2d>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4606      	mov	r6, r0
 80085ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085d2:	3d01      	subs	r5, #1
 80085d4:	930e      	str	r3, [sp, #56]	; 0x38
 80085d6:	e76a      	b.n	80084ae <_dtoa_r+0x116>
 80085d8:	2301      	movs	r3, #1
 80085da:	e7b2      	b.n	8008542 <_dtoa_r+0x1aa>
 80085dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80085de:	e7b1      	b.n	8008544 <_dtoa_r+0x1ac>
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	9a00      	ldr	r2, [sp, #0]
 80085e4:	1a9b      	subs	r3, r3, r2
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	4253      	negs	r3, r2
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	2300      	movs	r3, #0
 80085ee:	930a      	str	r3, [sp, #40]	; 0x28
 80085f0:	e7bf      	b.n	8008572 <_dtoa_r+0x1da>
 80085f2:	2300      	movs	r3, #0
 80085f4:	9308      	str	r3, [sp, #32]
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dc55      	bgt.n	80086a8 <_dtoa_r+0x310>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008602:	461a      	mov	r2, r3
 8008604:	9209      	str	r2, [sp, #36]	; 0x24
 8008606:	e00c      	b.n	8008622 <_dtoa_r+0x28a>
 8008608:	2301      	movs	r3, #1
 800860a:	e7f3      	b.n	80085f4 <_dtoa_r+0x25c>
 800860c:	2300      	movs	r3, #0
 800860e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008610:	9308      	str	r3, [sp, #32]
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	4413      	add	r3, r2
 8008616:	9302      	str	r3, [sp, #8]
 8008618:	3301      	adds	r3, #1
 800861a:	2b01      	cmp	r3, #1
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	bfb8      	it	lt
 8008620:	2301      	movlt	r3, #1
 8008622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008624:	2200      	movs	r2, #0
 8008626:	6042      	str	r2, [r0, #4]
 8008628:	2204      	movs	r2, #4
 800862a:	f102 0614 	add.w	r6, r2, #20
 800862e:	429e      	cmp	r6, r3
 8008630:	6841      	ldr	r1, [r0, #4]
 8008632:	d93d      	bls.n	80086b0 <_dtoa_r+0x318>
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fcb7 	bl	8008fa8 <_Balloc>
 800863a:	9001      	str	r0, [sp, #4]
 800863c:	2800      	cmp	r0, #0
 800863e:	d13b      	bne.n	80086b8 <_dtoa_r+0x320>
 8008640:	4b11      	ldr	r3, [pc, #68]	; (8008688 <_dtoa_r+0x2f0>)
 8008642:	4602      	mov	r2, r0
 8008644:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008648:	e6c0      	b.n	80083cc <_dtoa_r+0x34>
 800864a:	2301      	movs	r3, #1
 800864c:	e7df      	b.n	800860e <_dtoa_r+0x276>
 800864e:	bf00      	nop
 8008650:	636f4361 	.word	0x636f4361
 8008654:	3fd287a7 	.word	0x3fd287a7
 8008658:	8b60c8b3 	.word	0x8b60c8b3
 800865c:	3fc68a28 	.word	0x3fc68a28
 8008660:	509f79fb 	.word	0x509f79fb
 8008664:	3fd34413 	.word	0x3fd34413
 8008668:	0800a4ad 	.word	0x0800a4ad
 800866c:	0800a4c4 	.word	0x0800a4c4
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	0800a4a9 	.word	0x0800a4a9
 8008678:	0800a4a0 	.word	0x0800a4a0
 800867c:	0800a47d 	.word	0x0800a47d
 8008680:	3ff80000 	.word	0x3ff80000
 8008684:	0800a5b8 	.word	0x0800a5b8
 8008688:	0800a51f 	.word	0x0800a51f
 800868c:	2501      	movs	r5, #1
 800868e:	2300      	movs	r3, #0
 8008690:	9306      	str	r3, [sp, #24]
 8008692:	9508      	str	r5, [sp, #32]
 8008694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008698:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	2312      	movs	r3, #18
 80086a0:	e7b0      	b.n	8008604 <_dtoa_r+0x26c>
 80086a2:	2301      	movs	r3, #1
 80086a4:	9308      	str	r3, [sp, #32]
 80086a6:	e7f5      	b.n	8008694 <_dtoa_r+0x2fc>
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086ae:	e7b8      	b.n	8008622 <_dtoa_r+0x28a>
 80086b0:	3101      	adds	r1, #1
 80086b2:	6041      	str	r1, [r0, #4]
 80086b4:	0052      	lsls	r2, r2, #1
 80086b6:	e7b8      	b.n	800862a <_dtoa_r+0x292>
 80086b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ba:	9a01      	ldr	r2, [sp, #4]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	2b0e      	cmp	r3, #14
 80086c2:	f200 809d 	bhi.w	8008800 <_dtoa_r+0x468>
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	f000 809a 	beq.w	8008800 <_dtoa_r+0x468>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd32      	ble.n	8008738 <_dtoa_r+0x3a0>
 80086d2:	4ab7      	ldr	r2, [pc, #732]	; (80089b0 <_dtoa_r+0x618>)
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e0:	9b00      	ldr	r3, [sp, #0]
 80086e2:	05d8      	lsls	r0, r3, #23
 80086e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086e8:	d516      	bpl.n	8008718 <_dtoa_r+0x380>
 80086ea:	4bb2      	ldr	r3, [pc, #712]	; (80089b4 <_dtoa_r+0x61c>)
 80086ec:	ec51 0b19 	vmov	r0, r1, d9
 80086f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086f4:	f7f8 f8b2 	bl	800085c <__aeabi_ddiv>
 80086f8:	f007 070f 	and.w	r7, r7, #15
 80086fc:	4682      	mov	sl, r0
 80086fe:	468b      	mov	fp, r1
 8008700:	2503      	movs	r5, #3
 8008702:	4eac      	ldr	r6, [pc, #688]	; (80089b4 <_dtoa_r+0x61c>)
 8008704:	b957      	cbnz	r7, 800871c <_dtoa_r+0x384>
 8008706:	4642      	mov	r2, r8
 8008708:	464b      	mov	r3, r9
 800870a:	4650      	mov	r0, sl
 800870c:	4659      	mov	r1, fp
 800870e:	f7f8 f8a5 	bl	800085c <__aeabi_ddiv>
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	e028      	b.n	800876a <_dtoa_r+0x3d2>
 8008718:	2502      	movs	r5, #2
 800871a:	e7f2      	b.n	8008702 <_dtoa_r+0x36a>
 800871c:	07f9      	lsls	r1, r7, #31
 800871e:	d508      	bpl.n	8008732 <_dtoa_r+0x39a>
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008728:	f7f7 ff6e 	bl	8000608 <__aeabi_dmul>
 800872c:	3501      	adds	r5, #1
 800872e:	4680      	mov	r8, r0
 8008730:	4689      	mov	r9, r1
 8008732:	107f      	asrs	r7, r7, #1
 8008734:	3608      	adds	r6, #8
 8008736:	e7e5      	b.n	8008704 <_dtoa_r+0x36c>
 8008738:	f000 809b 	beq.w	8008872 <_dtoa_r+0x4da>
 800873c:	9b00      	ldr	r3, [sp, #0]
 800873e:	4f9d      	ldr	r7, [pc, #628]	; (80089b4 <_dtoa_r+0x61c>)
 8008740:	425e      	negs	r6, r3
 8008742:	4b9b      	ldr	r3, [pc, #620]	; (80089b0 <_dtoa_r+0x618>)
 8008744:	f006 020f 	and.w	r2, r6, #15
 8008748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	ec51 0b19 	vmov	r0, r1, d9
 8008754:	f7f7 ff58 	bl	8000608 <__aeabi_dmul>
 8008758:	1136      	asrs	r6, r6, #4
 800875a:	4682      	mov	sl, r0
 800875c:	468b      	mov	fp, r1
 800875e:	2300      	movs	r3, #0
 8008760:	2502      	movs	r5, #2
 8008762:	2e00      	cmp	r6, #0
 8008764:	d17a      	bne.n	800885c <_dtoa_r+0x4c4>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1d3      	bne.n	8008712 <_dtoa_r+0x37a>
 800876a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8082 	beq.w	8008876 <_dtoa_r+0x4de>
 8008772:	4b91      	ldr	r3, [pc, #580]	; (80089b8 <_dtoa_r+0x620>)
 8008774:	2200      	movs	r2, #0
 8008776:	4650      	mov	r0, sl
 8008778:	4659      	mov	r1, fp
 800877a:	f7f8 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800877e:	2800      	cmp	r0, #0
 8008780:	d079      	beq.n	8008876 <_dtoa_r+0x4de>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d076      	beq.n	8008876 <_dtoa_r+0x4de>
 8008788:	9b02      	ldr	r3, [sp, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd36      	ble.n	80087fc <_dtoa_r+0x464>
 800878e:	9b00      	ldr	r3, [sp, #0]
 8008790:	4650      	mov	r0, sl
 8008792:	4659      	mov	r1, fp
 8008794:	1e5f      	subs	r7, r3, #1
 8008796:	2200      	movs	r2, #0
 8008798:	4b88      	ldr	r3, [pc, #544]	; (80089bc <_dtoa_r+0x624>)
 800879a:	f7f7 ff35 	bl	8000608 <__aeabi_dmul>
 800879e:	9e02      	ldr	r6, [sp, #8]
 80087a0:	4682      	mov	sl, r0
 80087a2:	468b      	mov	fp, r1
 80087a4:	3501      	adds	r5, #1
 80087a6:	4628      	mov	r0, r5
 80087a8:	f7f7 fec4 	bl	8000534 <__aeabi_i2d>
 80087ac:	4652      	mov	r2, sl
 80087ae:	465b      	mov	r3, fp
 80087b0:	f7f7 ff2a 	bl	8000608 <__aeabi_dmul>
 80087b4:	4b82      	ldr	r3, [pc, #520]	; (80089c0 <_dtoa_r+0x628>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	f7f7 fd70 	bl	800029c <__adddf3>
 80087bc:	46d0      	mov	r8, sl
 80087be:	46d9      	mov	r9, fp
 80087c0:	4682      	mov	sl, r0
 80087c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	d158      	bne.n	800887c <_dtoa_r+0x4e4>
 80087ca:	4b7e      	ldr	r3, [pc, #504]	; (80089c4 <_dtoa_r+0x62c>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	4640      	mov	r0, r8
 80087d0:	4649      	mov	r1, r9
 80087d2:	f7f7 fd61 	bl	8000298 <__aeabi_dsub>
 80087d6:	4652      	mov	r2, sl
 80087d8:	465b      	mov	r3, fp
 80087da:	4680      	mov	r8, r0
 80087dc:	4689      	mov	r9, r1
 80087de:	f7f8 f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f040 8295 	bne.w	8008d12 <_dtoa_r+0x97a>
 80087e8:	4652      	mov	r2, sl
 80087ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f8 f97b 	bl	8000aec <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f040 8289 	bne.w	8008d0e <_dtoa_r+0x976>
 80087fc:	ec5b ab19 	vmov	sl, fp, d9
 8008800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008802:	2b00      	cmp	r3, #0
 8008804:	f2c0 8148 	blt.w	8008a98 <_dtoa_r+0x700>
 8008808:	9a00      	ldr	r2, [sp, #0]
 800880a:	2a0e      	cmp	r2, #14
 800880c:	f300 8144 	bgt.w	8008a98 <_dtoa_r+0x700>
 8008810:	4b67      	ldr	r3, [pc, #412]	; (80089b0 <_dtoa_r+0x618>)
 8008812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800881a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	f280 80d5 	bge.w	80089cc <_dtoa_r+0x634>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f300 80d1 	bgt.w	80089cc <_dtoa_r+0x634>
 800882a:	f040 826f 	bne.w	8008d0c <_dtoa_r+0x974>
 800882e:	4b65      	ldr	r3, [pc, #404]	; (80089c4 <_dtoa_r+0x62c>)
 8008830:	2200      	movs	r2, #0
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f7 fee7 	bl	8000608 <__aeabi_dmul>
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	f7f8 f969 	bl	8000b14 <__aeabi_dcmpge>
 8008842:	9e03      	ldr	r6, [sp, #12]
 8008844:	4637      	mov	r7, r6
 8008846:	2800      	cmp	r0, #0
 8008848:	f040 8245 	bne.w	8008cd6 <_dtoa_r+0x93e>
 800884c:	9d01      	ldr	r5, [sp, #4]
 800884e:	2331      	movs	r3, #49	; 0x31
 8008850:	f805 3b01 	strb.w	r3, [r5], #1
 8008854:	9b00      	ldr	r3, [sp, #0]
 8008856:	3301      	adds	r3, #1
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	e240      	b.n	8008cde <_dtoa_r+0x946>
 800885c:	07f2      	lsls	r2, r6, #31
 800885e:	d505      	bpl.n	800886c <_dtoa_r+0x4d4>
 8008860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008864:	f7f7 fed0 	bl	8000608 <__aeabi_dmul>
 8008868:	3501      	adds	r5, #1
 800886a:	2301      	movs	r3, #1
 800886c:	1076      	asrs	r6, r6, #1
 800886e:	3708      	adds	r7, #8
 8008870:	e777      	b.n	8008762 <_dtoa_r+0x3ca>
 8008872:	2502      	movs	r5, #2
 8008874:	e779      	b.n	800876a <_dtoa_r+0x3d2>
 8008876:	9f00      	ldr	r7, [sp, #0]
 8008878:	9e03      	ldr	r6, [sp, #12]
 800887a:	e794      	b.n	80087a6 <_dtoa_r+0x40e>
 800887c:	9901      	ldr	r1, [sp, #4]
 800887e:	4b4c      	ldr	r3, [pc, #304]	; (80089b0 <_dtoa_r+0x618>)
 8008880:	4431      	add	r1, r6
 8008882:	910d      	str	r1, [sp, #52]	; 0x34
 8008884:	9908      	ldr	r1, [sp, #32]
 8008886:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800888a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800888e:	2900      	cmp	r1, #0
 8008890:	d043      	beq.n	800891a <_dtoa_r+0x582>
 8008892:	494d      	ldr	r1, [pc, #308]	; (80089c8 <_dtoa_r+0x630>)
 8008894:	2000      	movs	r0, #0
 8008896:	f7f7 ffe1 	bl	800085c <__aeabi_ddiv>
 800889a:	4652      	mov	r2, sl
 800889c:	465b      	mov	r3, fp
 800889e:	f7f7 fcfb 	bl	8000298 <__aeabi_dsub>
 80088a2:	9d01      	ldr	r5, [sp, #4]
 80088a4:	4682      	mov	sl, r0
 80088a6:	468b      	mov	fp, r1
 80088a8:	4649      	mov	r1, r9
 80088aa:	4640      	mov	r0, r8
 80088ac:	f7f8 f95c 	bl	8000b68 <__aeabi_d2iz>
 80088b0:	4606      	mov	r6, r0
 80088b2:	f7f7 fe3f 	bl	8000534 <__aeabi_i2d>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4640      	mov	r0, r8
 80088bc:	4649      	mov	r1, r9
 80088be:	f7f7 fceb 	bl	8000298 <__aeabi_dsub>
 80088c2:	3630      	adds	r6, #48	; 0x30
 80088c4:	f805 6b01 	strb.w	r6, [r5], #1
 80088c8:	4652      	mov	r2, sl
 80088ca:	465b      	mov	r3, fp
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	f7f8 f90c 	bl	8000aec <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d163      	bne.n	80089a0 <_dtoa_r+0x608>
 80088d8:	4642      	mov	r2, r8
 80088da:	464b      	mov	r3, r9
 80088dc:	4936      	ldr	r1, [pc, #216]	; (80089b8 <_dtoa_r+0x620>)
 80088de:	2000      	movs	r0, #0
 80088e0:	f7f7 fcda 	bl	8000298 <__aeabi_dsub>
 80088e4:	4652      	mov	r2, sl
 80088e6:	465b      	mov	r3, fp
 80088e8:	f7f8 f900 	bl	8000aec <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 80b5 	bne.w	8008a5c <_dtoa_r+0x6c4>
 80088f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f4:	429d      	cmp	r5, r3
 80088f6:	d081      	beq.n	80087fc <_dtoa_r+0x464>
 80088f8:	4b30      	ldr	r3, [pc, #192]	; (80089bc <_dtoa_r+0x624>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	4650      	mov	r0, sl
 80088fe:	4659      	mov	r1, fp
 8008900:	f7f7 fe82 	bl	8000608 <__aeabi_dmul>
 8008904:	4b2d      	ldr	r3, [pc, #180]	; (80089bc <_dtoa_r+0x624>)
 8008906:	4682      	mov	sl, r0
 8008908:	468b      	mov	fp, r1
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	2200      	movs	r2, #0
 8008910:	f7f7 fe7a 	bl	8000608 <__aeabi_dmul>
 8008914:	4680      	mov	r8, r0
 8008916:	4689      	mov	r9, r1
 8008918:	e7c6      	b.n	80088a8 <_dtoa_r+0x510>
 800891a:	4650      	mov	r0, sl
 800891c:	4659      	mov	r1, fp
 800891e:	f7f7 fe73 	bl	8000608 <__aeabi_dmul>
 8008922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008924:	9d01      	ldr	r5, [sp, #4]
 8008926:	930f      	str	r3, [sp, #60]	; 0x3c
 8008928:	4682      	mov	sl, r0
 800892a:	468b      	mov	fp, r1
 800892c:	4649      	mov	r1, r9
 800892e:	4640      	mov	r0, r8
 8008930:	f7f8 f91a 	bl	8000b68 <__aeabi_d2iz>
 8008934:	4606      	mov	r6, r0
 8008936:	f7f7 fdfd 	bl	8000534 <__aeabi_i2d>
 800893a:	3630      	adds	r6, #48	; 0x30
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f7 fca8 	bl	8000298 <__aeabi_dsub>
 8008948:	f805 6b01 	strb.w	r6, [r5], #1
 800894c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800894e:	429d      	cmp	r5, r3
 8008950:	4680      	mov	r8, r0
 8008952:	4689      	mov	r9, r1
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	d124      	bne.n	80089a4 <_dtoa_r+0x60c>
 800895a:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <_dtoa_r+0x630>)
 800895c:	4650      	mov	r0, sl
 800895e:	4659      	mov	r1, fp
 8008960:	f7f7 fc9c 	bl	800029c <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	f7f8 f8dc 	bl	8000b28 <__aeabi_dcmpgt>
 8008970:	2800      	cmp	r0, #0
 8008972:	d173      	bne.n	8008a5c <_dtoa_r+0x6c4>
 8008974:	4652      	mov	r2, sl
 8008976:	465b      	mov	r3, fp
 8008978:	4913      	ldr	r1, [pc, #76]	; (80089c8 <_dtoa_r+0x630>)
 800897a:	2000      	movs	r0, #0
 800897c:	f7f7 fc8c 	bl	8000298 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4640      	mov	r0, r8
 8008986:	4649      	mov	r1, r9
 8008988:	f7f8 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800898c:	2800      	cmp	r0, #0
 800898e:	f43f af35 	beq.w	80087fc <_dtoa_r+0x464>
 8008992:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008994:	1e6b      	subs	r3, r5, #1
 8008996:	930f      	str	r3, [sp, #60]	; 0x3c
 8008998:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800899c:	2b30      	cmp	r3, #48	; 0x30
 800899e:	d0f8      	beq.n	8008992 <_dtoa_r+0x5fa>
 80089a0:	9700      	str	r7, [sp, #0]
 80089a2:	e049      	b.n	8008a38 <_dtoa_r+0x6a0>
 80089a4:	4b05      	ldr	r3, [pc, #20]	; (80089bc <_dtoa_r+0x624>)
 80089a6:	f7f7 fe2f 	bl	8000608 <__aeabi_dmul>
 80089aa:	4680      	mov	r8, r0
 80089ac:	4689      	mov	r9, r1
 80089ae:	e7bd      	b.n	800892c <_dtoa_r+0x594>
 80089b0:	0800a5b8 	.word	0x0800a5b8
 80089b4:	0800a590 	.word	0x0800a590
 80089b8:	3ff00000 	.word	0x3ff00000
 80089bc:	40240000 	.word	0x40240000
 80089c0:	401c0000 	.word	0x401c0000
 80089c4:	40140000 	.word	0x40140000
 80089c8:	3fe00000 	.word	0x3fe00000
 80089cc:	9d01      	ldr	r5, [sp, #4]
 80089ce:	4656      	mov	r6, sl
 80089d0:	465f      	mov	r7, fp
 80089d2:	4642      	mov	r2, r8
 80089d4:	464b      	mov	r3, r9
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f7 ff3f 	bl	800085c <__aeabi_ddiv>
 80089de:	f7f8 f8c3 	bl	8000b68 <__aeabi_d2iz>
 80089e2:	4682      	mov	sl, r0
 80089e4:	f7f7 fda6 	bl	8000534 <__aeabi_i2d>
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	f7f7 fe0c 	bl	8000608 <__aeabi_dmul>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4630      	mov	r0, r6
 80089f6:	4639      	mov	r1, r7
 80089f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089fc:	f7f7 fc4c 	bl	8000298 <__aeabi_dsub>
 8008a00:	f805 6b01 	strb.w	r6, [r5], #1
 8008a04:	9e01      	ldr	r6, [sp, #4]
 8008a06:	9f03      	ldr	r7, [sp, #12]
 8008a08:	1bae      	subs	r6, r5, r6
 8008a0a:	42b7      	cmp	r7, r6
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	d135      	bne.n	8008a7e <_dtoa_r+0x6e6>
 8008a12:	f7f7 fc43 	bl	800029c <__adddf3>
 8008a16:	4642      	mov	r2, r8
 8008a18:	464b      	mov	r3, r9
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	f7f8 f883 	bl	8000b28 <__aeabi_dcmpgt>
 8008a22:	b9d0      	cbnz	r0, 8008a5a <_dtoa_r+0x6c2>
 8008a24:	4642      	mov	r2, r8
 8008a26:	464b      	mov	r3, r9
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	f7f8 f854 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a30:	b110      	cbz	r0, 8008a38 <_dtoa_r+0x6a0>
 8008a32:	f01a 0f01 	tst.w	sl, #1
 8008a36:	d110      	bne.n	8008a5a <_dtoa_r+0x6c2>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	ee18 1a10 	vmov	r1, s16
 8008a3e:	f000 faf3 	bl	8009028 <_Bfree>
 8008a42:	2300      	movs	r3, #0
 8008a44:	9800      	ldr	r0, [sp, #0]
 8008a46:	702b      	strb	r3, [r5, #0]
 8008a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	6018      	str	r0, [r3, #0]
 8008a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f43f acf1 	beq.w	8008438 <_dtoa_r+0xa0>
 8008a56:	601d      	str	r5, [r3, #0]
 8008a58:	e4ee      	b.n	8008438 <_dtoa_r+0xa0>
 8008a5a:	9f00      	ldr	r7, [sp, #0]
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	461d      	mov	r5, r3
 8008a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a64:	2a39      	cmp	r2, #57	; 0x39
 8008a66:	d106      	bne.n	8008a76 <_dtoa_r+0x6de>
 8008a68:	9a01      	ldr	r2, [sp, #4]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d1f7      	bne.n	8008a5e <_dtoa_r+0x6c6>
 8008a6e:	9901      	ldr	r1, [sp, #4]
 8008a70:	2230      	movs	r2, #48	; 0x30
 8008a72:	3701      	adds	r7, #1
 8008a74:	700a      	strb	r2, [r1, #0]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	3201      	adds	r2, #1
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	e790      	b.n	80089a0 <_dtoa_r+0x608>
 8008a7e:	4ba6      	ldr	r3, [pc, #664]	; (8008d18 <_dtoa_r+0x980>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	f7f7 fdc1 	bl	8000608 <__aeabi_dmul>
 8008a86:	2200      	movs	r2, #0
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460f      	mov	r7, r1
 8008a8e:	f7f8 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d09d      	beq.n	80089d2 <_dtoa_r+0x63a>
 8008a96:	e7cf      	b.n	8008a38 <_dtoa_r+0x6a0>
 8008a98:	9a08      	ldr	r2, [sp, #32]
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	f000 80d7 	beq.w	8008c4e <_dtoa_r+0x8b6>
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	2a01      	cmp	r2, #1
 8008aa4:	f300 80ba 	bgt.w	8008c1c <_dtoa_r+0x884>
 8008aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	f000 80b2 	beq.w	8008c14 <_dtoa_r+0x87c>
 8008ab0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ab4:	9e07      	ldr	r6, [sp, #28]
 8008ab6:	9d04      	ldr	r5, [sp, #16]
 8008ab8:	9a04      	ldr	r2, [sp, #16]
 8008aba:	441a      	add	r2, r3
 8008abc:	9204      	str	r2, [sp, #16]
 8008abe:	9a05      	ldr	r2, [sp, #20]
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	441a      	add	r2, r3
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	f000 fb66 	bl	8009198 <__i2b>
 8008acc:	4607      	mov	r7, r0
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	dd0c      	ble.n	8008aec <_dtoa_r+0x754>
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	dd09      	ble.n	8008aec <_dtoa_r+0x754>
 8008ad8:	42ab      	cmp	r3, r5
 8008ada:	9a04      	ldr	r2, [sp, #16]
 8008adc:	bfa8      	it	ge
 8008ade:	462b      	movge	r3, r5
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	9204      	str	r2, [sp, #16]
 8008ae4:	9a05      	ldr	r2, [sp, #20]
 8008ae6:	1aed      	subs	r5, r5, r3
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	b31b      	cbz	r3, 8008b38 <_dtoa_r+0x7a0>
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80af 	beq.w	8008c56 <_dtoa_r+0x8be>
 8008af8:	2e00      	cmp	r6, #0
 8008afa:	dd13      	ble.n	8008b24 <_dtoa_r+0x78c>
 8008afc:	4639      	mov	r1, r7
 8008afe:	4632      	mov	r2, r6
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 fc09 	bl	8009318 <__pow5mult>
 8008b06:	ee18 2a10 	vmov	r2, s16
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fb58 	bl	80091c4 <__multiply>
 8008b14:	ee18 1a10 	vmov	r1, s16
 8008b18:	4680      	mov	r8, r0
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fa84 	bl	8009028 <_Bfree>
 8008b20:	ee08 8a10 	vmov	s16, r8
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	1b9a      	subs	r2, r3, r6
 8008b28:	d006      	beq.n	8008b38 <_dtoa_r+0x7a0>
 8008b2a:	ee18 1a10 	vmov	r1, s16
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fbf2 	bl	8009318 <__pow5mult>
 8008b34:	ee08 0a10 	vmov	s16, r0
 8008b38:	2101      	movs	r1, #1
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fb2c 	bl	8009198 <__i2b>
 8008b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	4606      	mov	r6, r0
 8008b46:	f340 8088 	ble.w	8008c5a <_dtoa_r+0x8c2>
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4601      	mov	r1, r0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 fbe2 	bl	8009318 <__pow5mult>
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	4606      	mov	r6, r0
 8008b5a:	f340 8081 	ble.w	8008c60 <_dtoa_r+0x8c8>
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	6933      	ldr	r3, [r6, #16]
 8008b64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b68:	6918      	ldr	r0, [r3, #16]
 8008b6a:	f000 fac5 	bl	80090f8 <__hi0bits>
 8008b6e:	f1c0 0020 	rsb	r0, r0, #32
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	4418      	add	r0, r3
 8008b76:	f010 001f 	ands.w	r0, r0, #31
 8008b7a:	f000 8092 	beq.w	8008ca2 <_dtoa_r+0x90a>
 8008b7e:	f1c0 0320 	rsb	r3, r0, #32
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	f340 808a 	ble.w	8008c9c <_dtoa_r+0x904>
 8008b88:	f1c0 001c 	rsb	r0, r0, #28
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	4403      	add	r3, r0
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	9b05      	ldr	r3, [sp, #20]
 8008b94:	4403      	add	r3, r0
 8008b96:	4405      	add	r5, r0
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dd07      	ble.n	8008bb0 <_dtoa_r+0x818>
 8008ba0:	ee18 1a10 	vmov	r1, s16
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fc10 	bl	80093cc <__lshift>
 8008bac:	ee08 0a10 	vmov	s16, r0
 8008bb0:	9b05      	ldr	r3, [sp, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dd05      	ble.n	8008bc2 <_dtoa_r+0x82a>
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 fc06 	bl	80093cc <__lshift>
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d06e      	beq.n	8008ca6 <_dtoa_r+0x90e>
 8008bc8:	ee18 0a10 	vmov	r0, s16
 8008bcc:	4631      	mov	r1, r6
 8008bce:	f000 fc6d 	bl	80094ac <__mcmp>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	da67      	bge.n	8008ca6 <_dtoa_r+0x90e>
 8008bd6:	9b00      	ldr	r3, [sp, #0]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	ee18 1a10 	vmov	r1, s16
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	220a      	movs	r2, #10
 8008be2:	2300      	movs	r3, #0
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fa41 	bl	800906c <__multadd>
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	ee08 0a10 	vmov	s16, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 81b1 	beq.w	8008f58 <_dtoa_r+0xbc0>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	220a      	movs	r2, #10
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 fa35 	bl	800906c <__multadd>
 8008c02:	9b02      	ldr	r3, [sp, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	4607      	mov	r7, r0
 8008c08:	f300 808e 	bgt.w	8008d28 <_dtoa_r+0x990>
 8008c0c:	9b06      	ldr	r3, [sp, #24]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	dc51      	bgt.n	8008cb6 <_dtoa_r+0x91e>
 8008c12:	e089      	b.n	8008d28 <_dtoa_r+0x990>
 8008c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c1a:	e74b      	b.n	8008ab4 <_dtoa_r+0x71c>
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	1e5e      	subs	r6, r3, #1
 8008c20:	9b07      	ldr	r3, [sp, #28]
 8008c22:	42b3      	cmp	r3, r6
 8008c24:	bfbf      	itttt	lt
 8008c26:	9b07      	ldrlt	r3, [sp, #28]
 8008c28:	9607      	strlt	r6, [sp, #28]
 8008c2a:	1af2      	sublt	r2, r6, r3
 8008c2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c2e:	bfb6      	itet	lt
 8008c30:	189b      	addlt	r3, r3, r2
 8008c32:	1b9e      	subge	r6, r3, r6
 8008c34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	bfb8      	it	lt
 8008c3a:	2600      	movlt	r6, #0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfb7      	itett	lt
 8008c40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008c44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c48:	1a9d      	sublt	r5, r3, r2
 8008c4a:	2300      	movlt	r3, #0
 8008c4c:	e734      	b.n	8008ab8 <_dtoa_r+0x720>
 8008c4e:	9e07      	ldr	r6, [sp, #28]
 8008c50:	9d04      	ldr	r5, [sp, #16]
 8008c52:	9f08      	ldr	r7, [sp, #32]
 8008c54:	e73b      	b.n	8008ace <_dtoa_r+0x736>
 8008c56:	9a07      	ldr	r2, [sp, #28]
 8008c58:	e767      	b.n	8008b2a <_dtoa_r+0x792>
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	dc18      	bgt.n	8008c92 <_dtoa_r+0x8fa>
 8008c60:	f1ba 0f00 	cmp.w	sl, #0
 8008c64:	d115      	bne.n	8008c92 <_dtoa_r+0x8fa>
 8008c66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c6a:	b993      	cbnz	r3, 8008c92 <_dtoa_r+0x8fa>
 8008c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c70:	0d1b      	lsrs	r3, r3, #20
 8008c72:	051b      	lsls	r3, r3, #20
 8008c74:	b183      	cbz	r3, 8008c98 <_dtoa_r+0x900>
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	9b05      	ldr	r3, [sp, #20]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	f04f 0801 	mov.w	r8, #1
 8008c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f af6a 	bne.w	8008b62 <_dtoa_r+0x7ca>
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e76f      	b.n	8008b72 <_dtoa_r+0x7da>
 8008c92:	f04f 0800 	mov.w	r8, #0
 8008c96:	e7f6      	b.n	8008c86 <_dtoa_r+0x8ee>
 8008c98:	4698      	mov	r8, r3
 8008c9a:	e7f4      	b.n	8008c86 <_dtoa_r+0x8ee>
 8008c9c:	f43f af7d 	beq.w	8008b9a <_dtoa_r+0x802>
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	301c      	adds	r0, #28
 8008ca4:	e772      	b.n	8008b8c <_dtoa_r+0x7f4>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dc37      	bgt.n	8008d1c <_dtoa_r+0x984>
 8008cac:	9b06      	ldr	r3, [sp, #24]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dd34      	ble.n	8008d1c <_dtoa_r+0x984>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	9b02      	ldr	r3, [sp, #8]
 8008cb8:	b96b      	cbnz	r3, 8008cd6 <_dtoa_r+0x93e>
 8008cba:	4631      	mov	r1, r6
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 f9d4 	bl	800906c <__multadd>
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	ee18 0a10 	vmov	r0, s16
 8008ccc:	f000 fbee 	bl	80094ac <__mcmp>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	f73f adbb 	bgt.w	800884c <_dtoa_r+0x4b4>
 8008cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd8:	9d01      	ldr	r5, [sp, #4]
 8008cda:	43db      	mvns	r3, r3
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	f04f 0800 	mov.w	r8, #0
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 f99f 	bl	8009028 <_Bfree>
 8008cea:	2f00      	cmp	r7, #0
 8008cec:	f43f aea4 	beq.w	8008a38 <_dtoa_r+0x6a0>
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	d005      	beq.n	8008d02 <_dtoa_r+0x96a>
 8008cf6:	45b8      	cmp	r8, r7
 8008cf8:	d003      	beq.n	8008d02 <_dtoa_r+0x96a>
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 f993 	bl	8009028 <_Bfree>
 8008d02:	4639      	mov	r1, r7
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 f98f 	bl	8009028 <_Bfree>
 8008d0a:	e695      	b.n	8008a38 <_dtoa_r+0x6a0>
 8008d0c:	2600      	movs	r6, #0
 8008d0e:	4637      	mov	r7, r6
 8008d10:	e7e1      	b.n	8008cd6 <_dtoa_r+0x93e>
 8008d12:	9700      	str	r7, [sp, #0]
 8008d14:	4637      	mov	r7, r6
 8008d16:	e599      	b.n	800884c <_dtoa_r+0x4b4>
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	9b08      	ldr	r3, [sp, #32]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80ca 	beq.w	8008eb8 <_dtoa_r+0xb20>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	dd05      	ble.n	8008d38 <_dtoa_r+0x9a0>
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fb4b 	bl	80093cc <__lshift>
 8008d36:	4607      	mov	r7, r0
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	d05b      	beq.n	8008df6 <_dtoa_r+0xa5e>
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 f931 	bl	8008fa8 <_Balloc>
 8008d46:	4605      	mov	r5, r0
 8008d48:	b928      	cbnz	r0, 8008d56 <_dtoa_r+0x9be>
 8008d4a:	4b87      	ldr	r3, [pc, #540]	; (8008f68 <_dtoa_r+0xbd0>)
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d52:	f7ff bb3b 	b.w	80083cc <_dtoa_r+0x34>
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	3202      	adds	r2, #2
 8008d5a:	0092      	lsls	r2, r2, #2
 8008d5c:	f107 010c 	add.w	r1, r7, #12
 8008d60:	300c      	adds	r0, #12
 8008d62:	f000 f913 	bl	8008f8c <memcpy>
 8008d66:	2201      	movs	r2, #1
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 fb2e 	bl	80093cc <__lshift>
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	f103 0901 	add.w	r9, r3, #1
 8008d76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	9305      	str	r3, [sp, #20]
 8008d7e:	f00a 0301 	and.w	r3, sl, #1
 8008d82:	46b8      	mov	r8, r7
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	4607      	mov	r7, r0
 8008d88:	4631      	mov	r1, r6
 8008d8a:	ee18 0a10 	vmov	r0, s16
 8008d8e:	f7ff fa77 	bl	8008280 <quorem>
 8008d92:	4641      	mov	r1, r8
 8008d94:	9002      	str	r0, [sp, #8]
 8008d96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d9a:	ee18 0a10 	vmov	r0, s16
 8008d9e:	f000 fb85 	bl	80094ac <__mcmp>
 8008da2:	463a      	mov	r2, r7
 8008da4:	9003      	str	r0, [sp, #12]
 8008da6:	4631      	mov	r1, r6
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fb9b 	bl	80094e4 <__mdiff>
 8008dae:	68c2      	ldr	r2, [r0, #12]
 8008db0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008db4:	4605      	mov	r5, r0
 8008db6:	bb02      	cbnz	r2, 8008dfa <_dtoa_r+0xa62>
 8008db8:	4601      	mov	r1, r0
 8008dba:	ee18 0a10 	vmov	r0, s16
 8008dbe:	f000 fb75 	bl	80094ac <__mcmp>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	9207      	str	r2, [sp, #28]
 8008dca:	f000 f92d 	bl	8009028 <_Bfree>
 8008dce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008dd2:	ea43 0102 	orr.w	r1, r3, r2
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	464d      	mov	r5, r9
 8008ddc:	d10f      	bne.n	8008dfe <_dtoa_r+0xa66>
 8008dde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008de2:	d02a      	beq.n	8008e3a <_dtoa_r+0xaa2>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	dd02      	ble.n	8008df0 <_dtoa_r+0xa58>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008df0:	f88b a000 	strb.w	sl, [fp]
 8008df4:	e775      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008df6:	4638      	mov	r0, r7
 8008df8:	e7ba      	b.n	8008d70 <_dtoa_r+0x9d8>
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	e7e2      	b.n	8008dc4 <_dtoa_r+0xa2c>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db04      	blt.n	8008e0e <_dtoa_r+0xa76>
 8008e04:	9906      	ldr	r1, [sp, #24]
 8008e06:	430b      	orrs	r3, r1
 8008e08:	9904      	ldr	r1, [sp, #16]
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	d122      	bne.n	8008e54 <_dtoa_r+0xabc>
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	ddee      	ble.n	8008df0 <_dtoa_r+0xa58>
 8008e12:	ee18 1a10 	vmov	r1, s16
 8008e16:	2201      	movs	r2, #1
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 fad7 	bl	80093cc <__lshift>
 8008e1e:	4631      	mov	r1, r6
 8008e20:	ee08 0a10 	vmov	s16, r0
 8008e24:	f000 fb42 	bl	80094ac <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dc03      	bgt.n	8008e34 <_dtoa_r+0xa9c>
 8008e2c:	d1e0      	bne.n	8008df0 <_dtoa_r+0xa58>
 8008e2e:	f01a 0f01 	tst.w	sl, #1
 8008e32:	d0dd      	beq.n	8008df0 <_dtoa_r+0xa58>
 8008e34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e38:	d1d7      	bne.n	8008dea <_dtoa_r+0xa52>
 8008e3a:	2339      	movs	r3, #57	; 0x39
 8008e3c:	f88b 3000 	strb.w	r3, [fp]
 8008e40:	462b      	mov	r3, r5
 8008e42:	461d      	mov	r5, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e4a:	2a39      	cmp	r2, #57	; 0x39
 8008e4c:	d071      	beq.n	8008f32 <_dtoa_r+0xb9a>
 8008e4e:	3201      	adds	r2, #1
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e746      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	dd07      	ble.n	8008e68 <_dtoa_r+0xad0>
 8008e58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e5c:	d0ed      	beq.n	8008e3a <_dtoa_r+0xaa2>
 8008e5e:	f10a 0301 	add.w	r3, sl, #1
 8008e62:	f88b 3000 	strb.w	r3, [fp]
 8008e66:	e73c      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008e68:	9b05      	ldr	r3, [sp, #20]
 8008e6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e6e:	4599      	cmp	r9, r3
 8008e70:	d047      	beq.n	8008f02 <_dtoa_r+0xb6a>
 8008e72:	ee18 1a10 	vmov	r1, s16
 8008e76:	2300      	movs	r3, #0
 8008e78:	220a      	movs	r2, #10
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f8f6 	bl	800906c <__multadd>
 8008e80:	45b8      	cmp	r8, r7
 8008e82:	ee08 0a10 	vmov	s16, r0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	f04f 020a 	mov.w	r2, #10
 8008e8e:	4641      	mov	r1, r8
 8008e90:	4620      	mov	r0, r4
 8008e92:	d106      	bne.n	8008ea2 <_dtoa_r+0xb0a>
 8008e94:	f000 f8ea 	bl	800906c <__multadd>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	f109 0901 	add.w	r9, r9, #1
 8008ea0:	e772      	b.n	8008d88 <_dtoa_r+0x9f0>
 8008ea2:	f000 f8e3 	bl	800906c <__multadd>
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	2300      	movs	r3, #0
 8008eac:	220a      	movs	r2, #10
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 f8dc 	bl	800906c <__multadd>
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	e7f1      	b.n	8008e9c <_dtoa_r+0xb04>
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	9d01      	ldr	r5, [sp, #4]
 8008ebe:	ee18 0a10 	vmov	r0, s16
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	f7ff f9dc 	bl	8008280 <quorem>
 8008ec8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	f805 ab01 	strb.w	sl, [r5], #1
 8008ed2:	1aea      	subs	r2, r5, r3
 8008ed4:	9b02      	ldr	r3, [sp, #8]
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	dd09      	ble.n	8008eee <_dtoa_r+0xb56>
 8008eda:	ee18 1a10 	vmov	r1, s16
 8008ede:	2300      	movs	r3, #0
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 f8c2 	bl	800906c <__multadd>
 8008ee8:	ee08 0a10 	vmov	s16, r0
 8008eec:	e7e7      	b.n	8008ebe <_dtoa_r+0xb26>
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bfc8      	it	gt
 8008ef4:	461d      	movgt	r5, r3
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	bfd8      	it	le
 8008efa:	2501      	movle	r5, #1
 8008efc:	441d      	add	r5, r3
 8008efe:	f04f 0800 	mov.w	r8, #0
 8008f02:	ee18 1a10 	vmov	r1, s16
 8008f06:	2201      	movs	r2, #1
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fa5f 	bl	80093cc <__lshift>
 8008f0e:	4631      	mov	r1, r6
 8008f10:	ee08 0a10 	vmov	s16, r0
 8008f14:	f000 faca 	bl	80094ac <__mcmp>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	dc91      	bgt.n	8008e40 <_dtoa_r+0xaa8>
 8008f1c:	d102      	bne.n	8008f24 <_dtoa_r+0xb8c>
 8008f1e:	f01a 0f01 	tst.w	sl, #1
 8008f22:	d18d      	bne.n	8008e40 <_dtoa_r+0xaa8>
 8008f24:	462b      	mov	r3, r5
 8008f26:	461d      	mov	r5, r3
 8008f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f2c:	2a30      	cmp	r2, #48	; 0x30
 8008f2e:	d0fa      	beq.n	8008f26 <_dtoa_r+0xb8e>
 8008f30:	e6d7      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008f32:	9a01      	ldr	r2, [sp, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d184      	bne.n	8008e42 <_dtoa_r+0xaaa>
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	2331      	movs	r3, #49	; 0x31
 8008f40:	7013      	strb	r3, [r2, #0]
 8008f42:	e6ce      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008f44:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <_dtoa_r+0xbd4>)
 8008f46:	f7ff ba95 	b.w	8008474 <_dtoa_r+0xdc>
 8008f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f47f aa6e 	bne.w	800842e <_dtoa_r+0x96>
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <_dtoa_r+0xbd8>)
 8008f54:	f7ff ba8e 	b.w	8008474 <_dtoa_r+0xdc>
 8008f58:	9b02      	ldr	r3, [sp, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dcae      	bgt.n	8008ebc <_dtoa_r+0xb24>
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	f73f aea8 	bgt.w	8008cb6 <_dtoa_r+0x91e>
 8008f66:	e7a9      	b.n	8008ebc <_dtoa_r+0xb24>
 8008f68:	0800a51f 	.word	0x0800a51f
 8008f6c:	0800a47c 	.word	0x0800a47c
 8008f70:	0800a4a0 	.word	0x0800a4a0

08008f74 <_localeconv_r>:
 8008f74:	4800      	ldr	r0, [pc, #0]	; (8008f78 <_localeconv_r+0x4>)
 8008f76:	4770      	bx	lr
 8008f78:	20000164 	.word	0x20000164

08008f7c <malloc>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <malloc+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f000 bc17 	b.w	80097b4 <_malloc_r>
 8008f86:	bf00      	nop
 8008f88:	20000010 	.word	0x20000010

08008f8c <memcpy>:
 8008f8c:	440a      	add	r2, r1
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f94:	d100      	bne.n	8008f98 <memcpy+0xc>
 8008f96:	4770      	bx	lr
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa2:	4291      	cmp	r1, r2
 8008fa4:	d1f9      	bne.n	8008f9a <memcpy+0xe>
 8008fa6:	bd10      	pop	{r4, pc}

08008fa8 <_Balloc>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fac:	4604      	mov	r4, r0
 8008fae:	460d      	mov	r5, r1
 8008fb0:	b976      	cbnz	r6, 8008fd0 <_Balloc+0x28>
 8008fb2:	2010      	movs	r0, #16
 8008fb4:	f7ff ffe2 	bl	8008f7c <malloc>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	6260      	str	r0, [r4, #36]	; 0x24
 8008fbc:	b920      	cbnz	r0, 8008fc8 <_Balloc+0x20>
 8008fbe:	4b18      	ldr	r3, [pc, #96]	; (8009020 <_Balloc+0x78>)
 8008fc0:	4818      	ldr	r0, [pc, #96]	; (8009024 <_Balloc+0x7c>)
 8008fc2:	2166      	movs	r1, #102	; 0x66
 8008fc4:	f000 fc7a 	bl	80098bc <__assert_func>
 8008fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fcc:	6006      	str	r6, [r0, #0]
 8008fce:	60c6      	str	r6, [r0, #12]
 8008fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fd2:	68f3      	ldr	r3, [r6, #12]
 8008fd4:	b183      	cbz	r3, 8008ff8 <_Balloc+0x50>
 8008fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fde:	b9b8      	cbnz	r0, 8009010 <_Balloc+0x68>
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe6:	1d72      	adds	r2, r6, #5
 8008fe8:	0092      	lsls	r2, r2, #2
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fb60 	bl	80096b0 <_calloc_r>
 8008ff0:	b160      	cbz	r0, 800900c <_Balloc+0x64>
 8008ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff6:	e00e      	b.n	8009016 <_Balloc+0x6e>
 8008ff8:	2221      	movs	r2, #33	; 0x21
 8008ffa:	2104      	movs	r1, #4
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fb57 	bl	80096b0 <_calloc_r>
 8009002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009004:	60f0      	str	r0, [r6, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <_Balloc+0x2e>
 800900c:	2000      	movs	r0, #0
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	6802      	ldr	r2, [r0, #0]
 8009012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009016:	2300      	movs	r3, #0
 8009018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800901c:	e7f7      	b.n	800900e <_Balloc+0x66>
 800901e:	bf00      	nop
 8009020:	0800a4ad 	.word	0x0800a4ad
 8009024:	0800a530 	.word	0x0800a530

08009028 <_Bfree>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800902c:	4605      	mov	r5, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b976      	cbnz	r6, 8009050 <_Bfree+0x28>
 8009032:	2010      	movs	r0, #16
 8009034:	f7ff ffa2 	bl	8008f7c <malloc>
 8009038:	4602      	mov	r2, r0
 800903a:	6268      	str	r0, [r5, #36]	; 0x24
 800903c:	b920      	cbnz	r0, 8009048 <_Bfree+0x20>
 800903e:	4b09      	ldr	r3, [pc, #36]	; (8009064 <_Bfree+0x3c>)
 8009040:	4809      	ldr	r0, [pc, #36]	; (8009068 <_Bfree+0x40>)
 8009042:	218a      	movs	r1, #138	; 0x8a
 8009044:	f000 fc3a 	bl	80098bc <__assert_func>
 8009048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800904c:	6006      	str	r6, [r0, #0]
 800904e:	60c6      	str	r6, [r0, #12]
 8009050:	b13c      	cbz	r4, 8009062 <_Bfree+0x3a>
 8009052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009054:	6862      	ldr	r2, [r4, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800905c:	6021      	str	r1, [r4, #0]
 800905e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	0800a4ad 	.word	0x0800a4ad
 8009068:	0800a530 	.word	0x0800a530

0800906c <__multadd>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	690d      	ldr	r5, [r1, #16]
 8009072:	4607      	mov	r7, r0
 8009074:	460c      	mov	r4, r1
 8009076:	461e      	mov	r6, r3
 8009078:	f101 0c14 	add.w	ip, r1, #20
 800907c:	2000      	movs	r0, #0
 800907e:	f8dc 3000 	ldr.w	r3, [ip]
 8009082:	b299      	uxth	r1, r3
 8009084:	fb02 6101 	mla	r1, r2, r1, r6
 8009088:	0c1e      	lsrs	r6, r3, #16
 800908a:	0c0b      	lsrs	r3, r1, #16
 800908c:	fb02 3306 	mla	r3, r2, r6, r3
 8009090:	b289      	uxth	r1, r1
 8009092:	3001      	adds	r0, #1
 8009094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009098:	4285      	cmp	r5, r0
 800909a:	f84c 1b04 	str.w	r1, [ip], #4
 800909e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090a2:	dcec      	bgt.n	800907e <__multadd+0x12>
 80090a4:	b30e      	cbz	r6, 80090ea <__multadd+0x7e>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc19      	bgt.n	80090e0 <__multadd+0x74>
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4638      	mov	r0, r7
 80090b0:	3101      	adds	r1, #1
 80090b2:	f7ff ff79 	bl	8008fa8 <_Balloc>
 80090b6:	4680      	mov	r8, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <__multadd+0x5a>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <__multadd+0x84>)
 80090be:	480d      	ldr	r0, [pc, #52]	; (80090f4 <__multadd+0x88>)
 80090c0:	21b5      	movs	r1, #181	; 0xb5
 80090c2:	f000 fbfb 	bl	80098bc <__assert_func>
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	3202      	adds	r2, #2
 80090ca:	f104 010c 	add.w	r1, r4, #12
 80090ce:	0092      	lsls	r2, r2, #2
 80090d0:	300c      	adds	r0, #12
 80090d2:	f7ff ff5b 	bl	8008f8c <memcpy>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa5 	bl	8009028 <_Bfree>
 80090de:	4644      	mov	r4, r8
 80090e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090e4:	3501      	adds	r5, #1
 80090e6:	615e      	str	r6, [r3, #20]
 80090e8:	6125      	str	r5, [r4, #16]
 80090ea:	4620      	mov	r0, r4
 80090ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f0:	0800a51f 	.word	0x0800a51f
 80090f4:	0800a530 	.word	0x0800a530

080090f8 <__hi0bits>:
 80090f8:	0c03      	lsrs	r3, r0, #16
 80090fa:	041b      	lsls	r3, r3, #16
 80090fc:	b9d3      	cbnz	r3, 8009134 <__hi0bits+0x3c>
 80090fe:	0400      	lsls	r0, r0, #16
 8009100:	2310      	movs	r3, #16
 8009102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009106:	bf04      	itt	eq
 8009108:	0200      	lsleq	r0, r0, #8
 800910a:	3308      	addeq	r3, #8
 800910c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009110:	bf04      	itt	eq
 8009112:	0100      	lsleq	r0, r0, #4
 8009114:	3304      	addeq	r3, #4
 8009116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800911a:	bf04      	itt	eq
 800911c:	0080      	lsleq	r0, r0, #2
 800911e:	3302      	addeq	r3, #2
 8009120:	2800      	cmp	r0, #0
 8009122:	db05      	blt.n	8009130 <__hi0bits+0x38>
 8009124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009128:	f103 0301 	add.w	r3, r3, #1
 800912c:	bf08      	it	eq
 800912e:	2320      	moveq	r3, #32
 8009130:	4618      	mov	r0, r3
 8009132:	4770      	bx	lr
 8009134:	2300      	movs	r3, #0
 8009136:	e7e4      	b.n	8009102 <__hi0bits+0xa>

08009138 <__lo0bits>:
 8009138:	6803      	ldr	r3, [r0, #0]
 800913a:	f013 0207 	ands.w	r2, r3, #7
 800913e:	4601      	mov	r1, r0
 8009140:	d00b      	beq.n	800915a <__lo0bits+0x22>
 8009142:	07da      	lsls	r2, r3, #31
 8009144:	d423      	bmi.n	800918e <__lo0bits+0x56>
 8009146:	0798      	lsls	r0, r3, #30
 8009148:	bf49      	itett	mi
 800914a:	085b      	lsrmi	r3, r3, #1
 800914c:	089b      	lsrpl	r3, r3, #2
 800914e:	2001      	movmi	r0, #1
 8009150:	600b      	strmi	r3, [r1, #0]
 8009152:	bf5c      	itt	pl
 8009154:	600b      	strpl	r3, [r1, #0]
 8009156:	2002      	movpl	r0, #2
 8009158:	4770      	bx	lr
 800915a:	b298      	uxth	r0, r3
 800915c:	b9a8      	cbnz	r0, 800918a <__lo0bits+0x52>
 800915e:	0c1b      	lsrs	r3, r3, #16
 8009160:	2010      	movs	r0, #16
 8009162:	b2da      	uxtb	r2, r3
 8009164:	b90a      	cbnz	r2, 800916a <__lo0bits+0x32>
 8009166:	3008      	adds	r0, #8
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	071a      	lsls	r2, r3, #28
 800916c:	bf04      	itt	eq
 800916e:	091b      	lsreq	r3, r3, #4
 8009170:	3004      	addeq	r0, #4
 8009172:	079a      	lsls	r2, r3, #30
 8009174:	bf04      	itt	eq
 8009176:	089b      	lsreq	r3, r3, #2
 8009178:	3002      	addeq	r0, #2
 800917a:	07da      	lsls	r2, r3, #31
 800917c:	d403      	bmi.n	8009186 <__lo0bits+0x4e>
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	f100 0001 	add.w	r0, r0, #1
 8009184:	d005      	beq.n	8009192 <__lo0bits+0x5a>
 8009186:	600b      	str	r3, [r1, #0]
 8009188:	4770      	bx	lr
 800918a:	4610      	mov	r0, r2
 800918c:	e7e9      	b.n	8009162 <__lo0bits+0x2a>
 800918e:	2000      	movs	r0, #0
 8009190:	4770      	bx	lr
 8009192:	2020      	movs	r0, #32
 8009194:	4770      	bx	lr
	...

08009198 <__i2b>:
 8009198:	b510      	push	{r4, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	2101      	movs	r1, #1
 800919e:	f7ff ff03 	bl	8008fa8 <_Balloc>
 80091a2:	4602      	mov	r2, r0
 80091a4:	b928      	cbnz	r0, 80091b2 <__i2b+0x1a>
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <__i2b+0x24>)
 80091a8:	4805      	ldr	r0, [pc, #20]	; (80091c0 <__i2b+0x28>)
 80091aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091ae:	f000 fb85 	bl	80098bc <__assert_func>
 80091b2:	2301      	movs	r3, #1
 80091b4:	6144      	str	r4, [r0, #20]
 80091b6:	6103      	str	r3, [r0, #16]
 80091b8:	bd10      	pop	{r4, pc}
 80091ba:	bf00      	nop
 80091bc:	0800a51f 	.word	0x0800a51f
 80091c0:	0800a530 	.word	0x0800a530

080091c4 <__multiply>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	4691      	mov	r9, r2
 80091ca:	690a      	ldr	r2, [r1, #16]
 80091cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	bfb8      	it	lt
 80091d4:	460b      	movlt	r3, r1
 80091d6:	460c      	mov	r4, r1
 80091d8:	bfbc      	itt	lt
 80091da:	464c      	movlt	r4, r9
 80091dc:	4699      	movlt	r9, r3
 80091de:	6927      	ldr	r7, [r4, #16]
 80091e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	6861      	ldr	r1, [r4, #4]
 80091e8:	eb07 060a 	add.w	r6, r7, sl
 80091ec:	42b3      	cmp	r3, r6
 80091ee:	b085      	sub	sp, #20
 80091f0:	bfb8      	it	lt
 80091f2:	3101      	addlt	r1, #1
 80091f4:	f7ff fed8 	bl	8008fa8 <_Balloc>
 80091f8:	b930      	cbnz	r0, 8009208 <__multiply+0x44>
 80091fa:	4602      	mov	r2, r0
 80091fc:	4b44      	ldr	r3, [pc, #272]	; (8009310 <__multiply+0x14c>)
 80091fe:	4845      	ldr	r0, [pc, #276]	; (8009314 <__multiply+0x150>)
 8009200:	f240 115d 	movw	r1, #349	; 0x15d
 8009204:	f000 fb5a 	bl	80098bc <__assert_func>
 8009208:	f100 0514 	add.w	r5, r0, #20
 800920c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009210:	462b      	mov	r3, r5
 8009212:	2200      	movs	r2, #0
 8009214:	4543      	cmp	r3, r8
 8009216:	d321      	bcc.n	800925c <__multiply+0x98>
 8009218:	f104 0314 	add.w	r3, r4, #20
 800921c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009220:	f109 0314 	add.w	r3, r9, #20
 8009224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009228:	9202      	str	r2, [sp, #8]
 800922a:	1b3a      	subs	r2, r7, r4
 800922c:	3a15      	subs	r2, #21
 800922e:	f022 0203 	bic.w	r2, r2, #3
 8009232:	3204      	adds	r2, #4
 8009234:	f104 0115 	add.w	r1, r4, #21
 8009238:	428f      	cmp	r7, r1
 800923a:	bf38      	it	cc
 800923c:	2204      	movcc	r2, #4
 800923e:	9201      	str	r2, [sp, #4]
 8009240:	9a02      	ldr	r2, [sp, #8]
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	429a      	cmp	r2, r3
 8009246:	d80c      	bhi.n	8009262 <__multiply+0x9e>
 8009248:	2e00      	cmp	r6, #0
 800924a:	dd03      	ble.n	8009254 <__multiply+0x90>
 800924c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009250:	2b00      	cmp	r3, #0
 8009252:	d05a      	beq.n	800930a <__multiply+0x146>
 8009254:	6106      	str	r6, [r0, #16]
 8009256:	b005      	add	sp, #20
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925c:	f843 2b04 	str.w	r2, [r3], #4
 8009260:	e7d8      	b.n	8009214 <__multiply+0x50>
 8009262:	f8b3 a000 	ldrh.w	sl, [r3]
 8009266:	f1ba 0f00 	cmp.w	sl, #0
 800926a:	d024      	beq.n	80092b6 <__multiply+0xf2>
 800926c:	f104 0e14 	add.w	lr, r4, #20
 8009270:	46a9      	mov	r9, r5
 8009272:	f04f 0c00 	mov.w	ip, #0
 8009276:	f85e 2b04 	ldr.w	r2, [lr], #4
 800927a:	f8d9 1000 	ldr.w	r1, [r9]
 800927e:	fa1f fb82 	uxth.w	fp, r2
 8009282:	b289      	uxth	r1, r1
 8009284:	fb0a 110b 	mla	r1, sl, fp, r1
 8009288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800928c:	f8d9 2000 	ldr.w	r2, [r9]
 8009290:	4461      	add	r1, ip
 8009292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009296:	fb0a c20b 	mla	r2, sl, fp, ip
 800929a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800929e:	b289      	uxth	r1, r1
 80092a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092a4:	4577      	cmp	r7, lr
 80092a6:	f849 1b04 	str.w	r1, [r9], #4
 80092aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092ae:	d8e2      	bhi.n	8009276 <__multiply+0xb2>
 80092b0:	9a01      	ldr	r2, [sp, #4]
 80092b2:	f845 c002 	str.w	ip, [r5, r2]
 80092b6:	9a03      	ldr	r2, [sp, #12]
 80092b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092bc:	3304      	adds	r3, #4
 80092be:	f1b9 0f00 	cmp.w	r9, #0
 80092c2:	d020      	beq.n	8009306 <__multiply+0x142>
 80092c4:	6829      	ldr	r1, [r5, #0]
 80092c6:	f104 0c14 	add.w	ip, r4, #20
 80092ca:	46ae      	mov	lr, r5
 80092cc:	f04f 0a00 	mov.w	sl, #0
 80092d0:	f8bc b000 	ldrh.w	fp, [ip]
 80092d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092d8:	fb09 220b 	mla	r2, r9, fp, r2
 80092dc:	4492      	add	sl, r2
 80092de:	b289      	uxth	r1, r1
 80092e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092e4:	f84e 1b04 	str.w	r1, [lr], #4
 80092e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092ec:	f8be 1000 	ldrh.w	r1, [lr]
 80092f0:	0c12      	lsrs	r2, r2, #16
 80092f2:	fb09 1102 	mla	r1, r9, r2, r1
 80092f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092fa:	4567      	cmp	r7, ip
 80092fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009300:	d8e6      	bhi.n	80092d0 <__multiply+0x10c>
 8009302:	9a01      	ldr	r2, [sp, #4]
 8009304:	50a9      	str	r1, [r5, r2]
 8009306:	3504      	adds	r5, #4
 8009308:	e79a      	b.n	8009240 <__multiply+0x7c>
 800930a:	3e01      	subs	r6, #1
 800930c:	e79c      	b.n	8009248 <__multiply+0x84>
 800930e:	bf00      	nop
 8009310:	0800a51f 	.word	0x0800a51f
 8009314:	0800a530 	.word	0x0800a530

08009318 <__pow5mult>:
 8009318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800931c:	4615      	mov	r5, r2
 800931e:	f012 0203 	ands.w	r2, r2, #3
 8009322:	4606      	mov	r6, r0
 8009324:	460f      	mov	r7, r1
 8009326:	d007      	beq.n	8009338 <__pow5mult+0x20>
 8009328:	4c25      	ldr	r4, [pc, #148]	; (80093c0 <__pow5mult+0xa8>)
 800932a:	3a01      	subs	r2, #1
 800932c:	2300      	movs	r3, #0
 800932e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009332:	f7ff fe9b 	bl	800906c <__multadd>
 8009336:	4607      	mov	r7, r0
 8009338:	10ad      	asrs	r5, r5, #2
 800933a:	d03d      	beq.n	80093b8 <__pow5mult+0xa0>
 800933c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800933e:	b97c      	cbnz	r4, 8009360 <__pow5mult+0x48>
 8009340:	2010      	movs	r0, #16
 8009342:	f7ff fe1b 	bl	8008f7c <malloc>
 8009346:	4602      	mov	r2, r0
 8009348:	6270      	str	r0, [r6, #36]	; 0x24
 800934a:	b928      	cbnz	r0, 8009358 <__pow5mult+0x40>
 800934c:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <__pow5mult+0xac>)
 800934e:	481e      	ldr	r0, [pc, #120]	; (80093c8 <__pow5mult+0xb0>)
 8009350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009354:	f000 fab2 	bl	80098bc <__assert_func>
 8009358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800935c:	6004      	str	r4, [r0, #0]
 800935e:	60c4      	str	r4, [r0, #12]
 8009360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009368:	b94c      	cbnz	r4, 800937e <__pow5mult+0x66>
 800936a:	f240 2171 	movw	r1, #625	; 0x271
 800936e:	4630      	mov	r0, r6
 8009370:	f7ff ff12 	bl	8009198 <__i2b>
 8009374:	2300      	movs	r3, #0
 8009376:	f8c8 0008 	str.w	r0, [r8, #8]
 800937a:	4604      	mov	r4, r0
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	f04f 0900 	mov.w	r9, #0
 8009382:	07eb      	lsls	r3, r5, #31
 8009384:	d50a      	bpl.n	800939c <__pow5mult+0x84>
 8009386:	4639      	mov	r1, r7
 8009388:	4622      	mov	r2, r4
 800938a:	4630      	mov	r0, r6
 800938c:	f7ff ff1a 	bl	80091c4 <__multiply>
 8009390:	4639      	mov	r1, r7
 8009392:	4680      	mov	r8, r0
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff fe47 	bl	8009028 <_Bfree>
 800939a:	4647      	mov	r7, r8
 800939c:	106d      	asrs	r5, r5, #1
 800939e:	d00b      	beq.n	80093b8 <__pow5mult+0xa0>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	b938      	cbnz	r0, 80093b4 <__pow5mult+0x9c>
 80093a4:	4622      	mov	r2, r4
 80093a6:	4621      	mov	r1, r4
 80093a8:	4630      	mov	r0, r6
 80093aa:	f7ff ff0b 	bl	80091c4 <__multiply>
 80093ae:	6020      	str	r0, [r4, #0]
 80093b0:	f8c0 9000 	str.w	r9, [r0]
 80093b4:	4604      	mov	r4, r0
 80093b6:	e7e4      	b.n	8009382 <__pow5mult+0x6a>
 80093b8:	4638      	mov	r0, r7
 80093ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093be:	bf00      	nop
 80093c0:	0800a680 	.word	0x0800a680
 80093c4:	0800a4ad 	.word	0x0800a4ad
 80093c8:	0800a530 	.word	0x0800a530

080093cc <__lshift>:
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	460c      	mov	r4, r1
 80093d2:	6849      	ldr	r1, [r1, #4]
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	4607      	mov	r7, r0
 80093de:	4691      	mov	r9, r2
 80093e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093e4:	f108 0601 	add.w	r6, r8, #1
 80093e8:	42b3      	cmp	r3, r6
 80093ea:	db0b      	blt.n	8009404 <__lshift+0x38>
 80093ec:	4638      	mov	r0, r7
 80093ee:	f7ff fddb 	bl	8008fa8 <_Balloc>
 80093f2:	4605      	mov	r5, r0
 80093f4:	b948      	cbnz	r0, 800940a <__lshift+0x3e>
 80093f6:	4602      	mov	r2, r0
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <__lshift+0xd8>)
 80093fa:	482b      	ldr	r0, [pc, #172]	; (80094a8 <__lshift+0xdc>)
 80093fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009400:	f000 fa5c 	bl	80098bc <__assert_func>
 8009404:	3101      	adds	r1, #1
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	e7ee      	b.n	80093e8 <__lshift+0x1c>
 800940a:	2300      	movs	r3, #0
 800940c:	f100 0114 	add.w	r1, r0, #20
 8009410:	f100 0210 	add.w	r2, r0, #16
 8009414:	4618      	mov	r0, r3
 8009416:	4553      	cmp	r3, sl
 8009418:	db37      	blt.n	800948a <__lshift+0xbe>
 800941a:	6920      	ldr	r0, [r4, #16]
 800941c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009420:	f104 0314 	add.w	r3, r4, #20
 8009424:	f019 091f 	ands.w	r9, r9, #31
 8009428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800942c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009430:	d02f      	beq.n	8009492 <__lshift+0xc6>
 8009432:	f1c9 0e20 	rsb	lr, r9, #32
 8009436:	468a      	mov	sl, r1
 8009438:	f04f 0c00 	mov.w	ip, #0
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	fa02 f209 	lsl.w	r2, r2, r9
 8009442:	ea42 020c 	orr.w	r2, r2, ip
 8009446:	f84a 2b04 	str.w	r2, [sl], #4
 800944a:	f853 2b04 	ldr.w	r2, [r3], #4
 800944e:	4298      	cmp	r0, r3
 8009450:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009454:	d8f2      	bhi.n	800943c <__lshift+0x70>
 8009456:	1b03      	subs	r3, r0, r4
 8009458:	3b15      	subs	r3, #21
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	3304      	adds	r3, #4
 8009460:	f104 0215 	add.w	r2, r4, #21
 8009464:	4290      	cmp	r0, r2
 8009466:	bf38      	it	cc
 8009468:	2304      	movcc	r3, #4
 800946a:	f841 c003 	str.w	ip, [r1, r3]
 800946e:	f1bc 0f00 	cmp.w	ip, #0
 8009472:	d001      	beq.n	8009478 <__lshift+0xac>
 8009474:	f108 0602 	add.w	r6, r8, #2
 8009478:	3e01      	subs	r6, #1
 800947a:	4638      	mov	r0, r7
 800947c:	612e      	str	r6, [r5, #16]
 800947e:	4621      	mov	r1, r4
 8009480:	f7ff fdd2 	bl	8009028 <_Bfree>
 8009484:	4628      	mov	r0, r5
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	f842 0f04 	str.w	r0, [r2, #4]!
 800948e:	3301      	adds	r3, #1
 8009490:	e7c1      	b.n	8009416 <__lshift+0x4a>
 8009492:	3904      	subs	r1, #4
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	f841 2f04 	str.w	r2, [r1, #4]!
 800949c:	4298      	cmp	r0, r3
 800949e:	d8f9      	bhi.n	8009494 <__lshift+0xc8>
 80094a0:	e7ea      	b.n	8009478 <__lshift+0xac>
 80094a2:	bf00      	nop
 80094a4:	0800a51f 	.word	0x0800a51f
 80094a8:	0800a530 	.word	0x0800a530

080094ac <__mcmp>:
 80094ac:	b530      	push	{r4, r5, lr}
 80094ae:	6902      	ldr	r2, [r0, #16]
 80094b0:	690c      	ldr	r4, [r1, #16]
 80094b2:	1b12      	subs	r2, r2, r4
 80094b4:	d10e      	bne.n	80094d4 <__mcmp+0x28>
 80094b6:	f100 0314 	add.w	r3, r0, #20
 80094ba:	3114      	adds	r1, #20
 80094bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094cc:	42a5      	cmp	r5, r4
 80094ce:	d003      	beq.n	80094d8 <__mcmp+0x2c>
 80094d0:	d305      	bcc.n	80094de <__mcmp+0x32>
 80094d2:	2201      	movs	r2, #1
 80094d4:	4610      	mov	r0, r2
 80094d6:	bd30      	pop	{r4, r5, pc}
 80094d8:	4283      	cmp	r3, r0
 80094da:	d3f3      	bcc.n	80094c4 <__mcmp+0x18>
 80094dc:	e7fa      	b.n	80094d4 <__mcmp+0x28>
 80094de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094e2:	e7f7      	b.n	80094d4 <__mcmp+0x28>

080094e4 <__mdiff>:
 80094e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	4606      	mov	r6, r0
 80094ec:	4611      	mov	r1, r2
 80094ee:	4620      	mov	r0, r4
 80094f0:	4690      	mov	r8, r2
 80094f2:	f7ff ffdb 	bl	80094ac <__mcmp>
 80094f6:	1e05      	subs	r5, r0, #0
 80094f8:	d110      	bne.n	800951c <__mdiff+0x38>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7ff fd53 	bl	8008fa8 <_Balloc>
 8009502:	b930      	cbnz	r0, 8009512 <__mdiff+0x2e>
 8009504:	4b3a      	ldr	r3, [pc, #232]	; (80095f0 <__mdiff+0x10c>)
 8009506:	4602      	mov	r2, r0
 8009508:	f240 2132 	movw	r1, #562	; 0x232
 800950c:	4839      	ldr	r0, [pc, #228]	; (80095f4 <__mdiff+0x110>)
 800950e:	f000 f9d5 	bl	80098bc <__assert_func>
 8009512:	2301      	movs	r3, #1
 8009514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	bfa4      	itt	ge
 800951e:	4643      	movge	r3, r8
 8009520:	46a0      	movge	r8, r4
 8009522:	4630      	mov	r0, r6
 8009524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009528:	bfa6      	itte	ge
 800952a:	461c      	movge	r4, r3
 800952c:	2500      	movge	r5, #0
 800952e:	2501      	movlt	r5, #1
 8009530:	f7ff fd3a 	bl	8008fa8 <_Balloc>
 8009534:	b920      	cbnz	r0, 8009540 <__mdiff+0x5c>
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <__mdiff+0x10c>)
 8009538:	4602      	mov	r2, r0
 800953a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800953e:	e7e5      	b.n	800950c <__mdiff+0x28>
 8009540:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009544:	6926      	ldr	r6, [r4, #16]
 8009546:	60c5      	str	r5, [r0, #12]
 8009548:	f104 0914 	add.w	r9, r4, #20
 800954c:	f108 0514 	add.w	r5, r8, #20
 8009550:	f100 0e14 	add.w	lr, r0, #20
 8009554:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800955c:	f108 0210 	add.w	r2, r8, #16
 8009560:	46f2      	mov	sl, lr
 8009562:	2100      	movs	r1, #0
 8009564:	f859 3b04 	ldr.w	r3, [r9], #4
 8009568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800956c:	fa1f f883 	uxth.w	r8, r3
 8009570:	fa11 f18b 	uxtah	r1, r1, fp
 8009574:	0c1b      	lsrs	r3, r3, #16
 8009576:	eba1 0808 	sub.w	r8, r1, r8
 800957a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800957e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009582:	fa1f f888 	uxth.w	r8, r8
 8009586:	1419      	asrs	r1, r3, #16
 8009588:	454e      	cmp	r6, r9
 800958a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800958e:	f84a 3b04 	str.w	r3, [sl], #4
 8009592:	d8e7      	bhi.n	8009564 <__mdiff+0x80>
 8009594:	1b33      	subs	r3, r6, r4
 8009596:	3b15      	subs	r3, #21
 8009598:	f023 0303 	bic.w	r3, r3, #3
 800959c:	3304      	adds	r3, #4
 800959e:	3415      	adds	r4, #21
 80095a0:	42a6      	cmp	r6, r4
 80095a2:	bf38      	it	cc
 80095a4:	2304      	movcc	r3, #4
 80095a6:	441d      	add	r5, r3
 80095a8:	4473      	add	r3, lr
 80095aa:	469e      	mov	lr, r3
 80095ac:	462e      	mov	r6, r5
 80095ae:	4566      	cmp	r6, ip
 80095b0:	d30e      	bcc.n	80095d0 <__mdiff+0xec>
 80095b2:	f10c 0203 	add.w	r2, ip, #3
 80095b6:	1b52      	subs	r2, r2, r5
 80095b8:	f022 0203 	bic.w	r2, r2, #3
 80095bc:	3d03      	subs	r5, #3
 80095be:	45ac      	cmp	ip, r5
 80095c0:	bf38      	it	cc
 80095c2:	2200      	movcc	r2, #0
 80095c4:	441a      	add	r2, r3
 80095c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ca:	b17b      	cbz	r3, 80095ec <__mdiff+0x108>
 80095cc:	6107      	str	r7, [r0, #16]
 80095ce:	e7a3      	b.n	8009518 <__mdiff+0x34>
 80095d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80095d4:	fa11 f288 	uxtah	r2, r1, r8
 80095d8:	1414      	asrs	r4, r2, #16
 80095da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095de:	b292      	uxth	r2, r2
 80095e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095e4:	f84e 2b04 	str.w	r2, [lr], #4
 80095e8:	1421      	asrs	r1, r4, #16
 80095ea:	e7e0      	b.n	80095ae <__mdiff+0xca>
 80095ec:	3f01      	subs	r7, #1
 80095ee:	e7ea      	b.n	80095c6 <__mdiff+0xe2>
 80095f0:	0800a51f 	.word	0x0800a51f
 80095f4:	0800a530 	.word	0x0800a530

080095f8 <__d2b>:
 80095f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	4689      	mov	r9, r1
 80095fe:	2101      	movs	r1, #1
 8009600:	ec57 6b10 	vmov	r6, r7, d0
 8009604:	4690      	mov	r8, r2
 8009606:	f7ff fccf 	bl	8008fa8 <_Balloc>
 800960a:	4604      	mov	r4, r0
 800960c:	b930      	cbnz	r0, 800961c <__d2b+0x24>
 800960e:	4602      	mov	r2, r0
 8009610:	4b25      	ldr	r3, [pc, #148]	; (80096a8 <__d2b+0xb0>)
 8009612:	4826      	ldr	r0, [pc, #152]	; (80096ac <__d2b+0xb4>)
 8009614:	f240 310a 	movw	r1, #778	; 0x30a
 8009618:	f000 f950 	bl	80098bc <__assert_func>
 800961c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009624:	bb35      	cbnz	r5, 8009674 <__d2b+0x7c>
 8009626:	2e00      	cmp	r6, #0
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	d028      	beq.n	800967e <__d2b+0x86>
 800962c:	4668      	mov	r0, sp
 800962e:	9600      	str	r6, [sp, #0]
 8009630:	f7ff fd82 	bl	8009138 <__lo0bits>
 8009634:	9900      	ldr	r1, [sp, #0]
 8009636:	b300      	cbz	r0, 800967a <__d2b+0x82>
 8009638:	9a01      	ldr	r2, [sp, #4]
 800963a:	f1c0 0320 	rsb	r3, r0, #32
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	430b      	orrs	r3, r1
 8009644:	40c2      	lsrs	r2, r0
 8009646:	6163      	str	r3, [r4, #20]
 8009648:	9201      	str	r2, [sp, #4]
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	61a3      	str	r3, [r4, #24]
 800964e:	2b00      	cmp	r3, #0
 8009650:	bf14      	ite	ne
 8009652:	2202      	movne	r2, #2
 8009654:	2201      	moveq	r2, #1
 8009656:	6122      	str	r2, [r4, #16]
 8009658:	b1d5      	cbz	r5, 8009690 <__d2b+0x98>
 800965a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800965e:	4405      	add	r5, r0
 8009660:	f8c9 5000 	str.w	r5, [r9]
 8009664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009668:	f8c8 0000 	str.w	r0, [r8]
 800966c:	4620      	mov	r0, r4
 800966e:	b003      	add	sp, #12
 8009670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009678:	e7d5      	b.n	8009626 <__d2b+0x2e>
 800967a:	6161      	str	r1, [r4, #20]
 800967c:	e7e5      	b.n	800964a <__d2b+0x52>
 800967e:	a801      	add	r0, sp, #4
 8009680:	f7ff fd5a 	bl	8009138 <__lo0bits>
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	6163      	str	r3, [r4, #20]
 8009688:	2201      	movs	r2, #1
 800968a:	6122      	str	r2, [r4, #16]
 800968c:	3020      	adds	r0, #32
 800968e:	e7e3      	b.n	8009658 <__d2b+0x60>
 8009690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009698:	f8c9 0000 	str.w	r0, [r9]
 800969c:	6918      	ldr	r0, [r3, #16]
 800969e:	f7ff fd2b 	bl	80090f8 <__hi0bits>
 80096a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096a6:	e7df      	b.n	8009668 <__d2b+0x70>
 80096a8:	0800a51f 	.word	0x0800a51f
 80096ac:	0800a530 	.word	0x0800a530

080096b0 <_calloc_r>:
 80096b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096b2:	fba1 2402 	umull	r2, r4, r1, r2
 80096b6:	b94c      	cbnz	r4, 80096cc <_calloc_r+0x1c>
 80096b8:	4611      	mov	r1, r2
 80096ba:	9201      	str	r2, [sp, #4]
 80096bc:	f000 f87a 	bl	80097b4 <_malloc_r>
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	4605      	mov	r5, r0
 80096c4:	b930      	cbnz	r0, 80096d4 <_calloc_r+0x24>
 80096c6:	4628      	mov	r0, r5
 80096c8:	b003      	add	sp, #12
 80096ca:	bd30      	pop	{r4, r5, pc}
 80096cc:	220c      	movs	r2, #12
 80096ce:	6002      	str	r2, [r0, #0]
 80096d0:	2500      	movs	r5, #0
 80096d2:	e7f8      	b.n	80096c6 <_calloc_r+0x16>
 80096d4:	4621      	mov	r1, r4
 80096d6:	f7fe f961 	bl	800799c <memset>
 80096da:	e7f4      	b.n	80096c6 <_calloc_r+0x16>

080096dc <_free_r>:
 80096dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096de:	2900      	cmp	r1, #0
 80096e0:	d044      	beq.n	800976c <_free_r+0x90>
 80096e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e6:	9001      	str	r0, [sp, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f1a1 0404 	sub.w	r4, r1, #4
 80096ee:	bfb8      	it	lt
 80096f0:	18e4      	addlt	r4, r4, r3
 80096f2:	f000 f925 	bl	8009940 <__malloc_lock>
 80096f6:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <_free_r+0x94>)
 80096f8:	9801      	ldr	r0, [sp, #4]
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	b933      	cbnz	r3, 800970c <_free_r+0x30>
 80096fe:	6063      	str	r3, [r4, #4]
 8009700:	6014      	str	r4, [r2, #0]
 8009702:	b003      	add	sp, #12
 8009704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009708:	f000 b920 	b.w	800994c <__malloc_unlock>
 800970c:	42a3      	cmp	r3, r4
 800970e:	d908      	bls.n	8009722 <_free_r+0x46>
 8009710:	6825      	ldr	r5, [r4, #0]
 8009712:	1961      	adds	r1, r4, r5
 8009714:	428b      	cmp	r3, r1
 8009716:	bf01      	itttt	eq
 8009718:	6819      	ldreq	r1, [r3, #0]
 800971a:	685b      	ldreq	r3, [r3, #4]
 800971c:	1949      	addeq	r1, r1, r5
 800971e:	6021      	streq	r1, [r4, #0]
 8009720:	e7ed      	b.n	80096fe <_free_r+0x22>
 8009722:	461a      	mov	r2, r3
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	b10b      	cbz	r3, 800972c <_free_r+0x50>
 8009728:	42a3      	cmp	r3, r4
 800972a:	d9fa      	bls.n	8009722 <_free_r+0x46>
 800972c:	6811      	ldr	r1, [r2, #0]
 800972e:	1855      	adds	r5, r2, r1
 8009730:	42a5      	cmp	r5, r4
 8009732:	d10b      	bne.n	800974c <_free_r+0x70>
 8009734:	6824      	ldr	r4, [r4, #0]
 8009736:	4421      	add	r1, r4
 8009738:	1854      	adds	r4, r2, r1
 800973a:	42a3      	cmp	r3, r4
 800973c:	6011      	str	r1, [r2, #0]
 800973e:	d1e0      	bne.n	8009702 <_free_r+0x26>
 8009740:	681c      	ldr	r4, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	6053      	str	r3, [r2, #4]
 8009746:	4421      	add	r1, r4
 8009748:	6011      	str	r1, [r2, #0]
 800974a:	e7da      	b.n	8009702 <_free_r+0x26>
 800974c:	d902      	bls.n	8009754 <_free_r+0x78>
 800974e:	230c      	movs	r3, #12
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	e7d6      	b.n	8009702 <_free_r+0x26>
 8009754:	6825      	ldr	r5, [r4, #0]
 8009756:	1961      	adds	r1, r4, r5
 8009758:	428b      	cmp	r3, r1
 800975a:	bf04      	itt	eq
 800975c:	6819      	ldreq	r1, [r3, #0]
 800975e:	685b      	ldreq	r3, [r3, #4]
 8009760:	6063      	str	r3, [r4, #4]
 8009762:	bf04      	itt	eq
 8009764:	1949      	addeq	r1, r1, r5
 8009766:	6021      	streq	r1, [r4, #0]
 8009768:	6054      	str	r4, [r2, #4]
 800976a:	e7ca      	b.n	8009702 <_free_r+0x26>
 800976c:	b003      	add	sp, #12
 800976e:	bd30      	pop	{r4, r5, pc}
 8009770:	200004bc 	.word	0x200004bc

08009774 <sbrk_aligned>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	4e0e      	ldr	r6, [pc, #56]	; (80097b0 <sbrk_aligned+0x3c>)
 8009778:	460c      	mov	r4, r1
 800977a:	6831      	ldr	r1, [r6, #0]
 800977c:	4605      	mov	r5, r0
 800977e:	b911      	cbnz	r1, 8009786 <sbrk_aligned+0x12>
 8009780:	f000 f88c 	bl	800989c <_sbrk_r>
 8009784:	6030      	str	r0, [r6, #0]
 8009786:	4621      	mov	r1, r4
 8009788:	4628      	mov	r0, r5
 800978a:	f000 f887 	bl	800989c <_sbrk_r>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d00a      	beq.n	80097a8 <sbrk_aligned+0x34>
 8009792:	1cc4      	adds	r4, r0, #3
 8009794:	f024 0403 	bic.w	r4, r4, #3
 8009798:	42a0      	cmp	r0, r4
 800979a:	d007      	beq.n	80097ac <sbrk_aligned+0x38>
 800979c:	1a21      	subs	r1, r4, r0
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 f87c 	bl	800989c <_sbrk_r>
 80097a4:	3001      	adds	r0, #1
 80097a6:	d101      	bne.n	80097ac <sbrk_aligned+0x38>
 80097a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80097ac:	4620      	mov	r0, r4
 80097ae:	bd70      	pop	{r4, r5, r6, pc}
 80097b0:	200004c0 	.word	0x200004c0

080097b4 <_malloc_r>:
 80097b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b8:	1ccd      	adds	r5, r1, #3
 80097ba:	f025 0503 	bic.w	r5, r5, #3
 80097be:	3508      	adds	r5, #8
 80097c0:	2d0c      	cmp	r5, #12
 80097c2:	bf38      	it	cc
 80097c4:	250c      	movcc	r5, #12
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	4607      	mov	r7, r0
 80097ca:	db01      	blt.n	80097d0 <_malloc_r+0x1c>
 80097cc:	42a9      	cmp	r1, r5
 80097ce:	d905      	bls.n	80097dc <_malloc_r+0x28>
 80097d0:	230c      	movs	r3, #12
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	2600      	movs	r6, #0
 80097d6:	4630      	mov	r0, r6
 80097d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097dc:	4e2e      	ldr	r6, [pc, #184]	; (8009898 <_malloc_r+0xe4>)
 80097de:	f000 f8af 	bl	8009940 <__malloc_lock>
 80097e2:	6833      	ldr	r3, [r6, #0]
 80097e4:	461c      	mov	r4, r3
 80097e6:	bb34      	cbnz	r4, 8009836 <_malloc_r+0x82>
 80097e8:	4629      	mov	r1, r5
 80097ea:	4638      	mov	r0, r7
 80097ec:	f7ff ffc2 	bl	8009774 <sbrk_aligned>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	4604      	mov	r4, r0
 80097f4:	d14d      	bne.n	8009892 <_malloc_r+0xde>
 80097f6:	6834      	ldr	r4, [r6, #0]
 80097f8:	4626      	mov	r6, r4
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	d140      	bne.n	8009880 <_malloc_r+0xcc>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	4631      	mov	r1, r6
 8009802:	4638      	mov	r0, r7
 8009804:	eb04 0803 	add.w	r8, r4, r3
 8009808:	f000 f848 	bl	800989c <_sbrk_r>
 800980c:	4580      	cmp	r8, r0
 800980e:	d13a      	bne.n	8009886 <_malloc_r+0xd2>
 8009810:	6821      	ldr	r1, [r4, #0]
 8009812:	3503      	adds	r5, #3
 8009814:	1a6d      	subs	r5, r5, r1
 8009816:	f025 0503 	bic.w	r5, r5, #3
 800981a:	3508      	adds	r5, #8
 800981c:	2d0c      	cmp	r5, #12
 800981e:	bf38      	it	cc
 8009820:	250c      	movcc	r5, #12
 8009822:	4629      	mov	r1, r5
 8009824:	4638      	mov	r0, r7
 8009826:	f7ff ffa5 	bl	8009774 <sbrk_aligned>
 800982a:	3001      	adds	r0, #1
 800982c:	d02b      	beq.n	8009886 <_malloc_r+0xd2>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	442b      	add	r3, r5
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	e00e      	b.n	8009854 <_malloc_r+0xa0>
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	1b52      	subs	r2, r2, r5
 800983a:	d41e      	bmi.n	800987a <_malloc_r+0xc6>
 800983c:	2a0b      	cmp	r2, #11
 800983e:	d916      	bls.n	800986e <_malloc_r+0xba>
 8009840:	1961      	adds	r1, r4, r5
 8009842:	42a3      	cmp	r3, r4
 8009844:	6025      	str	r5, [r4, #0]
 8009846:	bf18      	it	ne
 8009848:	6059      	strne	r1, [r3, #4]
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	bf08      	it	eq
 800984e:	6031      	streq	r1, [r6, #0]
 8009850:	5162      	str	r2, [r4, r5]
 8009852:	604b      	str	r3, [r1, #4]
 8009854:	4638      	mov	r0, r7
 8009856:	f104 060b 	add.w	r6, r4, #11
 800985a:	f000 f877 	bl	800994c <__malloc_unlock>
 800985e:	f026 0607 	bic.w	r6, r6, #7
 8009862:	1d23      	adds	r3, r4, #4
 8009864:	1af2      	subs	r2, r6, r3
 8009866:	d0b6      	beq.n	80097d6 <_malloc_r+0x22>
 8009868:	1b9b      	subs	r3, r3, r6
 800986a:	50a3      	str	r3, [r4, r2]
 800986c:	e7b3      	b.n	80097d6 <_malloc_r+0x22>
 800986e:	6862      	ldr	r2, [r4, #4]
 8009870:	42a3      	cmp	r3, r4
 8009872:	bf0c      	ite	eq
 8009874:	6032      	streq	r2, [r6, #0]
 8009876:	605a      	strne	r2, [r3, #4]
 8009878:	e7ec      	b.n	8009854 <_malloc_r+0xa0>
 800987a:	4623      	mov	r3, r4
 800987c:	6864      	ldr	r4, [r4, #4]
 800987e:	e7b2      	b.n	80097e6 <_malloc_r+0x32>
 8009880:	4634      	mov	r4, r6
 8009882:	6876      	ldr	r6, [r6, #4]
 8009884:	e7b9      	b.n	80097fa <_malloc_r+0x46>
 8009886:	230c      	movs	r3, #12
 8009888:	603b      	str	r3, [r7, #0]
 800988a:	4638      	mov	r0, r7
 800988c:	f000 f85e 	bl	800994c <__malloc_unlock>
 8009890:	e7a1      	b.n	80097d6 <_malloc_r+0x22>
 8009892:	6025      	str	r5, [r4, #0]
 8009894:	e7de      	b.n	8009854 <_malloc_r+0xa0>
 8009896:	bf00      	nop
 8009898:	200004bc 	.word	0x200004bc

0800989c <_sbrk_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d06      	ldr	r5, [pc, #24]	; (80098b8 <_sbrk_r+0x1c>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7f8 fa24 	bl	8001cf4 <_sbrk>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_sbrk_r+0x1a>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_sbrk_r+0x1a>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	200004c4 	.word	0x200004c4

080098bc <__assert_func>:
 80098bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098be:	4614      	mov	r4, r2
 80098c0:	461a      	mov	r2, r3
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <__assert_func+0x2c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4605      	mov	r5, r0
 80098c8:	68d8      	ldr	r0, [r3, #12]
 80098ca:	b14c      	cbz	r4, 80098e0 <__assert_func+0x24>
 80098cc:	4b07      	ldr	r3, [pc, #28]	; (80098ec <__assert_func+0x30>)
 80098ce:	9100      	str	r1, [sp, #0]
 80098d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098d4:	4906      	ldr	r1, [pc, #24]	; (80098f0 <__assert_func+0x34>)
 80098d6:	462b      	mov	r3, r5
 80098d8:	f000 f80e 	bl	80098f8 <fiprintf>
 80098dc:	f000 fa64 	bl	8009da8 <abort>
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <__assert_func+0x38>)
 80098e2:	461c      	mov	r4, r3
 80098e4:	e7f3      	b.n	80098ce <__assert_func+0x12>
 80098e6:	bf00      	nop
 80098e8:	20000010 	.word	0x20000010
 80098ec:	0800a68c 	.word	0x0800a68c
 80098f0:	0800a699 	.word	0x0800a699
 80098f4:	0800a6c7 	.word	0x0800a6c7

080098f8 <fiprintf>:
 80098f8:	b40e      	push	{r1, r2, r3}
 80098fa:	b503      	push	{r0, r1, lr}
 80098fc:	4601      	mov	r1, r0
 80098fe:	ab03      	add	r3, sp, #12
 8009900:	4805      	ldr	r0, [pc, #20]	; (8009918 <fiprintf+0x20>)
 8009902:	f853 2b04 	ldr.w	r2, [r3], #4
 8009906:	6800      	ldr	r0, [r0, #0]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	f000 f84f 	bl	80099ac <_vfiprintf_r>
 800990e:	b002      	add	sp, #8
 8009910:	f85d eb04 	ldr.w	lr, [sp], #4
 8009914:	b003      	add	sp, #12
 8009916:	4770      	bx	lr
 8009918:	20000010 	.word	0x20000010

0800991c <__ascii_mbtowc>:
 800991c:	b082      	sub	sp, #8
 800991e:	b901      	cbnz	r1, 8009922 <__ascii_mbtowc+0x6>
 8009920:	a901      	add	r1, sp, #4
 8009922:	b142      	cbz	r2, 8009936 <__ascii_mbtowc+0x1a>
 8009924:	b14b      	cbz	r3, 800993a <__ascii_mbtowc+0x1e>
 8009926:	7813      	ldrb	r3, [r2, #0]
 8009928:	600b      	str	r3, [r1, #0]
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	1e10      	subs	r0, r2, #0
 800992e:	bf18      	it	ne
 8009930:	2001      	movne	r0, #1
 8009932:	b002      	add	sp, #8
 8009934:	4770      	bx	lr
 8009936:	4610      	mov	r0, r2
 8009938:	e7fb      	b.n	8009932 <__ascii_mbtowc+0x16>
 800993a:	f06f 0001 	mvn.w	r0, #1
 800993e:	e7f8      	b.n	8009932 <__ascii_mbtowc+0x16>

08009940 <__malloc_lock>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__malloc_lock+0x8>)
 8009942:	f000 bbf1 	b.w	800a128 <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	200004c8 	.word	0x200004c8

0800994c <__malloc_unlock>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__malloc_unlock+0x8>)
 800994e:	f000 bbec 	b.w	800a12a <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	200004c8 	.word	0x200004c8

08009958 <__sfputc_r>:
 8009958:	6893      	ldr	r3, [r2, #8]
 800995a:	3b01      	subs	r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	b410      	push	{r4}
 8009960:	6093      	str	r3, [r2, #8]
 8009962:	da08      	bge.n	8009976 <__sfputc_r+0x1e>
 8009964:	6994      	ldr	r4, [r2, #24]
 8009966:	42a3      	cmp	r3, r4
 8009968:	db01      	blt.n	800996e <__sfputc_r+0x16>
 800996a:	290a      	cmp	r1, #10
 800996c:	d103      	bne.n	8009976 <__sfputc_r+0x1e>
 800996e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009972:	f000 b94b 	b.w	8009c0c <__swbuf_r>
 8009976:	6813      	ldr	r3, [r2, #0]
 8009978:	1c58      	adds	r0, r3, #1
 800997a:	6010      	str	r0, [r2, #0]
 800997c:	7019      	strb	r1, [r3, #0]
 800997e:	4608      	mov	r0, r1
 8009980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009984:	4770      	bx	lr

08009986 <__sfputs_r>:
 8009986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009988:	4606      	mov	r6, r0
 800998a:	460f      	mov	r7, r1
 800998c:	4614      	mov	r4, r2
 800998e:	18d5      	adds	r5, r2, r3
 8009990:	42ac      	cmp	r4, r5
 8009992:	d101      	bne.n	8009998 <__sfputs_r+0x12>
 8009994:	2000      	movs	r0, #0
 8009996:	e007      	b.n	80099a8 <__sfputs_r+0x22>
 8009998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999c:	463a      	mov	r2, r7
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff ffda 	bl	8009958 <__sfputc_r>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d1f3      	bne.n	8009990 <__sfputs_r+0xa>
 80099a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099ac <_vfiprintf_r>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	460d      	mov	r5, r1
 80099b2:	b09d      	sub	sp, #116	; 0x74
 80099b4:	4614      	mov	r4, r2
 80099b6:	4698      	mov	r8, r3
 80099b8:	4606      	mov	r6, r0
 80099ba:	b118      	cbz	r0, 80099c4 <_vfiprintf_r+0x18>
 80099bc:	6983      	ldr	r3, [r0, #24]
 80099be:	b90b      	cbnz	r3, 80099c4 <_vfiprintf_r+0x18>
 80099c0:	f000 fb14 	bl	8009fec <__sinit>
 80099c4:	4b89      	ldr	r3, [pc, #548]	; (8009bec <_vfiprintf_r+0x240>)
 80099c6:	429d      	cmp	r5, r3
 80099c8:	d11b      	bne.n	8009a02 <_vfiprintf_r+0x56>
 80099ca:	6875      	ldr	r5, [r6, #4]
 80099cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ce:	07d9      	lsls	r1, r3, #31
 80099d0:	d405      	bmi.n	80099de <_vfiprintf_r+0x32>
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	059a      	lsls	r2, r3, #22
 80099d6:	d402      	bmi.n	80099de <_vfiprintf_r+0x32>
 80099d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099da:	f000 fba5 	bl	800a128 <__retarget_lock_acquire_recursive>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	071b      	lsls	r3, r3, #28
 80099e2:	d501      	bpl.n	80099e8 <_vfiprintf_r+0x3c>
 80099e4:	692b      	ldr	r3, [r5, #16]
 80099e6:	b9eb      	cbnz	r3, 8009a24 <_vfiprintf_r+0x78>
 80099e8:	4629      	mov	r1, r5
 80099ea:	4630      	mov	r0, r6
 80099ec:	f000 f96e 	bl	8009ccc <__swsetup_r>
 80099f0:	b1c0      	cbz	r0, 8009a24 <_vfiprintf_r+0x78>
 80099f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099f4:	07dc      	lsls	r4, r3, #31
 80099f6:	d50e      	bpl.n	8009a16 <_vfiprintf_r+0x6a>
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099fc:	b01d      	add	sp, #116	; 0x74
 80099fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a02:	4b7b      	ldr	r3, [pc, #492]	; (8009bf0 <_vfiprintf_r+0x244>)
 8009a04:	429d      	cmp	r5, r3
 8009a06:	d101      	bne.n	8009a0c <_vfiprintf_r+0x60>
 8009a08:	68b5      	ldr	r5, [r6, #8]
 8009a0a:	e7df      	b.n	80099cc <_vfiprintf_r+0x20>
 8009a0c:	4b79      	ldr	r3, [pc, #484]	; (8009bf4 <_vfiprintf_r+0x248>)
 8009a0e:	429d      	cmp	r5, r3
 8009a10:	bf08      	it	eq
 8009a12:	68f5      	ldreq	r5, [r6, #12]
 8009a14:	e7da      	b.n	80099cc <_vfiprintf_r+0x20>
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	0598      	lsls	r0, r3, #22
 8009a1a:	d4ed      	bmi.n	80099f8 <_vfiprintf_r+0x4c>
 8009a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a1e:	f000 fb84 	bl	800a12a <__retarget_lock_release_recursive>
 8009a22:	e7e9      	b.n	80099f8 <_vfiprintf_r+0x4c>
 8009a24:	2300      	movs	r3, #0
 8009a26:	9309      	str	r3, [sp, #36]	; 0x24
 8009a28:	2320      	movs	r3, #32
 8009a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a32:	2330      	movs	r3, #48	; 0x30
 8009a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bf8 <_vfiprintf_r+0x24c>
 8009a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a3c:	f04f 0901 	mov.w	r9, #1
 8009a40:	4623      	mov	r3, r4
 8009a42:	469a      	mov	sl, r3
 8009a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a48:	b10a      	cbz	r2, 8009a4e <_vfiprintf_r+0xa2>
 8009a4a:	2a25      	cmp	r2, #37	; 0x25
 8009a4c:	d1f9      	bne.n	8009a42 <_vfiprintf_r+0x96>
 8009a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a52:	d00b      	beq.n	8009a6c <_vfiprintf_r+0xc0>
 8009a54:	465b      	mov	r3, fp
 8009a56:	4622      	mov	r2, r4
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ff93 	bl	8009986 <__sfputs_r>
 8009a60:	3001      	adds	r0, #1
 8009a62:	f000 80aa 	beq.w	8009bba <_vfiprintf_r+0x20e>
 8009a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a68:	445a      	add	r2, fp
 8009a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80a2 	beq.w	8009bba <_vfiprintf_r+0x20e>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a80:	f10a 0a01 	add.w	sl, sl, #1
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	9307      	str	r3, [sp, #28]
 8009a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a8e:	4654      	mov	r4, sl
 8009a90:	2205      	movs	r2, #5
 8009a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a96:	4858      	ldr	r0, [pc, #352]	; (8009bf8 <_vfiprintf_r+0x24c>)
 8009a98:	f7f6 fbaa 	bl	80001f0 <memchr>
 8009a9c:	9a04      	ldr	r2, [sp, #16]
 8009a9e:	b9d8      	cbnz	r0, 8009ad8 <_vfiprintf_r+0x12c>
 8009aa0:	06d1      	lsls	r1, r2, #27
 8009aa2:	bf44      	itt	mi
 8009aa4:	2320      	movmi	r3, #32
 8009aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aaa:	0713      	lsls	r3, r2, #28
 8009aac:	bf44      	itt	mi
 8009aae:	232b      	movmi	r3, #43	; 0x2b
 8009ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aba:	d015      	beq.n	8009ae8 <_vfiprintf_r+0x13c>
 8009abc:	9a07      	ldr	r2, [sp, #28]
 8009abe:	4654      	mov	r4, sl
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f04f 0c0a 	mov.w	ip, #10
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009acc:	3b30      	subs	r3, #48	; 0x30
 8009ace:	2b09      	cmp	r3, #9
 8009ad0:	d94e      	bls.n	8009b70 <_vfiprintf_r+0x1c4>
 8009ad2:	b1b0      	cbz	r0, 8009b02 <_vfiprintf_r+0x156>
 8009ad4:	9207      	str	r2, [sp, #28]
 8009ad6:	e014      	b.n	8009b02 <_vfiprintf_r+0x156>
 8009ad8:	eba0 0308 	sub.w	r3, r0, r8
 8009adc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	46a2      	mov	sl, r4
 8009ae6:	e7d2      	b.n	8009a8e <_vfiprintf_r+0xe2>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	1d19      	adds	r1, r3, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	9103      	str	r1, [sp, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	bfbb      	ittet	lt
 8009af4:	425b      	neglt	r3, r3
 8009af6:	f042 0202 	orrlt.w	r2, r2, #2
 8009afa:	9307      	strge	r3, [sp, #28]
 8009afc:	9307      	strlt	r3, [sp, #28]
 8009afe:	bfb8      	it	lt
 8009b00:	9204      	strlt	r2, [sp, #16]
 8009b02:	7823      	ldrb	r3, [r4, #0]
 8009b04:	2b2e      	cmp	r3, #46	; 0x2e
 8009b06:	d10c      	bne.n	8009b22 <_vfiprintf_r+0x176>
 8009b08:	7863      	ldrb	r3, [r4, #1]
 8009b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0c:	d135      	bne.n	8009b7a <_vfiprintf_r+0x1ce>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9203      	str	r2, [sp, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b1e:	3402      	adds	r4, #2
 8009b20:	9305      	str	r3, [sp, #20]
 8009b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c08 <_vfiprintf_r+0x25c>
 8009b26:	7821      	ldrb	r1, [r4, #0]
 8009b28:	2203      	movs	r2, #3
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	f7f6 fb60 	bl	80001f0 <memchr>
 8009b30:	b140      	cbz	r0, 8009b44 <_vfiprintf_r+0x198>
 8009b32:	2340      	movs	r3, #64	; 0x40
 8009b34:	eba0 000a 	sub.w	r0, r0, sl
 8009b38:	fa03 f000 	lsl.w	r0, r3, r0
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	4303      	orrs	r3, r0
 8009b40:	3401      	adds	r4, #1
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b48:	482c      	ldr	r0, [pc, #176]	; (8009bfc <_vfiprintf_r+0x250>)
 8009b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b4e:	2206      	movs	r2, #6
 8009b50:	f7f6 fb4e 	bl	80001f0 <memchr>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d03f      	beq.n	8009bd8 <_vfiprintf_r+0x22c>
 8009b58:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <_vfiprintf_r+0x254>)
 8009b5a:	bb1b      	cbnz	r3, 8009ba4 <_vfiprintf_r+0x1f8>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	f023 0307 	bic.w	r3, r3, #7
 8009b64:	3308      	adds	r3, #8
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6a:	443b      	add	r3, r7
 8009b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6e:	e767      	b.n	8009a40 <_vfiprintf_r+0x94>
 8009b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b74:	460c      	mov	r4, r1
 8009b76:	2001      	movs	r0, #1
 8009b78:	e7a5      	b.n	8009ac6 <_vfiprintf_r+0x11a>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	3401      	adds	r4, #1
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	4619      	mov	r1, r3
 8009b82:	f04f 0c0a 	mov.w	ip, #10
 8009b86:	4620      	mov	r0, r4
 8009b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b8c:	3a30      	subs	r2, #48	; 0x30
 8009b8e:	2a09      	cmp	r2, #9
 8009b90:	d903      	bls.n	8009b9a <_vfiprintf_r+0x1ee>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0c5      	beq.n	8009b22 <_vfiprintf_r+0x176>
 8009b96:	9105      	str	r1, [sp, #20]
 8009b98:	e7c3      	b.n	8009b22 <_vfiprintf_r+0x176>
 8009b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7f0      	b.n	8009b86 <_vfiprintf_r+0x1da>
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4b16      	ldr	r3, [pc, #88]	; (8009c04 <_vfiprintf_r+0x258>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7fd ff9c 	bl	8007aec <_printf_float>
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	1c78      	adds	r0, r7, #1
 8009bb8:	d1d6      	bne.n	8009b68 <_vfiprintf_r+0x1bc>
 8009bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bbc:	07d9      	lsls	r1, r3, #31
 8009bbe:	d405      	bmi.n	8009bcc <_vfiprintf_r+0x220>
 8009bc0:	89ab      	ldrh	r3, [r5, #12]
 8009bc2:	059a      	lsls	r2, r3, #22
 8009bc4:	d402      	bmi.n	8009bcc <_vfiprintf_r+0x220>
 8009bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bc8:	f000 faaf 	bl	800a12a <__retarget_lock_release_recursive>
 8009bcc:	89ab      	ldrh	r3, [r5, #12]
 8009bce:	065b      	lsls	r3, r3, #25
 8009bd0:	f53f af12 	bmi.w	80099f8 <_vfiprintf_r+0x4c>
 8009bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd6:	e711      	b.n	80099fc <_vfiprintf_r+0x50>
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <_vfiprintf_r+0x258>)
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	4630      	mov	r0, r6
 8009be4:	f7fe fa26 	bl	8008034 <_printf_i>
 8009be8:	e7e4      	b.n	8009bb4 <_vfiprintf_r+0x208>
 8009bea:	bf00      	nop
 8009bec:	0800a804 	.word	0x0800a804
 8009bf0:	0800a824 	.word	0x0800a824
 8009bf4:	0800a7e4 	.word	0x0800a7e4
 8009bf8:	0800a6d2 	.word	0x0800a6d2
 8009bfc:	0800a6dc 	.word	0x0800a6dc
 8009c00:	08007aed 	.word	0x08007aed
 8009c04:	08009987 	.word	0x08009987
 8009c08:	0800a6d8 	.word	0x0800a6d8

08009c0c <__swbuf_r>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	460e      	mov	r6, r1
 8009c10:	4614      	mov	r4, r2
 8009c12:	4605      	mov	r5, r0
 8009c14:	b118      	cbz	r0, 8009c1e <__swbuf_r+0x12>
 8009c16:	6983      	ldr	r3, [r0, #24]
 8009c18:	b90b      	cbnz	r3, 8009c1e <__swbuf_r+0x12>
 8009c1a:	f000 f9e7 	bl	8009fec <__sinit>
 8009c1e:	4b21      	ldr	r3, [pc, #132]	; (8009ca4 <__swbuf_r+0x98>)
 8009c20:	429c      	cmp	r4, r3
 8009c22:	d12b      	bne.n	8009c7c <__swbuf_r+0x70>
 8009c24:	686c      	ldr	r4, [r5, #4]
 8009c26:	69a3      	ldr	r3, [r4, #24]
 8009c28:	60a3      	str	r3, [r4, #8]
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	071a      	lsls	r2, r3, #28
 8009c2e:	d52f      	bpl.n	8009c90 <__swbuf_r+0x84>
 8009c30:	6923      	ldr	r3, [r4, #16]
 8009c32:	b36b      	cbz	r3, 8009c90 <__swbuf_r+0x84>
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	6820      	ldr	r0, [r4, #0]
 8009c38:	1ac0      	subs	r0, r0, r3
 8009c3a:	6963      	ldr	r3, [r4, #20]
 8009c3c:	b2f6      	uxtb	r6, r6
 8009c3e:	4283      	cmp	r3, r0
 8009c40:	4637      	mov	r7, r6
 8009c42:	dc04      	bgt.n	8009c4e <__swbuf_r+0x42>
 8009c44:	4621      	mov	r1, r4
 8009c46:	4628      	mov	r0, r5
 8009c48:	f000 f93c 	bl	8009ec4 <_fflush_r>
 8009c4c:	bb30      	cbnz	r0, 8009c9c <__swbuf_r+0x90>
 8009c4e:	68a3      	ldr	r3, [r4, #8]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	60a3      	str	r3, [r4, #8]
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	6022      	str	r2, [r4, #0]
 8009c5a:	701e      	strb	r6, [r3, #0]
 8009c5c:	6963      	ldr	r3, [r4, #20]
 8009c5e:	3001      	adds	r0, #1
 8009c60:	4283      	cmp	r3, r0
 8009c62:	d004      	beq.n	8009c6e <__swbuf_r+0x62>
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	07db      	lsls	r3, r3, #31
 8009c68:	d506      	bpl.n	8009c78 <__swbuf_r+0x6c>
 8009c6a:	2e0a      	cmp	r6, #10
 8009c6c:	d104      	bne.n	8009c78 <__swbuf_r+0x6c>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4628      	mov	r0, r5
 8009c72:	f000 f927 	bl	8009ec4 <_fflush_r>
 8009c76:	b988      	cbnz	r0, 8009c9c <__swbuf_r+0x90>
 8009c78:	4638      	mov	r0, r7
 8009c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <__swbuf_r+0x9c>)
 8009c7e:	429c      	cmp	r4, r3
 8009c80:	d101      	bne.n	8009c86 <__swbuf_r+0x7a>
 8009c82:	68ac      	ldr	r4, [r5, #8]
 8009c84:	e7cf      	b.n	8009c26 <__swbuf_r+0x1a>
 8009c86:	4b09      	ldr	r3, [pc, #36]	; (8009cac <__swbuf_r+0xa0>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	bf08      	it	eq
 8009c8c:	68ec      	ldreq	r4, [r5, #12]
 8009c8e:	e7ca      	b.n	8009c26 <__swbuf_r+0x1a>
 8009c90:	4621      	mov	r1, r4
 8009c92:	4628      	mov	r0, r5
 8009c94:	f000 f81a 	bl	8009ccc <__swsetup_r>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d0cb      	beq.n	8009c34 <__swbuf_r+0x28>
 8009c9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ca0:	e7ea      	b.n	8009c78 <__swbuf_r+0x6c>
 8009ca2:	bf00      	nop
 8009ca4:	0800a804 	.word	0x0800a804
 8009ca8:	0800a824 	.word	0x0800a824
 8009cac:	0800a7e4 	.word	0x0800a7e4

08009cb0 <__ascii_wctomb>:
 8009cb0:	b149      	cbz	r1, 8009cc6 <__ascii_wctomb+0x16>
 8009cb2:	2aff      	cmp	r2, #255	; 0xff
 8009cb4:	bf85      	ittet	hi
 8009cb6:	238a      	movhi	r3, #138	; 0x8a
 8009cb8:	6003      	strhi	r3, [r0, #0]
 8009cba:	700a      	strbls	r2, [r1, #0]
 8009cbc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009cc0:	bf98      	it	ls
 8009cc2:	2001      	movls	r0, #1
 8009cc4:	4770      	bx	lr
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4770      	bx	lr
	...

08009ccc <__swsetup_r>:
 8009ccc:	4b32      	ldr	r3, [pc, #200]	; (8009d98 <__swsetup_r+0xcc>)
 8009cce:	b570      	push	{r4, r5, r6, lr}
 8009cd0:	681d      	ldr	r5, [r3, #0]
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	b125      	cbz	r5, 8009ce2 <__swsetup_r+0x16>
 8009cd8:	69ab      	ldr	r3, [r5, #24]
 8009cda:	b913      	cbnz	r3, 8009ce2 <__swsetup_r+0x16>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f000 f985 	bl	8009fec <__sinit>
 8009ce2:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <__swsetup_r+0xd0>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d10f      	bne.n	8009d08 <__swsetup_r+0x3c>
 8009ce8:	686c      	ldr	r4, [r5, #4]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf0:	0719      	lsls	r1, r3, #28
 8009cf2:	d42c      	bmi.n	8009d4e <__swsetup_r+0x82>
 8009cf4:	06dd      	lsls	r5, r3, #27
 8009cf6:	d411      	bmi.n	8009d1c <__swsetup_r+0x50>
 8009cf8:	2309      	movs	r3, #9
 8009cfa:	6033      	str	r3, [r6, #0]
 8009cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d06:	e03e      	b.n	8009d86 <__swsetup_r+0xba>
 8009d08:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <__swsetup_r+0xd4>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <__swsetup_r+0x46>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7eb      	b.n	8009cea <__swsetup_r+0x1e>
 8009d12:	4b24      	ldr	r3, [pc, #144]	; (8009da4 <__swsetup_r+0xd8>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7e6      	b.n	8009cea <__swsetup_r+0x1e>
 8009d1c:	0758      	lsls	r0, r3, #29
 8009d1e:	d512      	bpl.n	8009d46 <__swsetup_r+0x7a>
 8009d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d22:	b141      	cbz	r1, 8009d36 <__swsetup_r+0x6a>
 8009d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	d002      	beq.n	8009d32 <__swsetup_r+0x66>
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7ff fcd5 	bl	80096dc <_free_r>
 8009d32:	2300      	movs	r3, #0
 8009d34:	6363      	str	r3, [r4, #52]	; 0x34
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f043 0308 	orr.w	r3, r3, #8
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	b94b      	cbnz	r3, 8009d66 <__swsetup_r+0x9a>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d5c:	d003      	beq.n	8009d66 <__swsetup_r+0x9a>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 fa09 	bl	800a178 <__smakebuf_r>
 8009d66:	89a0      	ldrh	r0, [r4, #12]
 8009d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d6c:	f010 0301 	ands.w	r3, r0, #1
 8009d70:	d00a      	beq.n	8009d88 <__swsetup_r+0xbc>
 8009d72:	2300      	movs	r3, #0
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	6963      	ldr	r3, [r4, #20]
 8009d78:	425b      	negs	r3, r3
 8009d7a:	61a3      	str	r3, [r4, #24]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	b943      	cbnz	r3, 8009d92 <__swsetup_r+0xc6>
 8009d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d84:	d1ba      	bne.n	8009cfc <__swsetup_r+0x30>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	0781      	lsls	r1, r0, #30
 8009d8a:	bf58      	it	pl
 8009d8c:	6963      	ldrpl	r3, [r4, #20]
 8009d8e:	60a3      	str	r3, [r4, #8]
 8009d90:	e7f4      	b.n	8009d7c <__swsetup_r+0xb0>
 8009d92:	2000      	movs	r0, #0
 8009d94:	e7f7      	b.n	8009d86 <__swsetup_r+0xba>
 8009d96:	bf00      	nop
 8009d98:	20000010 	.word	0x20000010
 8009d9c:	0800a804 	.word	0x0800a804
 8009da0:	0800a824 	.word	0x0800a824
 8009da4:	0800a7e4 	.word	0x0800a7e4

08009da8 <abort>:
 8009da8:	b508      	push	{r3, lr}
 8009daa:	2006      	movs	r0, #6
 8009dac:	f000 fa4c 	bl	800a248 <raise>
 8009db0:	2001      	movs	r0, #1
 8009db2:	f7f7 ff27 	bl	8001c04 <_exit>
	...

08009db8 <__sflush_r>:
 8009db8:	898a      	ldrh	r2, [r1, #12]
 8009dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	0710      	lsls	r0, r2, #28
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	d458      	bmi.n	8009e78 <__sflush_r+0xc0>
 8009dc6:	684b      	ldr	r3, [r1, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dc05      	bgt.n	8009dd8 <__sflush_r+0x20>
 8009dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dc02      	bgt.n	8009dd8 <__sflush_r+0x20>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	d0f9      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009dde:	2300      	movs	r3, #0
 8009de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009de4:	682f      	ldr	r7, [r5, #0]
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	d032      	beq.n	8009e50 <__sflush_r+0x98>
 8009dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	075a      	lsls	r2, r3, #29
 8009df0:	d505      	bpl.n	8009dfe <__sflush_r+0x46>
 8009df2:	6863      	ldr	r3, [r4, #4]
 8009df4:	1ac0      	subs	r0, r0, r3
 8009df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009df8:	b10b      	cbz	r3, 8009dfe <__sflush_r+0x46>
 8009dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dfc:	1ac0      	subs	r0, r0, r3
 8009dfe:	2300      	movs	r3, #0
 8009e00:	4602      	mov	r2, r0
 8009e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b0      	blx	r6
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	d106      	bne.n	8009e1e <__sflush_r+0x66>
 8009e10:	6829      	ldr	r1, [r5, #0]
 8009e12:	291d      	cmp	r1, #29
 8009e14:	d82c      	bhi.n	8009e70 <__sflush_r+0xb8>
 8009e16:	4a2a      	ldr	r2, [pc, #168]	; (8009ec0 <__sflush_r+0x108>)
 8009e18:	40ca      	lsrs	r2, r1
 8009e1a:	07d6      	lsls	r6, r2, #31
 8009e1c:	d528      	bpl.n	8009e70 <__sflush_r+0xb8>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	6062      	str	r2, [r4, #4]
 8009e22:	04d9      	lsls	r1, r3, #19
 8009e24:	6922      	ldr	r2, [r4, #16]
 8009e26:	6022      	str	r2, [r4, #0]
 8009e28:	d504      	bpl.n	8009e34 <__sflush_r+0x7c>
 8009e2a:	1c42      	adds	r2, r0, #1
 8009e2c:	d101      	bne.n	8009e32 <__sflush_r+0x7a>
 8009e2e:	682b      	ldr	r3, [r5, #0]
 8009e30:	b903      	cbnz	r3, 8009e34 <__sflush_r+0x7c>
 8009e32:	6560      	str	r0, [r4, #84]	; 0x54
 8009e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e36:	602f      	str	r7, [r5, #0]
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d0ca      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e40:	4299      	cmp	r1, r3
 8009e42:	d002      	beq.n	8009e4a <__sflush_r+0x92>
 8009e44:	4628      	mov	r0, r5
 8009e46:	f7ff fc49 	bl	80096dc <_free_r>
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e4e:	e7c1      	b.n	8009dd4 <__sflush_r+0x1c>
 8009e50:	6a21      	ldr	r1, [r4, #32]
 8009e52:	2301      	movs	r3, #1
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b0      	blx	r6
 8009e58:	1c41      	adds	r1, r0, #1
 8009e5a:	d1c7      	bne.n	8009dec <__sflush_r+0x34>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0c4      	beq.n	8009dec <__sflush_r+0x34>
 8009e62:	2b1d      	cmp	r3, #29
 8009e64:	d001      	beq.n	8009e6a <__sflush_r+0xb2>
 8009e66:	2b16      	cmp	r3, #22
 8009e68:	d101      	bne.n	8009e6e <__sflush_r+0xb6>
 8009e6a:	602f      	str	r7, [r5, #0]
 8009e6c:	e7b1      	b.n	8009dd2 <__sflush_r+0x1a>
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	e7ad      	b.n	8009dd4 <__sflush_r+0x1c>
 8009e78:	690f      	ldr	r7, [r1, #16]
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	d0a9      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009e7e:	0793      	lsls	r3, r2, #30
 8009e80:	680e      	ldr	r6, [r1, #0]
 8009e82:	bf08      	it	eq
 8009e84:	694b      	ldreq	r3, [r1, #20]
 8009e86:	600f      	str	r7, [r1, #0]
 8009e88:	bf18      	it	ne
 8009e8a:	2300      	movne	r3, #0
 8009e8c:	eba6 0807 	sub.w	r8, r6, r7
 8009e90:	608b      	str	r3, [r1, #8]
 8009e92:	f1b8 0f00 	cmp.w	r8, #0
 8009e96:	dd9c      	ble.n	8009dd2 <__sflush_r+0x1a>
 8009e98:	6a21      	ldr	r1, [r4, #32]
 8009e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e9c:	4643      	mov	r3, r8
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b0      	blx	r6
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	dc06      	bgt.n	8009eb6 <__sflush_r+0xfe>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eb4:	e78e      	b.n	8009dd4 <__sflush_r+0x1c>
 8009eb6:	4407      	add	r7, r0
 8009eb8:	eba8 0800 	sub.w	r8, r8, r0
 8009ebc:	e7e9      	b.n	8009e92 <__sflush_r+0xda>
 8009ebe:	bf00      	nop
 8009ec0:	20400001 	.word	0x20400001

08009ec4 <_fflush_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	4605      	mov	r5, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	b913      	cbnz	r3, 8009ed4 <_fflush_r+0x10>
 8009ece:	2500      	movs	r5, #0
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	b118      	cbz	r0, 8009ede <_fflush_r+0x1a>
 8009ed6:	6983      	ldr	r3, [r0, #24]
 8009ed8:	b90b      	cbnz	r3, 8009ede <_fflush_r+0x1a>
 8009eda:	f000 f887 	bl	8009fec <__sinit>
 8009ede:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <_fflush_r+0x6c>)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	d11b      	bne.n	8009f1c <_fflush_r+0x58>
 8009ee4:	686c      	ldr	r4, [r5, #4]
 8009ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0ef      	beq.n	8009ece <_fflush_r+0xa>
 8009eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ef0:	07d0      	lsls	r0, r2, #31
 8009ef2:	d404      	bmi.n	8009efe <_fflush_r+0x3a>
 8009ef4:	0599      	lsls	r1, r3, #22
 8009ef6:	d402      	bmi.n	8009efe <_fflush_r+0x3a>
 8009ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efa:	f000 f915 	bl	800a128 <__retarget_lock_acquire_recursive>
 8009efe:	4628      	mov	r0, r5
 8009f00:	4621      	mov	r1, r4
 8009f02:	f7ff ff59 	bl	8009db8 <__sflush_r>
 8009f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f08:	07da      	lsls	r2, r3, #31
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	d4e0      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	059b      	lsls	r3, r3, #22
 8009f12:	d4dd      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f16:	f000 f908 	bl	800a12a <__retarget_lock_release_recursive>
 8009f1a:	e7d9      	b.n	8009ed0 <_fflush_r+0xc>
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <_fflush_r+0x70>)
 8009f1e:	429c      	cmp	r4, r3
 8009f20:	d101      	bne.n	8009f26 <_fflush_r+0x62>
 8009f22:	68ac      	ldr	r4, [r5, #8]
 8009f24:	e7df      	b.n	8009ee6 <_fflush_r+0x22>
 8009f26:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <_fflush_r+0x74>)
 8009f28:	429c      	cmp	r4, r3
 8009f2a:	bf08      	it	eq
 8009f2c:	68ec      	ldreq	r4, [r5, #12]
 8009f2e:	e7da      	b.n	8009ee6 <_fflush_r+0x22>
 8009f30:	0800a804 	.word	0x0800a804
 8009f34:	0800a824 	.word	0x0800a824
 8009f38:	0800a7e4 	.word	0x0800a7e4

08009f3c <std>:
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	4604      	mov	r4, r0
 8009f42:	e9c0 3300 	strd	r3, r3, [r0]
 8009f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f4a:	6083      	str	r3, [r0, #8]
 8009f4c:	8181      	strh	r1, [r0, #12]
 8009f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f50:	81c2      	strh	r2, [r0, #14]
 8009f52:	6183      	str	r3, [r0, #24]
 8009f54:	4619      	mov	r1, r3
 8009f56:	2208      	movs	r2, #8
 8009f58:	305c      	adds	r0, #92	; 0x5c
 8009f5a:	f7fd fd1f 	bl	800799c <memset>
 8009f5e:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <std+0x38>)
 8009f60:	6263      	str	r3, [r4, #36]	; 0x24
 8009f62:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <std+0x3c>)
 8009f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <std+0x40>)
 8009f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <std+0x44>)
 8009f6c:	6224      	str	r4, [r4, #32]
 8009f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f70:	bd10      	pop	{r4, pc}
 8009f72:	bf00      	nop
 8009f74:	0800a281 	.word	0x0800a281
 8009f78:	0800a2a3 	.word	0x0800a2a3
 8009f7c:	0800a2db 	.word	0x0800a2db
 8009f80:	0800a2ff 	.word	0x0800a2ff

08009f84 <_cleanup_r>:
 8009f84:	4901      	ldr	r1, [pc, #4]	; (8009f8c <_cleanup_r+0x8>)
 8009f86:	f000 b8af 	b.w	800a0e8 <_fwalk_reent>
 8009f8a:	bf00      	nop
 8009f8c:	08009ec5 	.word	0x08009ec5

08009f90 <__sfmoreglue>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	2268      	movs	r2, #104	; 0x68
 8009f94:	1e4d      	subs	r5, r1, #1
 8009f96:	4355      	muls	r5, r2
 8009f98:	460e      	mov	r6, r1
 8009f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f9e:	f7ff fc09 	bl	80097b4 <_malloc_r>
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	b140      	cbz	r0, 8009fb8 <__sfmoreglue+0x28>
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8009fac:	300c      	adds	r0, #12
 8009fae:	60a0      	str	r0, [r4, #8]
 8009fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fb4:	f7fd fcf2 	bl	800799c <memset>
 8009fb8:	4620      	mov	r0, r4
 8009fba:	bd70      	pop	{r4, r5, r6, pc}

08009fbc <__sfp_lock_acquire>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__sfp_lock_acquire+0x8>)
 8009fbe:	f000 b8b3 	b.w	800a128 <__retarget_lock_acquire_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	200004c9 	.word	0x200004c9

08009fc8 <__sfp_lock_release>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <__sfp_lock_release+0x8>)
 8009fca:	f000 b8ae 	b.w	800a12a <__retarget_lock_release_recursive>
 8009fce:	bf00      	nop
 8009fd0:	200004c9 	.word	0x200004c9

08009fd4 <__sinit_lock_acquire>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	; (8009fdc <__sinit_lock_acquire+0x8>)
 8009fd6:	f000 b8a7 	b.w	800a128 <__retarget_lock_acquire_recursive>
 8009fda:	bf00      	nop
 8009fdc:	200004ca 	.word	0x200004ca

08009fe0 <__sinit_lock_release>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__sinit_lock_release+0x8>)
 8009fe2:	f000 b8a2 	b.w	800a12a <__retarget_lock_release_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	200004ca 	.word	0x200004ca

08009fec <__sinit>:
 8009fec:	b510      	push	{r4, lr}
 8009fee:	4604      	mov	r4, r0
 8009ff0:	f7ff fff0 	bl	8009fd4 <__sinit_lock_acquire>
 8009ff4:	69a3      	ldr	r3, [r4, #24]
 8009ff6:	b11b      	cbz	r3, 800a000 <__sinit+0x14>
 8009ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ffc:	f7ff bff0 	b.w	8009fe0 <__sinit_lock_release>
 800a000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a004:	6523      	str	r3, [r4, #80]	; 0x50
 800a006:	4b13      	ldr	r3, [pc, #76]	; (800a054 <__sinit+0x68>)
 800a008:	4a13      	ldr	r2, [pc, #76]	; (800a058 <__sinit+0x6c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a00e:	42a3      	cmp	r3, r4
 800a010:	bf04      	itt	eq
 800a012:	2301      	moveq	r3, #1
 800a014:	61a3      	streq	r3, [r4, #24]
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f820 	bl	800a05c <__sfp>
 800a01c:	6060      	str	r0, [r4, #4]
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f81c 	bl	800a05c <__sfp>
 800a024:	60a0      	str	r0, [r4, #8]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 f818 	bl	800a05c <__sfp>
 800a02c:	2200      	movs	r2, #0
 800a02e:	60e0      	str	r0, [r4, #12]
 800a030:	2104      	movs	r1, #4
 800a032:	6860      	ldr	r0, [r4, #4]
 800a034:	f7ff ff82 	bl	8009f3c <std>
 800a038:	68a0      	ldr	r0, [r4, #8]
 800a03a:	2201      	movs	r2, #1
 800a03c:	2109      	movs	r1, #9
 800a03e:	f7ff ff7d 	bl	8009f3c <std>
 800a042:	68e0      	ldr	r0, [r4, #12]
 800a044:	2202      	movs	r2, #2
 800a046:	2112      	movs	r1, #18
 800a048:	f7ff ff78 	bl	8009f3c <std>
 800a04c:	2301      	movs	r3, #1
 800a04e:	61a3      	str	r3, [r4, #24]
 800a050:	e7d2      	b.n	8009ff8 <__sinit+0xc>
 800a052:	bf00      	nop
 800a054:	0800a468 	.word	0x0800a468
 800a058:	08009f85 	.word	0x08009f85

0800a05c <__sfp>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	4607      	mov	r7, r0
 800a060:	f7ff ffac 	bl	8009fbc <__sfp_lock_acquire>
 800a064:	4b1e      	ldr	r3, [pc, #120]	; (800a0e0 <__sfp+0x84>)
 800a066:	681e      	ldr	r6, [r3, #0]
 800a068:	69b3      	ldr	r3, [r6, #24]
 800a06a:	b913      	cbnz	r3, 800a072 <__sfp+0x16>
 800a06c:	4630      	mov	r0, r6
 800a06e:	f7ff ffbd 	bl	8009fec <__sinit>
 800a072:	3648      	adds	r6, #72	; 0x48
 800a074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a078:	3b01      	subs	r3, #1
 800a07a:	d503      	bpl.n	800a084 <__sfp+0x28>
 800a07c:	6833      	ldr	r3, [r6, #0]
 800a07e:	b30b      	cbz	r3, 800a0c4 <__sfp+0x68>
 800a080:	6836      	ldr	r6, [r6, #0]
 800a082:	e7f7      	b.n	800a074 <__sfp+0x18>
 800a084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a088:	b9d5      	cbnz	r5, 800a0c0 <__sfp+0x64>
 800a08a:	4b16      	ldr	r3, [pc, #88]	; (800a0e4 <__sfp+0x88>)
 800a08c:	60e3      	str	r3, [r4, #12]
 800a08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a092:	6665      	str	r5, [r4, #100]	; 0x64
 800a094:	f000 f847 	bl	800a126 <__retarget_lock_init_recursive>
 800a098:	f7ff ff96 	bl	8009fc8 <__sfp_lock_release>
 800a09c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0a4:	6025      	str	r5, [r4, #0]
 800a0a6:	61a5      	str	r5, [r4, #24]
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0b0:	f7fd fc74 	bl	800799c <memset>
 800a0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0bc:	4620      	mov	r0, r4
 800a0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c0:	3468      	adds	r4, #104	; 0x68
 800a0c2:	e7d9      	b.n	800a078 <__sfp+0x1c>
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f7ff ff62 	bl	8009f90 <__sfmoreglue>
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	6030      	str	r0, [r6, #0]
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d1d5      	bne.n	800a080 <__sfp+0x24>
 800a0d4:	f7ff ff78 	bl	8009fc8 <__sfp_lock_release>
 800a0d8:	230c      	movs	r3, #12
 800a0da:	603b      	str	r3, [r7, #0]
 800a0dc:	e7ee      	b.n	800a0bc <__sfp+0x60>
 800a0de:	bf00      	nop
 800a0e0:	0800a468 	.word	0x0800a468
 800a0e4:	ffff0001 	.word	0xffff0001

0800a0e8 <_fwalk_reent>:
 800a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	4688      	mov	r8, r1
 800a0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0f4:	2700      	movs	r7, #0
 800a0f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0fa:	f1b9 0901 	subs.w	r9, r9, #1
 800a0fe:	d505      	bpl.n	800a10c <_fwalk_reent+0x24>
 800a100:	6824      	ldr	r4, [r4, #0]
 800a102:	2c00      	cmp	r4, #0
 800a104:	d1f7      	bne.n	800a0f6 <_fwalk_reent+0xe>
 800a106:	4638      	mov	r0, r7
 800a108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a10c:	89ab      	ldrh	r3, [r5, #12]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d907      	bls.n	800a122 <_fwalk_reent+0x3a>
 800a112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a116:	3301      	adds	r3, #1
 800a118:	d003      	beq.n	800a122 <_fwalk_reent+0x3a>
 800a11a:	4629      	mov	r1, r5
 800a11c:	4630      	mov	r0, r6
 800a11e:	47c0      	blx	r8
 800a120:	4307      	orrs	r7, r0
 800a122:	3568      	adds	r5, #104	; 0x68
 800a124:	e7e9      	b.n	800a0fa <_fwalk_reent+0x12>

0800a126 <__retarget_lock_init_recursive>:
 800a126:	4770      	bx	lr

0800a128 <__retarget_lock_acquire_recursive>:
 800a128:	4770      	bx	lr

0800a12a <__retarget_lock_release_recursive>:
 800a12a:	4770      	bx	lr

0800a12c <__swhatbuf_r>:
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	460e      	mov	r6, r1
 800a130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a134:	2900      	cmp	r1, #0
 800a136:	b096      	sub	sp, #88	; 0x58
 800a138:	4614      	mov	r4, r2
 800a13a:	461d      	mov	r5, r3
 800a13c:	da08      	bge.n	800a150 <__swhatbuf_r+0x24>
 800a13e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	602a      	str	r2, [r5, #0]
 800a146:	061a      	lsls	r2, r3, #24
 800a148:	d410      	bmi.n	800a16c <__swhatbuf_r+0x40>
 800a14a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14e:	e00e      	b.n	800a16e <__swhatbuf_r+0x42>
 800a150:	466a      	mov	r2, sp
 800a152:	f000 f8fb 	bl	800a34c <_fstat_r>
 800a156:	2800      	cmp	r0, #0
 800a158:	dbf1      	blt.n	800a13e <__swhatbuf_r+0x12>
 800a15a:	9a01      	ldr	r2, [sp, #4]
 800a15c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a160:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a164:	425a      	negs	r2, r3
 800a166:	415a      	adcs	r2, r3
 800a168:	602a      	str	r2, [r5, #0]
 800a16a:	e7ee      	b.n	800a14a <__swhatbuf_r+0x1e>
 800a16c:	2340      	movs	r3, #64	; 0x40
 800a16e:	2000      	movs	r0, #0
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	b016      	add	sp, #88	; 0x58
 800a174:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a178 <__smakebuf_r>:
 800a178:	898b      	ldrh	r3, [r1, #12]
 800a17a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a17c:	079d      	lsls	r5, r3, #30
 800a17e:	4606      	mov	r6, r0
 800a180:	460c      	mov	r4, r1
 800a182:	d507      	bpl.n	800a194 <__smakebuf_r+0x1c>
 800a184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	6123      	str	r3, [r4, #16]
 800a18c:	2301      	movs	r3, #1
 800a18e:	6163      	str	r3, [r4, #20]
 800a190:	b002      	add	sp, #8
 800a192:	bd70      	pop	{r4, r5, r6, pc}
 800a194:	ab01      	add	r3, sp, #4
 800a196:	466a      	mov	r2, sp
 800a198:	f7ff ffc8 	bl	800a12c <__swhatbuf_r>
 800a19c:	9900      	ldr	r1, [sp, #0]
 800a19e:	4605      	mov	r5, r0
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7ff fb07 	bl	80097b4 <_malloc_r>
 800a1a6:	b948      	cbnz	r0, 800a1bc <__smakebuf_r+0x44>
 800a1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ac:	059a      	lsls	r2, r3, #22
 800a1ae:	d4ef      	bmi.n	800a190 <__smakebuf_r+0x18>
 800a1b0:	f023 0303 	bic.w	r3, r3, #3
 800a1b4:	f043 0302 	orr.w	r3, r3, #2
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	e7e3      	b.n	800a184 <__smakebuf_r+0xc>
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <__smakebuf_r+0x7c>)
 800a1be:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	6020      	str	r0, [r4, #0]
 800a1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	9b00      	ldr	r3, [sp, #0]
 800a1cc:	6163      	str	r3, [r4, #20]
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	6120      	str	r0, [r4, #16]
 800a1d2:	b15b      	cbz	r3, 800a1ec <__smakebuf_r+0x74>
 800a1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 f8c9 	bl	800a370 <_isatty_r>
 800a1de:	b128      	cbz	r0, 800a1ec <__smakebuf_r+0x74>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	f043 0301 	orr.w	r3, r3, #1
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	89a0      	ldrh	r0, [r4, #12]
 800a1ee:	4305      	orrs	r5, r0
 800a1f0:	81a5      	strh	r5, [r4, #12]
 800a1f2:	e7cd      	b.n	800a190 <__smakebuf_r+0x18>
 800a1f4:	08009f85 	.word	0x08009f85

0800a1f8 <_raise_r>:
 800a1f8:	291f      	cmp	r1, #31
 800a1fa:	b538      	push	{r3, r4, r5, lr}
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	460d      	mov	r5, r1
 800a200:	d904      	bls.n	800a20c <_raise_r+0x14>
 800a202:	2316      	movs	r3, #22
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a20e:	b112      	cbz	r2, 800a216 <_raise_r+0x1e>
 800a210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a214:	b94b      	cbnz	r3, 800a22a <_raise_r+0x32>
 800a216:	4620      	mov	r0, r4
 800a218:	f000 f830 	bl	800a27c <_getpid_r>
 800a21c:	462a      	mov	r2, r5
 800a21e:	4601      	mov	r1, r0
 800a220:	4620      	mov	r0, r4
 800a222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a226:	f000 b817 	b.w	800a258 <_kill_r>
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d00a      	beq.n	800a244 <_raise_r+0x4c>
 800a22e:	1c59      	adds	r1, r3, #1
 800a230:	d103      	bne.n	800a23a <_raise_r+0x42>
 800a232:	2316      	movs	r3, #22
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	2001      	movs	r0, #1
 800a238:	e7e7      	b.n	800a20a <_raise_r+0x12>
 800a23a:	2400      	movs	r4, #0
 800a23c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a240:	4628      	mov	r0, r5
 800a242:	4798      	blx	r3
 800a244:	2000      	movs	r0, #0
 800a246:	e7e0      	b.n	800a20a <_raise_r+0x12>

0800a248 <raise>:
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <raise+0xc>)
 800a24a:	4601      	mov	r1, r0
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f7ff bfd3 	b.w	800a1f8 <_raise_r>
 800a252:	bf00      	nop
 800a254:	20000010 	.word	0x20000010

0800a258 <_kill_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_kill_r+0x20>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	4611      	mov	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7f7 fcbd 	bl	8001be4 <_kill>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d102      	bne.n	800a274 <_kill_r+0x1c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b103      	cbz	r3, 800a274 <_kill_r+0x1c>
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	bf00      	nop
 800a278:	200004c4 	.word	0x200004c4

0800a27c <_getpid_r>:
 800a27c:	f7f7 bcaa 	b.w	8001bd4 <_getpid>

0800a280 <__sread>:
 800a280:	b510      	push	{r4, lr}
 800a282:	460c      	mov	r4, r1
 800a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a288:	f000 f894 	bl	800a3b4 <_read_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	bfab      	itete	ge
 800a290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a292:	89a3      	ldrhlt	r3, [r4, #12]
 800a294:	181b      	addge	r3, r3, r0
 800a296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a29a:	bfac      	ite	ge
 800a29c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a29e:	81a3      	strhlt	r3, [r4, #12]
 800a2a0:	bd10      	pop	{r4, pc}

0800a2a2 <__swrite>:
 800a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	461f      	mov	r7, r3
 800a2a8:	898b      	ldrh	r3, [r1, #12]
 800a2aa:	05db      	lsls	r3, r3, #23
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	d505      	bpl.n	800a2c0 <__swrite+0x1e>
 800a2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f000 f868 	bl	800a390 <_lseek_r>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d6:	f000 b817 	b.w	800a308 <_write_r>

0800a2da <__sseek>:
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e2:	f000 f855 	bl	800a390 <_lseek_r>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	bf15      	itete	ne
 800a2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2f6:	81a3      	strheq	r3, [r4, #12]
 800a2f8:	bf18      	it	ne
 800a2fa:	81a3      	strhne	r3, [r4, #12]
 800a2fc:	bd10      	pop	{r4, pc}

0800a2fe <__sclose>:
 800a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a302:	f000 b813 	b.w	800a32c <_close_r>
	...

0800a308 <_write_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	; (800a328 <_write_r+0x20>)
 800a30c:	4604      	mov	r4, r0
 800a30e:	4608      	mov	r0, r1
 800a310:	4611      	mov	r1, r2
 800a312:	2200      	movs	r2, #0
 800a314:	602a      	str	r2, [r5, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	f7f7 fc9b 	bl	8001c52 <_write>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_write_r+0x1e>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_write_r+0x1e>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	200004c4 	.word	0x200004c4

0800a32c <_close_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	; (800a348 <_close_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f7 fca7 	bl	8001c8a <_close>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_close_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_close_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	200004c4 	.word	0x200004c4

0800a34c <_fstat_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d07      	ldr	r5, [pc, #28]	; (800a36c <_fstat_r+0x20>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	4611      	mov	r1, r2
 800a358:	602b      	str	r3, [r5, #0]
 800a35a:	f7f7 fca2 	bl	8001ca2 <_fstat>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	d102      	bne.n	800a368 <_fstat_r+0x1c>
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	b103      	cbz	r3, 800a368 <_fstat_r+0x1c>
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	bd38      	pop	{r3, r4, r5, pc}
 800a36a:	bf00      	nop
 800a36c:	200004c4 	.word	0x200004c4

0800a370 <_isatty_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d06      	ldr	r5, [pc, #24]	; (800a38c <_isatty_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	f7f7 fca1 	bl	8001cc2 <_isatty>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_isatty_r+0x1a>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_isatty_r+0x1a>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	200004c4 	.word	0x200004c4

0800a390 <_lseek_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d07      	ldr	r5, [pc, #28]	; (800a3b0 <_lseek_r+0x20>)
 800a394:	4604      	mov	r4, r0
 800a396:	4608      	mov	r0, r1
 800a398:	4611      	mov	r1, r2
 800a39a:	2200      	movs	r2, #0
 800a39c:	602a      	str	r2, [r5, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7f7 fc9a 	bl	8001cd8 <_lseek>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d102      	bne.n	800a3ae <_lseek_r+0x1e>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	b103      	cbz	r3, 800a3ae <_lseek_r+0x1e>
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	200004c4 	.word	0x200004c4

0800a3b4 <_read_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	; (800a3d4 <_read_r+0x20>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7f7 fc28 	bl	8001c18 <_read>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_read_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_read_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	200004c4 	.word	0x200004c4

0800a3d8 <roundf>:
 800a3d8:	ee10 0a10 	vmov	r0, s0
 800a3dc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a3e0:	3a7f      	subs	r2, #127	; 0x7f
 800a3e2:	2a16      	cmp	r2, #22
 800a3e4:	dc15      	bgt.n	800a412 <roundf+0x3a>
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	da08      	bge.n	800a3fc <roundf+0x24>
 800a3ea:	3201      	adds	r2, #1
 800a3ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800a3f0:	d101      	bne.n	800a3f6 <roundf+0x1e>
 800a3f2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a3f6:	ee00 3a10 	vmov	s0, r3
 800a3fa:	4770      	bx	lr
 800a3fc:	4907      	ldr	r1, [pc, #28]	; (800a41c <roundf+0x44>)
 800a3fe:	4111      	asrs	r1, r2
 800a400:	4208      	tst	r0, r1
 800a402:	d0fa      	beq.n	800a3fa <roundf+0x22>
 800a404:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a408:	4113      	asrs	r3, r2
 800a40a:	4403      	add	r3, r0
 800a40c:	ea23 0301 	bic.w	r3, r3, r1
 800a410:	e7f1      	b.n	800a3f6 <roundf+0x1e>
 800a412:	2a80      	cmp	r2, #128	; 0x80
 800a414:	d1f1      	bne.n	800a3fa <roundf+0x22>
 800a416:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a41a:	4770      	bx	lr
 800a41c:	007fffff 	.word	0x007fffff

0800a420 <_init>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr

0800a42c <_fini>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr
