
stm-can-source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c40  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000094  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000615d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012eb  00000000  00000000  00026199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00027488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004b8  00000000  00000000  000279d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e83b  00000000  00000000  00027e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000063c0  00000000  00000000  000466cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9693  00000000  00000000  0004ca8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010611e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001420  00000000  00000000  00106170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002dbc 	.word	0x08002dbc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002dbc 	.word	0x08002dbc

080001d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t count = 0;
uint8_t can_status = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	can_status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001dc:	4b09      	ldr	r3, [pc, #36]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80001de:	4a0a      	ldr	r2, [pc, #40]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 fd71 	bl	8000cca <HAL_CAN_GetRxMessage>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80001ee:	701a      	strb	r2, [r3, #0]
	count++;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80001fa:	701a      	strb	r2, [r3, #0]


}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000090 	.word	0x20000090
 8000208:	20000068 	.word	0x20000068
 800020c:	20000099 	.word	0x20000099
 8000210:	20000098 	.word	0x20000098

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 f9f4 	bl	8000604 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f83a 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f8ce 	bl	80003c0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000224:	f000 f87a 	bl	800031c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000228:	4816      	ldr	r0, [pc, #88]	; (8000284 <main+0x70>)
 800022a:	f000 fc3a 	bl	8000aa2 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800022e:	2102      	movs	r1, #2
 8000230:	4814      	ldr	r0, [pc, #80]	; (8000284 <main+0x70>)
 8000232:	f000 fe6c 	bl	8000f0e <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 0x1;
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <main+0x74>)
 8000238:	2201      	movs	r2, #1
 800023a:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <main+0x74>)
 800023e:	2200      	movs	r2, #0
 8000240:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0x74>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <main+0x74>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <main+0x74>)
 8000250:	f240 1203 	movw	r2, #259	; 0x103
 8000254:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x74>)
 8000258:	2200      	movs	r2, #0
 800025a:	751a      	strb	r2, [r3, #20]


  TxData[0] = 0xf3;
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <main+0x78>)
 800025e:	22f3      	movs	r2, #243	; 0xf3
 8000260:	701a      	strb	r2, [r3, #0]
  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <main+0x7c>)
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <main+0x78>)
 8000266:	4908      	ldr	r1, [pc, #32]	; (8000288 <main+0x74>)
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x70>)
 800026a:	f000 fc5e 	bl	8000b2a <HAL_CAN_AddTxMessage>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <main+0x7c>)
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <main+0x78>)
 8000272:	4905      	ldr	r1, [pc, #20]	; (8000288 <main+0x74>)
 8000274:	4803      	ldr	r0, [pc, #12]	; (8000284 <main+0x70>)
 8000276:	f000 fc58 	bl	8000b2a <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 800027a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027e:	f000 fa27 	bl	80006d0 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000282:	e7f4      	b.n	800026e <main+0x5a>
 8000284:	20000028 	.word	0x20000028
 8000288:	20000050 	.word	0x20000050
 800028c:	20000088 	.word	0x20000088
 8000290:	20000084 	.word	0x20000084

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b090      	sub	sp, #64	; 0x40
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2228      	movs	r2, #40	; 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fd82 	bl	8002dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	2310      	movs	r3, #16
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fb08 	bl	80018f0 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002e6:	f000 f883 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2302      	movs	r3, #2
 80002f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2102      	movs	r1, #2
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fb47 	bl	8002998 <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000310:	f000 f86e 	bl	80003f0 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3740      	adds	r7, #64	; 0x40
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000322:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000324:	4a25      	ldr	r2, [pc, #148]	; (80003bc <MX_CAN_Init+0xa0>)
 8000326:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <MX_CAN_Init+0x9c>)
 800032a:	2212      	movs	r2, #18
 800032c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800032e:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000334:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <MX_CAN_Init+0x9c>)
 800033e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000342:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000344:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_CAN_Init+0x9c>)
 800034c:	2200      	movs	r2, #0
 800034e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000352:	2200      	movs	r2, #0
 8000354:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000358:	2200      	movs	r2, #0
 800035a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_CAN_Init+0x9c>)
 800035e:	2200      	movs	r2, #0
 8000360:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000364:	2200      	movs	r2, #0
 8000366:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_CAN_Init+0x9c>)
 800036a:	2200      	movs	r2, #0
 800036c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800036e:	4812      	ldr	r0, [pc, #72]	; (80003b8 <MX_CAN_Init+0x9c>)
 8000370:	f000 f9d2 	bl	8000718 <HAL_CAN_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800037a:	f000 f839 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef can_filter_config;

  can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800037e:	2301      	movs	r3, #1
 8000380:	623b      	str	r3, [r7, #32]
  can_filter_config.FilterBank = 10;
 8000382:	230a      	movs	r3, #10
 8000384:	617b      	str	r3, [r7, #20]
  can_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  can_filter_config.FilterIdHigh = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
  can_filter_config.FilterIdLow = 0x0000;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
  can_filter_config.FilterMaskIdHigh = 0;			// decides which bits in id should be compared
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  can_filter_config.FilterMaskIdLow = 0x0000;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800039e:	2301      	movs	r3, #1
 80003a0:	61fb      	str	r3, [r7, #28]
  can_filter_config.SlaveStartFilterBank = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &can_filter_config);
 80003a6:	463b      	mov	r3, r7
 80003a8:	4619      	mov	r1, r3
 80003aa:	4803      	ldr	r0, [pc, #12]	; (80003b8 <MX_CAN_Init+0x9c>)
 80003ac:	f000 faaf 	bl	800090e <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	3728      	adds	r7, #40	; 0x28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40006400 	.word	0x40006400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_GPIO_Init+0x2c>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a08      	ldr	r2, [pc, #32]	; (80003ec <MX_GPIO_Init+0x2c>)
 80003cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_GPIO_Init+0x2c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a08      	ldr	r2, [pc, #32]	; (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a24      	ldr	r2, [pc, #144]	; (80004f4 <HAL_CAN_MspInit+0xb0>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d141      	bne.n	80004ea <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <HAL_CAN_MspInit+0xb4>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <HAL_CAN_MspInit+0xb4>)
 800046c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <HAL_CAN_MspInit+0xb4>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <HAL_CAN_MspInit+0xb4>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <HAL_CAN_MspInit+0xb4>)
 8000484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <HAL_CAN_MspInit+0xb4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000496:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004a8:	2309      	movs	r3, #9
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f001 f891 	bl	80015dc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2014      	movs	r0, #20
 80004c0:	f001 f855 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80004c4:	2014      	movs	r0, #20
 80004c6:	f001 f86e 	bl	80015a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2015      	movs	r0, #21
 80004d0:	f001 f84d 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80004d4:	2015      	movs	r0, #21
 80004d6:	f001 f866 	bl	80015a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	2016      	movs	r0, #22
 80004e0:	f001 f845 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80004e4:	2016      	movs	r0, #22
 80004e6:	f001 f85e 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80004ea:	bf00      	nop
 80004ec:	3728      	adds	r7, #40	; 0x28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40006400 	.word	0x40006400
 80004f8:	40021000 	.word	0x40021000

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <MemManage_Handler+0x4>

0800050e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler+0x4>

0800051a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000548:	f000 f8a2 	bl	8000690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000556:	f000 fd00 	bl	8000f5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <CAN_RX1_IRQHandler+0x10>)
 800056a:	f000 fcf6 	bl	8000f5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <CAN_SCE_IRQHandler+0x10>)
 800057e:	f000 fcec 	bl	8000f5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <SystemInit+0x20>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <SystemInit+0x20>)
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff ffea 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f002 fbc1 	bl	8002d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e2:	f7ff fe17 	bl	8000214 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f4:	08002e0c 	.word	0x08002e0c
  ldr r2, =_sbss
 80005f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005fc:	200000a0 	.word	0x200000a0

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>
	...

08000604 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_Init+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_Init+0x28>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 ff9f 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	200f      	movs	r0, #15
 800061c:	f000 f808 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000620:	f7ff feec 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40022000 	.word	0x40022000

08000630 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x54>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x58>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	fbb3 f3f1 	udiv	r3, r3, r1
 800064a:	fbb2 f3f3 	udiv	r3, r2, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f000 ffb7 	bl	80015c2 <HAL_SYSTICK_Config>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e00e      	b.n	800067c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d80a      	bhi.n	800067a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800066c:	f000 ff7f 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_InitTick+0x5c>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	e000      	b.n	800067c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000008 	.word	0x20000008
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_IncTick+0x20>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x24>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_IncTick+0x24>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000008 	.word	0x20000008
 80006b4:	2000009c 	.word	0x2000009c

080006b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <HAL_GetTick+0x14>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000009c 	.word	0x2000009c

080006d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d8:	f7ff ffee 	bl	80006b8 <HAL_GetTick>
 80006dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006e8:	d005      	beq.n	80006f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_Delay+0x44>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006f6:	bf00      	nop
 80006f8:	f7ff ffde 	bl	80006b8 <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f7      	bhi.n	80006f8 <HAL_Delay+0x28>
  {
  }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000008 	.word	0x20000008

08000718 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e0ed      	b.n	8000906 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fe84 	bl	8000444 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0201 	orr.w	r2, r2, #1
 800074a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800074c:	f7ff ffb4 	bl	80006b8 <HAL_GetTick>
 8000750:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000752:	e012      	b.n	800077a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000754:	f7ff ffb0 	bl	80006b8 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	2b0a      	cmp	r3, #10
 8000760:	d90b      	bls.n	800077a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2205      	movs	r2, #5
 8000772:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e0c5      	b.n	8000906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0e5      	beq.n	8000754 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f022 0202 	bic.w	r2, r2, #2
 8000796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000798:	f7ff ff8e 	bl	80006b8 <HAL_GetTick>
 800079c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800079e:	e012      	b.n	80007c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007a0:	f7ff ff8a 	bl	80006b8 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	2b0a      	cmp	r3, #10
 80007ac:	d90b      	bls.n	80007c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2205      	movs	r2, #5
 80007be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e09f      	b.n	8000906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1e5      	bne.n	80007a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7e1b      	ldrb	r3, [r3, #24]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d108      	bne.n	80007ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e007      	b.n	80007fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7e5b      	ldrb	r3, [r3, #25]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d108      	bne.n	8000818 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	e007      	b.n	8000828 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000826:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7e9b      	ldrb	r3, [r3, #26]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d108      	bne.n	8000842 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f042 0220 	orr.w	r2, r2, #32
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e007      	b.n	8000852 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 0220 	bic.w	r2, r2, #32
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7edb      	ldrb	r3, [r3, #27]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d108      	bne.n	800086c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f022 0210 	bic.w	r2, r2, #16
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	e007      	b.n	800087c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0210 	orr.w	r2, r2, #16
 800087a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7f1b      	ldrb	r3, [r3, #28]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d108      	bne.n	8000896 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 0208 	orr.w	r2, r2, #8
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e007      	b.n	80008a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f022 0208 	bic.w	r2, r2, #8
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7f5b      	ldrb	r3, [r3, #29]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d108      	bne.n	80008c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f042 0204 	orr.w	r2, r2, #4
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e007      	b.n	80008d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f022 0204 	bic.w	r2, r2, #4
 80008ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	431a      	orrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	431a      	orrs	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	ea42 0103 	orr.w	r1, r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	1e5a      	subs	r2, r3, #1
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2201      	movs	r2, #1
 8000900:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800090e:	b480      	push	{r7}
 8000910:	b087      	sub	sp, #28
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000924:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d003      	beq.n	8000934 <HAL_CAN_ConfigFilter+0x26>
 800092c:	7cfb      	ldrb	r3, [r7, #19]
 800092e:	2b02      	cmp	r3, #2
 8000930:	f040 80aa 	bne.w	8000a88 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800093a:	f043 0201 	orr.w	r2, r3, #1
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f003 031f 	and.w	r3, r3, #31
 800094c:	2201      	movs	r2, #1
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	43db      	mvns	r3, r3
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d123      	bne.n	80009b6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	43db      	mvns	r3, r3
 8000978:	401a      	ands	r2, r3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000990:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3248      	adds	r2, #72	; 0x48
 8000996:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009ac:	6979      	ldr	r1, [r7, #20]
 80009ae:	3348      	adds	r3, #72	; 0x48
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	440b      	add	r3, r1
 80009b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d122      	bne.n	8000a04 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	431a      	orrs	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3248      	adds	r2, #72	; 0x48
 80009e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009fa:	6979      	ldr	r1, [r7, #20]
 80009fc:	3348      	adds	r3, #72	; 0x48
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d109      	bne.n	8000a20 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a1e:	e007      	b.n	8000a30 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d109      	bne.n	8000a4c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a4a:	e007      	b.n	8000a5c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	431a      	orrs	r2, r3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d107      	bne.n	8000a74 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a7a:	f023 0201 	bic.w	r2, r3, #1
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e006      	b.n	8000a96 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
  }
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	371c      	adds	r7, #28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d12e      	bne.n	8000b14 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2202      	movs	r2, #2
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f022 0201 	bic.w	r2, r2, #1
 8000acc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ace:	f7ff fdf3 	bl	80006b8 <HAL_GetTick>
 8000ad2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ad4:	e012      	b.n	8000afc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad6:	f7ff fdef 	bl	80006b8 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b0a      	cmp	r3, #10
 8000ae2:	d90b      	bls.n	8000afc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2205      	movs	r2, #5
 8000af4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e012      	b.n	8000b22 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1e5      	bne.n	8000ad6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e006      	b.n	8000b22 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
  }
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b089      	sub	sp, #36	; 0x24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b48:	7ffb      	ldrb	r3, [r7, #31]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d003      	beq.n	8000b56 <HAL_CAN_AddTxMessage+0x2c>
 8000b4e:	7ffb      	ldrb	r3, [r7, #31]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	f040 80ad 	bne.w	8000cb0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10a      	bne.n	8000b76 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 8095 	beq.w	8000ca0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	0e1b      	lsrs	r3, r3, #24
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b80:	2201      	movs	r2, #1
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	409a      	lsls	r2, r3
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10d      	bne.n	8000bae <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	6809      	ldr	r1, [r1, #0]
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	440b      	add	r3, r1
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e00f      	b.n	8000bce <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bb8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bbe:	68f9      	ldr	r1, [r7, #12]
 8000bc0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000bc2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3318      	adds	r3, #24
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	440b      	add	r3, r1
 8000bcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3318      	adds	r3, #24
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	440b      	add	r3, r1
 8000bde:	3304      	adds	r3, #4
 8000be0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	7d1b      	ldrb	r3, [r3, #20]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d111      	bne.n	8000c0e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3318      	adds	r3, #24
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	6811      	ldr	r1, [r2, #0]
 8000bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3318      	adds	r3, #24
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	440b      	add	r3, r1
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3307      	adds	r3, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	061a      	lsls	r2, r3, #24
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3306      	adds	r3, #6
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3305      	adds	r3, #5
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	3204      	adds	r2, #4
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	4610      	mov	r0, r2
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	6811      	ldr	r1, [r2, #0]
 8000c36:	ea43 0200 	orr.w	r2, r3, r0
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	440b      	add	r3, r1
 8000c40:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3303      	adds	r3, #3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	061a      	lsls	r2, r3, #24
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3302      	adds	r3, #2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	041b      	lsls	r3, r3, #16
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	4313      	orrs	r3, r2
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	4610      	mov	r0, r2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6811      	ldr	r1, [r2, #0]
 8000c6c:	ea43 0200 	orr.w	r2, r3, r0
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	440b      	add	r3, r1
 8000c76:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000c7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3318      	adds	r3, #24
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	4413      	add	r3, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	6811      	ldr	r1, [r2, #0]
 8000c8e:	f043 0201 	orr.w	r2, r3, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3318      	adds	r3, #24
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	440b      	add	r3, r1
 8000c9a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e00e      	b.n	8000cbe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e006      	b.n	8000cbe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
  }
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b087      	sub	sp, #28
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cde:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d003      	beq.n	8000cee <HAL_CAN_GetRxMessage+0x24>
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	f040 8103 	bne.w	8000ef4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10e      	bne.n	8000d12 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d116      	bne.n	8000d30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e0f7      	b.n	8000f02 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d107      	bne.n	8000d30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e0e8      	b.n	8000f02 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	331b      	adds	r3, #27
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0204 	and.w	r2, r3, #4
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10c      	bne.n	8000d68 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	331b      	adds	r3, #27
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	4413      	add	r3, r2
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	0d5b      	lsrs	r3, r3, #21
 8000d5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	331b      	adds	r3, #27
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	4413      	add	r3, r2
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	331b      	adds	r3, #27
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	4413      	add	r3, r2
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0202 	and.w	r2, r3, #2
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	331b      	adds	r3, #27
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	4413      	add	r3, r2
 8000da2:	3304      	adds	r3, #4
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2208      	movs	r2, #8
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	e00b      	b.n	8000dce <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	331b      	adds	r3, #27
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 020f 	and.w	r2, r3, #15
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	331b      	adds	r3, #27
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	4413      	add	r3, r2
 8000dda:	3304      	adds	r3, #4
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	331b      	adds	r3, #27
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	3304      	adds	r3, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	0c1b      	lsrs	r3, r3, #16
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0a1a      	lsrs	r2, r3, #8
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	4413      	add	r3, r2
 8000e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	0c1a      	lsrs	r2, r3, #16
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3302      	adds	r3, #2
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	4413      	add	r3, r2
 8000e52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	0e1a      	lsrs	r2, r3, #24
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3304      	adds	r3, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4413      	add	r3, r2
 8000e84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	0a1a      	lsrs	r2, r3, #8
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	3305      	adds	r3, #5
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0c1a      	lsrs	r2, r3, #16
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	0e1a      	lsrs	r2, r3, #24
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d108      	bne.n	8000ee0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0220 	orr.w	r2, r2, #32
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	e007      	b.n	8000ef0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e006      	b.n	8000f02 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
  }
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d002      	beq.n	8000f2c <HAL_CAN_ActivateNotification+0x1e>
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d109      	bne.n	8000f40 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6959      	ldr	r1, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e006      	b.n	8000f4e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
  }
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b08a      	sub	sp, #40	; 0x28
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d07c      	beq.n	800109a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d023      	beq.n	8000ff2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f983 	bl	80012c8 <HAL_CAN_TxMailbox0CompleteCallback>
 8000fc2:	e016      	b.n	8000ff2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d004      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd6:	e00c      	b.n	8000ff2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fea:	e002      	b.n	8000ff2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f989 	bl	8001304 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d024      	beq.n	8001046 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001004:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f963 	bl	80012dc <HAL_CAN_TxMailbox1CompleteCallback>
 8001016:	e016      	b.n	8001046 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
 800102a:	e00c      	b.n	8001046 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
 800103e:	e002      	b.n	8001046 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f969 	bl	8001318 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d024      	beq.n	800109a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001058:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f943 	bl	80012f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800106a:	e016      	b.n	800109a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	e00c      	b.n	800109a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
 8001092:	e002      	b.n	800109a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f949 	bl	800132c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00c      	beq.n	80010be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2210      	movs	r2, #16
 80010bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2208      	movs	r2, #8
 80010d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f930 	bl	8001340 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d009      	beq.n	80010fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff f86b 	bl	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00c      	beq.n	8001122 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001118:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2210      	movs	r2, #16
 8001120:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00b      	beq.n	8001144 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2208      	movs	r2, #8
 800113c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f912 	bl	8001368 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f8f9 	bl	8001354 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00b      	beq.n	8001184 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2210      	movs	r2, #16
 800117c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f8fc 	bl	800137c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2208      	movs	r2, #8
 800119e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f8f5 	bl	8001390 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d07b      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d072      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001214:	2b00      	cmp	r3, #0
 8001216:	d043      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800121e:	2b00      	cmp	r3, #0
 8001220:	d03e      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001228:	2b60      	cmp	r3, #96	; 0x60
 800122a:	d02b      	beq.n	8001284 <HAL_CAN_IRQHandler+0x32a>
 800122c:	2b60      	cmp	r3, #96	; 0x60
 800122e:	d82e      	bhi.n	800128e <HAL_CAN_IRQHandler+0x334>
 8001230:	2b50      	cmp	r3, #80	; 0x50
 8001232:	d022      	beq.n	800127a <HAL_CAN_IRQHandler+0x320>
 8001234:	2b50      	cmp	r3, #80	; 0x50
 8001236:	d82a      	bhi.n	800128e <HAL_CAN_IRQHandler+0x334>
 8001238:	2b40      	cmp	r3, #64	; 0x40
 800123a:	d019      	beq.n	8001270 <HAL_CAN_IRQHandler+0x316>
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d826      	bhi.n	800128e <HAL_CAN_IRQHandler+0x334>
 8001240:	2b30      	cmp	r3, #48	; 0x30
 8001242:	d010      	beq.n	8001266 <HAL_CAN_IRQHandler+0x30c>
 8001244:	2b30      	cmp	r3, #48	; 0x30
 8001246:	d822      	bhi.n	800128e <HAL_CAN_IRQHandler+0x334>
 8001248:	2b10      	cmp	r3, #16
 800124a:	d002      	beq.n	8001252 <HAL_CAN_IRQHandler+0x2f8>
 800124c:	2b20      	cmp	r3, #32
 800124e:	d005      	beq.n	800125c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001250:	e01d      	b.n	800128e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800125a:	e019      	b.n	8001290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001264:	e014      	b.n	8001290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800126e:	e00f      	b.n	8001290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001278:	e00a      	b.n	8001290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001282:	e005      	b.n	8001290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800128c:	e000      	b.n	8001290 <HAL_CAN_IRQHandler+0x336>
            break;
 800128e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800129e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2204      	movs	r2, #4
 80012a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d008      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f872 	bl	80013a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff29 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff3e 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff31 	bl	800141c <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e160      	b.n	80018ae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8152 	beq.w	80018a8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0201 	and.w	r2, r3, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80ac 	beq.w	80018a8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001768:	4a59      	ldr	r2, [pc, #356]	; (80018d0 <HAL_GPIO_Init+0x2f4>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001792:	d025      	beq.n	80017e0 <HAL_GPIO_Init+0x204>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x2f8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d01f      	beq.n	80017dc <HAL_GPIO_Init+0x200>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_GPIO_Init+0x2fc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d019      	beq.n	80017d8 <HAL_GPIO_Init+0x1fc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x300>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d013      	beq.n	80017d4 <HAL_GPIO_Init+0x1f8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00d      	beq.n	80017d0 <HAL_GPIO_Init+0x1f4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x308>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1f0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x30c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_GPIO_Init+0x1ec>
 80017c4:	2306      	movs	r3, #6
 80017c6:	e00c      	b.n	80017e2 <HAL_GPIO_Init+0x206>
 80017c8:	2307      	movs	r3, #7
 80017ca:	e00a      	b.n	80017e2 <HAL_GPIO_Init+0x206>
 80017cc:	2305      	movs	r3, #5
 80017ce:	e008      	b.n	80017e2 <HAL_GPIO_Init+0x206>
 80017d0:	2304      	movs	r3, #4
 80017d2:	e006      	b.n	80017e2 <HAL_GPIO_Init+0x206>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e004      	b.n	80017e2 <HAL_GPIO_Init+0x206>
 80017d8:	2302      	movs	r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x206>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_GPIO_Init+0x206>
 80017e0:	2300      	movs	r3, #0
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	f002 0203 	and.w	r2, r2, #3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f2:	4937      	ldr	r1, [pc, #220]	; (80018d0 <HAL_GPIO_Init+0x2f4>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001800:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_GPIO_Init+0x310>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001824:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_GPIO_Init+0x310>)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_GPIO_Init+0x310>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_GPIO_Init+0x310>)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_GPIO_Init+0x310>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_GPIO_Init+0x310>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_GPIO_Init+0x310>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_GPIO_Init+0x310>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f ae97 	bne.w	80015ec <HAL_GPIO_Init+0x10>
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48001000 	.word	0x48001000
 80018e4:	48001400 	.word	0x48001400
 80018e8:	48001800 	.word	0x48001800
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001900:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001906:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	f001 b83a 	b.w	800298a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 816f 	beq.w	8001c0a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800192c:	4bb5      	ldr	r3, [pc, #724]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	d00c      	beq.n	8001952 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001938:	4bb2      	ldr	r3, [pc, #712]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d15c      	bne.n	80019fe <HAL_RCC_OscConfig+0x10e>
 8001944:	4baf      	ldr	r3, [pc, #700]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d155      	bne.n	80019fe <HAL_RCC_OscConfig+0x10e>
 8001952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001956:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001966:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0x94>
 800197e:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	e015      	b.n	80019b0 <HAL_RCC_OscConfig+0xc0>
 8001984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001988:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019ac:	4b95      	ldr	r3, [pc, #596]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80019b8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80019bc:	fa92 f2a2 	rbit	r2, r2
 80019c0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80019c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f042 0220 	orr.w	r2, r2, #32
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8111 	beq.w	8001c08 <HAL_RCC_OscConfig+0x318>
 80019e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8108 	bne.w	8001c08 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 bfc6 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12e>
 8001a10:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e036      	b.n	8001a8c <HAL_RCC_OscConfig+0x19c>
 8001a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x158>
 8001a2e:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a74      	ldr	r2, [pc, #464]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a71      	ldr	r2, [pc, #452]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e021      	b.n	8001a8c <HAL_RCC_OscConfig+0x19c>
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x184>
 8001a5a:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a69      	ldr	r2, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a66      	ldr	r2, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x19c>
 8001a74:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a62      	ldr	r2, [pc, #392]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5f      	ldr	r2, [pc, #380]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d059      	beq.n	8001b50 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fe0c 	bl	80006b8 <HAL_GetTick>
 8001aa0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa6:	f7fe fe07 	bl	80006b8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d902      	bls.n	8001abc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f000 bf67 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
 8001abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001ad0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_OscConfig+0x1fe>
 8001ae8:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x22a>
 8001aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b06:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b0a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001b22:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001b26:	fa92 f2a2 	rbit	r2, r2
 8001b2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001b2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b32:	fab2 f282 	clz	r2, r2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f042 0220 	orr.w	r2, r2, #32
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f002 021f 	and.w	r2, r2, #31
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ab      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1b6>
 8001b4e:	e05c      	b.n	8001c0a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7fe fdb2 	bl	80006b8 <HAL_GetTick>
 8001b54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5a:	f7fe fdad 	bl	80006b8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d902      	bls.n	8001b70 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f000 bf0d 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001b84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2b2>
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x2de>
 8001ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_RCC_OscConfig+0x314>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001bd6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001bda:	fa92 f2a2 	rbit	r2, r2
 8001bde:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001be2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001be6:	fab2 f282 	clz	r2, r2
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f042 0220 	orr.w	r2, r2, #32
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f002 021f 	and.w	r2, r2, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ab      	bne.n	8001b5a <HAL_RCC_OscConfig+0x26a>
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_OscConfig+0x31a>
 8001c04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 817f 	beq.w	8001f1e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c20:	4ba7      	ldr	r3, [pc, #668]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c2c:	4ba4      	ldr	r3, [pc, #656]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d173      	bne.n	8001d20 <HAL_RCC_OscConfig+0x430>
 8001c38:	4ba1      	ldr	r3, [pc, #644]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c44:	d16c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x430>
 8001c46:	2302      	movs	r3, #2
 8001c48:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001c58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_OscConfig+0x386>
 8001c70:	4b93      	ldr	r3, [pc, #588]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e013      	b.n	8001c9e <HAL_RCC_OscConfig+0x3ae>
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c8e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c9a:	4b89      	ldr	r3, [pc, #548]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ca4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001cb0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cb4:	fab2 f282 	clz	r2, r2
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f042 0220 	orr.w	r2, r2, #32
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f002 021f 	and.w	r2, r2, #31
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3f6>
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d002      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f000 be52 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	21f8      	movs	r1, #248	; 0xf8
 8001cfc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001d04:	fa91 f1a1 	rbit	r1, r1
 8001d08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001d0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d10:	fab1 f181 	clz	r1, r1
 8001d14:	b2c9      	uxtb	r1, r1
 8001d16:	408b      	lsls	r3, r1
 8001d18:	4969      	ldr	r1, [pc, #420]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e0fe      	b.n	8001f1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8088 	beq.w	8001e42 <HAL_RCC_OscConfig+0x552>
 8001d32:	2301      	movs	r3, #1
 8001d34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001d44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fcab 	bl	80006b8 <HAL_GetTick>
 8001d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d68:	f7fe fca6 	bl	80006b8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d902      	bls.n	8001d7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f000 be06 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001d90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_OscConfig+0x4be>
 8001da8:	4b45      	ldr	r3, [pc, #276]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	e013      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4e6>
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001dc6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001ddc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001de0:	fa92 f2a2 	rbit	r2, r2
 8001de4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001de8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0af      	beq.n	8001d68 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	21f8      	movs	r1, #248	; 0xf8
 8001e1e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001e26:	fa91 f1a1 	rbit	r1, r1
 8001e2a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001e2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e32:	fab1 f181 	clz	r1, r1
 8001e36:	b2c9      	uxtb	r1, r1
 8001e38:	408b      	lsls	r3, r1
 8001e3a:	4921      	ldr	r1, [pc, #132]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e06d      	b.n	8001f1e <HAL_RCC_OscConfig+0x62e>
 8001e42:	2301      	movs	r3, #1
 8001e44:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001e54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fc23 	bl	80006b8 <HAL_GetTick>
 8001e72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e78:	f7fe fc1e 	bl	80006b8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d902      	bls.n	8001e8e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f000 bd7e 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ea0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5d4>
 8001eb8:	4b01      	ldr	r3, [pc, #4]	; (8001ec0 <HAL_RCC_OscConfig+0x5d0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e016      	b.n	8001eec <HAL_RCC_OscConfig+0x5fc>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001edc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ee8:	4bbf      	ldr	r3, [pc, #764]	; (80021e8 <HAL_RCC_OscConfig+0x8f8>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2202      	movs	r2, #2
 8001eee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001ef2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ef6:	fa92 f2a2 	rbit	r2, r2
 8001efa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001efe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f002 021f 	and.w	r2, r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ac      	bne.n	8001e78 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8113 	beq.w	800215a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d07c      	beq.n	800203e <HAL_RCC_OscConfig+0x74e>
 8001f44:	2301      	movs	r3, #1
 8001f46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001f56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4ba2      	ldr	r3, [pc, #648]	; (80021ec <HAL_RCC_OscConfig+0x8fc>)
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fba3 	bl	80006b8 <HAL_GetTick>
 8001f72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f78:	f7fe fb9e 	bl	80006b8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d902      	bls.n	8001f8e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	f000 bcfe 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fae:	2202      	movs	r2, #2
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <HAL_RCC_OscConfig+0x8f8>)
 8001ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	6019      	str	r1, [r3, #0]
 8001ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002002:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f1a3 	rbit	r1, r3
 800200c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002010:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002014:	6019      	str	r1, [r3, #0]
  return result;
 8002016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d09d      	beq.n	8001f78 <HAL_RCC_OscConfig+0x688>
 800203c:	e08d      	b.n	800215a <HAL_RCC_OscConfig+0x86a>
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002060:	601a      	str	r2, [r3, #0]
  return result;
 8002062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002066:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800206a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_RCC_OscConfig+0x8fc>)
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	461a      	mov	r2, r3
 800207c:	2300      	movs	r3, #0
 800207e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7fe fb1a 	bl	80006b8 <HAL_GetTick>
 8002084:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe fb15 	bl	80006b8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d902      	bls.n	80020a0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	f000 bc75 	b.w	800298a <HAL_RCC_OscConfig+0x109a>
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020a8:	2202      	movs	r2, #2
 80020aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fa93 f2a3 	rbit	r2, r3
 80020ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020cc:	2202      	movs	r2, #2
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002106:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800210a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_RCC_OscConfig+0x8f8>)
 800210e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002118:	2102      	movs	r1, #2
 800211a:	6019      	str	r1, [r3, #0]
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f1a3 	rbit	r1, r3
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002132:	6019      	str	r1, [r3, #0]
  return result;
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d197      	bne.n	800208a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 81a5 	beq.w	80024ba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_OscConfig+0x8f8>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_OscConfig+0x8f8>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_RCC_OscConfig+0x8f8>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_RCC_OscConfig+0x8f8>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCC_OscConfig+0x900>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d121      	bne.n	8002200 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_RCC_OscConfig+0x900>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_RCC_OscConfig+0x900>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c8:	f7fe fa76 	bl	80006b8 <HAL_GetTick>
 80021cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e010      	b.n	80021f4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe fa71 	bl	80006b8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d908      	bls.n	80021f4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e3d1      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	10908120 	.word	0x10908120
 80021f0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b8d      	ldr	r3, [pc, #564]	; (800242c <HAL_RCC_OscConfig+0xb3c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0e8      	beq.n	80021d2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002204:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x92e>
 8002210:	4b87      	ldr	r3, [pc, #540]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a86      	ldr	r2, [pc, #536]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e035      	b.n	800228a <HAL_RCC_OscConfig+0x99a>
 800221e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002222:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x958>
 800222e:	4b80      	ldr	r3, [pc, #512]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a7f      	ldr	r2, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	4b7d      	ldr	r3, [pc, #500]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a7c      	ldr	r2, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	e020      	b.n	800228a <HAL_RCC_OscConfig+0x99a>
 8002248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b05      	cmp	r3, #5
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_OscConfig+0x982>
 8002258:	4b75      	ldr	r3, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4a74      	ldr	r2, [pc, #464]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a71      	ldr	r2, [pc, #452]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	e00b      	b.n	800228a <HAL_RCC_OscConfig+0x99a>
 8002272:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a6e      	ldr	r2, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6213      	str	r3, [r2, #32]
 800227e:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a6b      	ldr	r2, [pc, #428]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8081 	beq.w	800239e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe fa0c 	bl	80006b8 <HAL_GetTick>
 80022a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fa07 	bl	80006b8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e365      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
 80022be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80022c6:	2202      	movs	r2, #2
 80022c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002304:	601a      	str	r2, [r3, #0]
  return result;
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800230e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d102      	bne.n	800232a <HAL_RCC_OscConfig+0xa3a>
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	e013      	b.n	8002352 <HAL_RCC_OscConfig+0xa62>
 800232a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002332:	2202      	movs	r2, #2
 8002334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002348:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002356:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800235a:	2102      	movs	r1, #2
 800235c:	6011      	str	r1, [r2, #0]
 800235e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002362:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	fa92 f1a2 	rbit	r1, r2
 800236c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002370:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002374:	6011      	str	r1, [r2, #0]
  return result;
 8002376:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	fab2 f282 	clz	r2, r2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f002 021f 	and.w	r2, r2, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d084      	beq.n	80022a6 <HAL_RCC_OscConfig+0x9b6>
 800239c:	e083      	b.n	80024a6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7fe f98b 	bl	80006b8 <HAL_GetTick>
 80023a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7fe f986 	bl	80006b8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e2e4      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
 80023c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002406:	601a      	str	r2, [r3, #0]
  return result;
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002410:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0xb44>
 8002426:	4b02      	ldr	r3, [pc, #8]	; (8002430 <HAL_RCC_OscConfig+0xb40>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	e017      	b.n	800245c <HAL_RCC_OscConfig+0xb6c>
 800242c:	40007000 	.word	0x40007000
 8002430:	40021000 	.word	0x40021000
 8002434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002438:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800243c:	2202      	movs	r2, #2
 800243e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002444:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002452:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	4bb3      	ldr	r3, [pc, #716]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002460:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002464:	2102      	movs	r1, #2
 8002466:	6011      	str	r1, [r2, #0]
 8002468:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800246c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	fa92 f1a2 	rbit	r1, r2
 8002476:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800247a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800247e:	6011      	str	r1, [r2, #0]
  return result;
 8002480:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002484:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d180      	bne.n	80023a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024a6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ae:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a9d      	ldr	r2, [pc, #628]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 80024b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 825e 	beq.w	8002988 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024cc:	4b96      	ldr	r3, [pc, #600]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	f000 821f 	beq.w	8002918 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	f040 8170 	bne.w	80027cc <HAL_RCC_OscConfig+0xedc>
 80024ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002510:	601a      	str	r2, [r3, #0]
  return result;
 8002512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002516:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800251a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002526:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	461a      	mov	r2, r3
 800252e:	2300      	movs	r3, #0
 8002530:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe f8c1 	bl	80006b8 <HAL_GetTick>
 8002536:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	e009      	b.n	8002550 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe f8bc 	bl	80006b8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e21c      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
 8002550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002554:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002562:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fa93 f2a3 	rbit	r2, r3
 800256c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002570:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002574:	601a      	str	r2, [r3, #0]
  return result;
 8002576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800257e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d102      	bne.n	800259a <HAL_RCC_OscConfig+0xcaa>
 8002594:	4b64      	ldr	r3, [pc, #400]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	e027      	b.n	80025ea <HAL_RCC_OscConfig+0xcfa>
 800259a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80025a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80025c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f2a3 	rbit	r2, r3
 80025dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025f6:	6011      	str	r1, [r2, #0]
 80025f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	fa92 f1a2 	rbit	r1, r2
 8002606:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800260a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800260e:	6011      	str	r1, [r2, #0]
  return result;
 8002610:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002614:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	fab2 f282 	clz	r2, r2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f002 021f 	and.w	r2, r2, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d182      	bne.n	800253c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002636:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f023 020f 	bic.w	r2, r3, #15
 800263e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002642:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	4937      	ldr	r1, [pc, #220]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 800264c:	4313      	orrs	r3, r2
 800264e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a19      	ldr	r1, [r3, #32]
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	430b      	orrs	r3, r1
 8002672:	492d      	ldr	r1, [pc, #180]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002698:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800269c:	601a      	str	r2, [r3, #0]
  return result;
 800269e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026a6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fd fffb 	bl	80006b8 <HAL_GetTick>
 80026c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c6:	e009      	b.n	80026dc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fd fff6 	bl	80006b8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e156      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
 80026dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002700:	601a      	str	r2, [r3, #0]
  return result;
 8002702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002706:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800270a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0xe3c>
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <HAL_RCC_OscConfig+0xe38>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e02a      	b.n	800277c <HAL_RCC_OscConfig+0xe8c>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002730:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002734:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002756:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800275a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002764:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fa93 f2a3 	rbit	r2, r3
 800276e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002772:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4b86      	ldr	r3, [pc, #536]	; (8002994 <HAL_RCC_OscConfig+0x10a4>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002780:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002784:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002788:	6011      	str	r1, [r2, #0]
 800278a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800278e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	fa92 f1a2 	rbit	r1, r2
 8002798:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800279c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80027a0:	6011      	str	r1, [r2, #0]
  return result;
 80027a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027a6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	f042 0220 	orr.w	r2, r2, #32
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	f002 021f 	and.w	r2, r2, #31
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f202 	lsl.w	r2, r1, r2
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f43f af7f 	beq.w	80026c8 <HAL_RCC_OscConfig+0xdd8>
 80027ca:	e0dd      	b.n	8002988 <HAL_RCC_OscConfig+0x1098>
 80027cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027f0:	601a      	str	r2, [r3, #0]
  return result;
 80027f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027fa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002806:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	461a      	mov	r2, r3
 800280e:	2300      	movs	r3, #0
 8002810:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fd ff51 	bl	80006b8 <HAL_GetTick>
 8002816:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281a:	e009      	b.n	8002830 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fd ff4c 	bl	80006b8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0ac      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
 8002830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002834:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800283c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002842:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f2a3 	rbit	r2, r3
 800284c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002850:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002854:	601a      	str	r2, [r3, #0]
  return result;
 8002856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800285e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d102      	bne.n	800287a <HAL_RCC_OscConfig+0xf8a>
 8002874:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCC_OscConfig+0x10a4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e027      	b.n	80028ca <HAL_RCC_OscConfig+0xfda>
 800287a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80028a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	4b33      	ldr	r3, [pc, #204]	; (8002994 <HAL_RCC_OscConfig+0x10a4>)
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028d6:	6011      	str	r1, [r2, #0]
 80028d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	fa92 f1a2 	rbit	r1, r2
 80028e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028ea:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80028ee:	6011      	str	r1, [r2, #0]
  return result;
 80028f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028f4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	fab2 f282 	clz	r2, r2
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f042 0220 	orr.w	r2, r2, #32
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f002 021f 	and.w	r2, r2, #31
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d182      	bne.n	800281c <HAL_RCC_OscConfig+0xf2c>
 8002916:	e037      	b.n	8002988 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e02e      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_OscConfig+0x10a4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_RCC_OscConfig+0x10a4>)
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800293c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002940:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002948:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	429a      	cmp	r2, r3
 8002952:	d117      	bne.n	8002984 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002954:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002958:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800295c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002960:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002968:	429a      	cmp	r2, r3
 800296a:	d10b      	bne.n	8002984 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800296c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002978:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b09e      	sub	sp, #120	; 0x78
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e162      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b90      	ldr	r3, [pc, #576]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b8d      	ldr	r3, [pc, #564]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	498b      	ldr	r1, [pc, #556]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e14a      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	497f      	ldr	r1, [pc, #508]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80dc 	beq.w	8002bc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d13c      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xf6>
 8002a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xa6>
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	e00f      	b.n	8002a5e <HAL_RCC_ClockConfig+0xc6>
 8002a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a50:	663b      	str	r3, [r7, #96]	; 0x60
 8002a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a62:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f042 0220 	orr.w	r2, r2, #32
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f002 021f 	and.w	r2, r2, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d17b      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0f3      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d13c      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x178>
 8002a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x128>
 8002aba:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e00f      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
 8002ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002adc:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae8:	fa92 f2a2 	rbit	r2, r2
 8002aec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f042 0220 	orr.w	r2, r2, #32
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f002 021f 	and.w	r2, r2, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d13a      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b2      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
 8002b10:	2302      	movs	r3, #2
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1a0>
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e00d      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1bc>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	2302      	movs	r3, #2
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	2202      	movs	r2, #2
 8002b56:	61ba      	str	r2, [r7, #24]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	fa92 f2a2 	rbit	r2, r2
 8002b5e:	617a      	str	r2, [r7, #20]
  return result;
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	fab2 f282 	clz	r2, r2
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f042 0220 	orr.w	r2, r2, #32
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	f002 021f 	and.w	r2, r2, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e079      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	491a      	ldr	r1, [pc, #104]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7fd fd90 	bl	80006b8 <HAL_GetTick>
 8002b98:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7fd fd8c 	bl	80006b8 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e061      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_ClockConfig+0x260>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d214      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4906      	ldr	r1, [pc, #24]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e040      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2de>
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	491a      	ldr	r1, [pc, #104]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4912      	ldr	r1, [pc, #72]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c3a:	f000 f829 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_RCC_ClockConfig+0x2e8>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c48:	22f0      	movs	r2, #240	; 0xf0
 8002c4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	60fa      	str	r2, [r7, #12]
  return result;
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	fab2 f282 	clz	r2, r2
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	40d3      	lsrs	r3, r2
 8002c5e:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x2ec>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	fa21 f303 	lsr.w	r3, r1, r3
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_RCC_ClockConfig+0x2f0>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_RCC_ClockConfig+0x2f4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fcde 	bl	8000630 <HAL_InitTick>
  
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3778      	adds	r7, #120	; 0x78
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08002dd4 	.word	0x08002dd4
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b08b      	sub	sp, #44	; 0x2c
 8002c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cbe:	e03f      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cc2:	623b      	str	r3, [r7, #32]
      break;
 8002cc4:	e03f      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ccc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	fa92 f2a2 	rbit	r2, r2
 8002cd8:	607a      	str	r2, [r7, #4]
  return result;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	40d3      	lsrs	r3, r2
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	fa92 f2a2 	rbit	r2, r2
 8002cfc:	60fa      	str	r2, [r7, #12]
  return result;
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	40d3      	lsrs	r3, r2
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	e007      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	623b      	str	r3, [r7, #32]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d42:	623b      	str	r3, [r7, #32]
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	372c      	adds	r7, #44	; 0x2c
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40021000 	.word	0x40021000
 8002d58:	007a1200 	.word	0x007a1200
 8002d5c:	08002de4 	.word	0x08002de4
 8002d60:	08002df4 	.word	0x08002df4

08002d64 <__libc_init_array>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	4d0d      	ldr	r5, [pc, #52]	; (8002d9c <__libc_init_array+0x38>)
 8002d68:	4c0d      	ldr	r4, [pc, #52]	; (8002da0 <__libc_init_array+0x3c>)
 8002d6a:	1b64      	subs	r4, r4, r5
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	2600      	movs	r6, #0
 8002d70:	42a6      	cmp	r6, r4
 8002d72:	d109      	bne.n	8002d88 <__libc_init_array+0x24>
 8002d74:	4d0b      	ldr	r5, [pc, #44]	; (8002da4 <__libc_init_array+0x40>)
 8002d76:	4c0c      	ldr	r4, [pc, #48]	; (8002da8 <__libc_init_array+0x44>)
 8002d78:	f000 f820 	bl	8002dbc <_init>
 8002d7c:	1b64      	subs	r4, r4, r5
 8002d7e:	10a4      	asrs	r4, r4, #2
 8002d80:	2600      	movs	r6, #0
 8002d82:	42a6      	cmp	r6, r4
 8002d84:	d105      	bne.n	8002d92 <__libc_init_array+0x2e>
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8c:	4798      	blx	r3
 8002d8e:	3601      	adds	r6, #1
 8002d90:	e7ee      	b.n	8002d70 <__libc_init_array+0xc>
 8002d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d96:	4798      	blx	r3
 8002d98:	3601      	adds	r6, #1
 8002d9a:	e7f2      	b.n	8002d82 <__libc_init_array+0x1e>
 8002d9c:	08002e04 	.word	0x08002e04
 8002da0:	08002e04 	.word	0x08002e04
 8002da4:	08002e04 	.word	0x08002e04
 8002da8:	08002e08 	.word	0x08002e08

08002dac <memset>:
 8002dac:	4402      	add	r2, r0
 8002dae:	4603      	mov	r3, r0
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d100      	bne.n	8002db6 <memset+0xa>
 8002db4:	4770      	bx	lr
 8002db6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dba:	e7f9      	b.n	8002db0 <memset+0x4>

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
