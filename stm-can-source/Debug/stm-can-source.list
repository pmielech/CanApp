
stm-can-source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005384  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005548  08005548  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005548  08005548  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005548  08005548  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000001c0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbbf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002179  00000000  00000000  0002fbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00031d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d10  00000000  00000000  00032b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b13  00000000  00000000  00033890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ffa  00000000  00000000  000543a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0e9  00000000  00000000  0006539d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132486  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b28  00000000  00000000  001324d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005500 	.word	0x08005500

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005500 	.word	0x08005500

080001d4 <ucHeartbeat_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t ucHeartbeat_message(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	heartbeat[0] = 0;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <ucHeartbeat_message+0x1c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	701a      	strb	r2, [r3, #0]
	return HAL_CAN_AddTxMessage(&hcan, &heartbeat_msgTxHeader, heartbeat, &TxMailbox);
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <ucHeartbeat_message+0x20>)
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <ucHeartbeat_message+0x1c>)
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <ucHeartbeat_message+0x24>)
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <ucHeartbeat_message+0x28>)
 80001e6:	f002 f82c 	bl	8002242 <HAL_CAN_AddTxMessage>
 80001ea:	4603      	mov	r3, r0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	200001b4 	.word	0x200001b4
 80001f8:	2000019c 	.word	0x2000019c
 80001fc:	200000c0 	.word	0x200000c0

08000200 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4a08      	ldr	r2, [pc, #32]	; (800022c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800020c:	4293      	cmp	r3, r2
 800020e:	d109      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x24>
	  can_status += ucHeartbeat_message();
 8000210:	f7ff ffe0 	bl	80001d4 <ucHeartbeat_message>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4413      	add	r3, r2
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000222:	701a      	strb	r2, [r3, #0]
  }
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000134 	.word	0x20000134
 8000230:	200001c0 	.word	0x200001c0

08000234 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	can_status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800023e:	4a10      	ldr	r2, [pc, #64]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000240:	2100      	movs	r1, #0
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f002 f8cd 	bl	80023e2 <HAL_CAN_GetRxMessage>
 8000248:	4603      	mov	r3, r0
 800024a:	461a      	mov	r2, r3
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800024e:	701a      	strb	r2, [r3, #0]
	if(RxHeader.StdId == 0x400){
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000258:	d00c      	beq.n	8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		;
	}
	else if(RxHeader.StdId == 0x350){
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8000262:	d107      	bne.n	8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>

		HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, RxData[0]);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	2120      	movs	r1, #32
 800026c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000270:	f002 fff0 	bl	8003254 <HAL_GPIO_WritePin>


	}

}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	200001b8 	.word	0x200001b8
 8000280:	20000180 	.word	0x20000180
 8000284:	200001c0 	.word	0x200001c0

08000288 <vCan_messages_init>:

void vCan_messages_init(){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

	heartbeat_msgTxHeader.DLC = 0x00;
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <vCan_messages_init+0x3c>)
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
	heartbeat_msgTxHeader.ExtId = 0;
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <vCan_messages_init+0x3c>)
 8000294:	2200      	movs	r2, #0
 8000296:	605a      	str	r2, [r3, #4]
	heartbeat_msgTxHeader.IDE = CAN_ID_STD;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <vCan_messages_init+0x3c>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
	heartbeat_msgTxHeader.RTR = CAN_RTR_DATA;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <vCan_messages_init+0x3c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
	heartbeat_msgTxHeader.StdId = 0x400 + nodeId;
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <vCan_messages_init+0x40>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <vCan_messages_init+0x3c>)
 80002b0:	601a      	str	r2, [r3, #0]
	heartbeat_msgTxHeader.TransmitGlobalTime = DISABLE;
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <vCan_messages_init+0x3c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	751a      	strb	r2, [r3, #20]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2000019c 	.word	0x2000019c
 80002c8:	20000000 	.word	0x20000000

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d0:	f000 fbde 	bl	8000a90 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d4:	f000 f830 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d8:	f000 f9f8 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 80002dc:	f000 f9d8 	bl	8000690 <MX_DMA_Init>
  MX_CAN_Init();
 80002e0:	f000 f90e 	bl	8000500 <MX_CAN_Init>
  MX_TIM16_Init();
 80002e4:	f000 f9ac 	bl	8000640 <MX_TIM16_Init>
  MX_ADC1_Init();
 80002e8:	f000 f88c 	bl	8000404 <MX_ADC1_Init>
  MX_TIM3_Init();
 80002ec:	f000 f95a 	bl	80005a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  can_status += HAL_CAN_Start(&hcan);
 80002f0:	480e      	ldr	r0, [pc, #56]	; (800032c <main+0x60>)
 80002f2:	f001 ff62 	bl	80021ba <HAL_CAN_Start>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <main+0x64>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4413      	add	r3, r2
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <main+0x64>)
 8000304:	701a      	strb	r2, [r3, #0]
  can_status += HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000306:	2102      	movs	r1, #2
 8000308:	4808      	ldr	r0, [pc, #32]	; (800032c <main+0x60>)
 800030a:	f002 f98c 	bl	8002626 <HAL_CAN_ActivateNotification>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <main+0x64>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4413      	add	r3, r2
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <main+0x64>)
 800031c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <main+0x68>)
 8000320:	f004 fc60 	bl	8004be4 <HAL_TIM_Base_Start_IT>

  vCan_messages_init();
 8000324:	f7ff ffb0 	bl	8000288 <vCan_messages_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000328:	e7fe      	b.n	8000328 <main+0x5c>
 800032a:	bf00      	nop
 800032c:	200000c0 	.word	0x200000c0
 8000330:	200001c0 	.word	0x200001c0
 8000334:	20000134 	.word	0x20000134

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b0a6      	sub	sp, #152	; 0x98
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f005 f8d2 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2258      	movs	r2, #88	; 0x58
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f005 f8c4 	bl	80054f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	2310      	movs	r3, #16
 8000372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000384:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000396:	4618      	mov	r0, r3
 8000398:	f002 ff74 	bl	8003284 <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f9c3 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2302      	movs	r3, #2
 80003ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 ffb2 	bl	800432c <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ce:	f000 f9ad 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_ADC12
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <SystemClock_Config+0xc8>)
 80003d4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003da:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003dc:	2300      	movs	r3, #0
 80003de:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80003e0:	2300      	movs	r3, #0
 80003e2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 f986 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80003f2:	f000 f99b 	bl	800072c <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3798      	adds	r7, #152	; 0x98
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	00a00080 	.word	0x00a00080

08000404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000426:	4b35      	ldr	r3, [pc, #212]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000428:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800042c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800042e:	4b33      	ldr	r3, [pc, #204]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000434:	4b31      	ldr	r3, [pc, #196]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_ADC1_Init+0xf8>)
 800043c:	2201      	movs	r2, #1
 800043e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000442:	2201      	movs	r2, #1
 8000444:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044e:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000450:	2200      	movs	r2, #0
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000456:	2201      	movs	r2, #1
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045a:	4b28      	ldr	r3, [pc, #160]	; (80004fc <MX_ADC1_Init+0xf8>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000462:	2202      	movs	r2, #2
 8000464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000468:	2201      	movs	r2, #1
 800046a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000470:	2204      	movs	r2, #4
 8000472:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000474:	4b21      	ldr	r3, [pc, #132]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000476:	2200      	movs	r2, #0
 8000478:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800047a:	4b20      	ldr	r3, [pc, #128]	; (80004fc <MX_ADC1_Init+0xf8>)
 800047c:	2200      	movs	r2, #0
 800047e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000480:	481e      	ldr	r0, [pc, #120]	; (80004fc <MX_ADC1_Init+0xf8>)
 8000482:	f000 fb89 	bl	8000b98 <HAL_ADC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800048c:	f000 f94e 	bl	800072c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000494:	f107 031c 	add.w	r3, r7, #28
 8000498:	4619      	mov	r1, r3
 800049a:	4818      	ldr	r0, [pc, #96]	; (80004fc <MX_ADC1_Init+0xf8>)
 800049c:	f001 fb70 	bl	8001b80 <HAL_ADCEx_MultiModeConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004a6:	f000 f941 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004aa:	2310      	movs	r3, #16
 80004ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004b6:	2307      	movs	r3, #7
 80004b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	480d      	ldr	r0, [pc, #52]	; (80004fc <MX_ADC1_Init+0xf8>)
 80004c8:	f001 f86e 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004d2:	f000 f92b 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <MX_ADC1_Init+0xf8>)
 80004e4:	f001 f860 	bl	80015a8 <HAL_ADC_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80004ee:	f000 f91d 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c

08000500 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_CAN_Init+0x9c>)
 8000508:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <MX_CAN_Init+0xa0>)
 800050a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_CAN_Init+0x9c>)
 800050e:	2212      	movs	r2, #18
 8000510:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_CAN_Init+0x9c>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000518:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_CAN_Init+0x9c>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_CAN_Init+0x9c>)
 8000520:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000524:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_CAN_Init+0x9c>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_CAN_Init+0x9c>)
 800052e:	2200      	movs	r2, #0
 8000530:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_CAN_Init+0x9c>)
 8000534:	2200      	movs	r2, #0
 8000536:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_CAN_Init+0x9c>)
 800053a:	2200      	movs	r2, #0
 800053c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_CAN_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_CAN_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_CAN_Init+0x9c>)
 800054c:	2200      	movs	r2, #0
 800054e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <MX_CAN_Init+0x9c>)
 8000552:	f001 fc6d 	bl	8001e30 <HAL_CAN_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800055c:	f000 f8e6 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef can_filter_config;

  can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  can_filter_config.FilterBank = 10;
 8000564:	230a      	movs	r3, #10
 8000566:	617b      	str	r3, [r7, #20]
  can_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  can_filter_config.FilterIdHigh = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
  can_filter_config.FilterIdLow = 0x0000;
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
  can_filter_config.FilterMaskIdHigh = 0;			// decides which bits in id should be compared
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
  can_filter_config.FilterMaskIdLow = 0x0000;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  can_filter_config.SlaveStartFilterBank = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &can_filter_config);
 8000588:	463b      	mov	r3, r7
 800058a:	4619      	mov	r1, r3
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <MX_CAN_Init+0x9c>)
 800058e:	f001 fd4a 	bl	8002026 <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000c0 	.word	0x200000c0
 80005a0:	40006400 	.word	0x40006400

080005a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_TIM3_Init+0x94>)
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <MX_TIM3_Init+0x98>)
 80005c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_TIM3_Init+0x94>)
 80005ca:	2247      	movs	r2, #71	; 0x47
 80005cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_TIM3_Init+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_TIM3_Init+0x94>)
 80005d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_TIM3_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_TIM3_Init+0x94>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <MX_TIM3_Init+0x94>)
 80005ea:	f004 faa3 	bl	8004b34 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80005f4:	f000 f89a 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_TIM3_Init+0x94>)
 8000606:	f004 fc7c 	bl	8004f02 <HAL_TIM_ConfigClockSource>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 f88c 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000614:	2320      	movs	r3, #32
 8000616:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_TIM3_Init+0x94>)
 8000622:	f004 fe97 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800062c:	f000 f87e 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000e8 	.word	0x200000e8
 800063c:	40000400 	.word	0x40000400

08000640 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_TIM16_Init+0x48>)
 8000646:	4a11      	ldr	r2, [pc, #68]	; (800068c <MX_TIM16_Init+0x4c>)
 8000648:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6000-1;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_TIM16_Init+0x48>)
 800064c:	f241 726f 	movw	r2, #5999	; 0x176f
 8000650:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_TIM16_Init+0x48>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6000-1;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_TIM16_Init+0x48>)
 800065a:	f241 726f 	movw	r2, #5999	; 0x176f
 800065e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_TIM16_Init+0x48>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_TIM16_Init+0x48>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_TIM16_Init+0x48>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_TIM16_Init+0x48>)
 8000674:	f004 fa5e 	bl	8004b34 <HAL_TIM_Base_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800067e:	f000 f855 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000134 	.word	0x20000134
 800068c:	40014400 	.word	0x40014400

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_DMA_Init+0x38>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <MX_DMA_Init+0x38>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_DMA_Init+0x38>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	200b      	movs	r0, #11
 80006b4:	f002 fae7 	bl	8002c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006b8:	200b      	movs	r0, #11
 80006ba:	f002 fb00 	bl	8002cbe <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_GPIO_Init+0x5c>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <MX_GPIO_Init+0x5c>)
 80006e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ea:	6153      	str	r3, [r2, #20]
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_GPIO_Init+0x5c>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2120      	movs	r1, #32
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f002 fda8 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTERNAL_LED_Pin */
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 8000704:	2320      	movs	r3, #32
 8000706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f002 fc10 	bl	8002f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x44>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_MspInit+0x44>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x44>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x44>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x44>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000790:	d13b      	bne.n	800080a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <HAL_ADC_MspInit+0x94>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <HAL_ADC_MspInit+0x94>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <HAL_ADC_MspInit+0x94>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <HAL_ADC_MspInit+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007d4:	2220      	movs	r2, #32
 80007d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007e0:	f002 fa87 	bl	8002cf2 <HAL_DMA_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80007ea:	f7ff ff9f 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_ADC_MspInit+0x98>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2012      	movs	r0, #18
 8000800:	f002 fa41 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000804:	2012      	movs	r0, #18
 8000806:	f002 fa5a 	bl	8002cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	2000007c 	.word	0x2000007c
 800081c:	40020008 	.word	0x40020008

08000820 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <HAL_CAN_MspInit+0xb0>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d141      	bne.n	80008c6 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <HAL_CAN_MspInit+0xb4>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a23      	ldr	r2, [pc, #140]	; (80008d4 <HAL_CAN_MspInit+0xb4>)
 8000848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <HAL_CAN_MspInit+0xb4>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <HAL_CAN_MspInit+0xb4>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <HAL_CAN_MspInit+0xb4>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <HAL_CAN_MspInit+0xb4>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000872:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000884:	2309      	movs	r3, #9
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f002 fb55 	bl	8002f40 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2014      	movs	r0, #20
 800089c:	f002 f9f3 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80008a0:	2014      	movs	r0, #20
 80008a2:	f002 fa0c 	bl	8002cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2015      	movs	r0, #21
 80008ac:	f002 f9eb 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80008b0:	2015      	movs	r0, #21
 80008b2:	f002 fa04 	bl	8002cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2016      	movs	r0, #22
 80008bc:	f002 f9e3 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80008c0:	2016      	movs	r0, #22
 80008c2:	f002 f9fc 	bl	8002cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40006400 	.word	0x40006400
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_TIM_Base_MspInit+0x68>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10c      	bne.n	8000904 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_TIM_Base_MspInit+0x6c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <HAL_TIM_Base_MspInit+0x6c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_TIM_Base_MspInit+0x6c>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000902:	e018      	b.n	8000936 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_TIM_Base_MspInit+0x70>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d113      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_TIM_Base_MspInit+0x6c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <HAL_TIM_Base_MspInit+0x6c>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_TIM_Base_MspInit+0x6c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2019      	movs	r0, #25
 800092c:	f002 f9ab 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000930:	2019      	movs	r0, #25
 8000932:	f002 f9c4 	bl	8002cbe <HAL_NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40000400 	.word	0x40000400
 8000944:	40021000 	.word	0x40021000
 8000948:	40014400 	.word	0x40014400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f8c0 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <DMA1_Channel1_IRQHandler+0x10>)
 80009a6:	f002 f9eb 	bl	8002d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000007c 	.word	0x2000007c

080009b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <ADC1_2_IRQHandler+0x10>)
 80009ba:	f000 fae7 	bl	8000f8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000002c 	.word	0x2000002c

080009c8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80009ce:	f001 fe50 	bl	8002672 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000c0 	.word	0x200000c0

080009dc <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <CAN_RX1_IRQHandler+0x10>)
 80009e2:	f001 fe46 	bl	8002672 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000c0 	.word	0x200000c0

080009f0 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <CAN_SCE_IRQHandler+0x10>)
 80009f6:	f001 fe3c 	bl	8002672 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000c0 	.word	0x200000c0

08000a04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a0a:	f004 f95b 	bl	8004cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000134 	.word	0x20000134

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff ffea 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f004 fd1d 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6e:	f7ff fc2d 	bl	80002cc <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a80:	08005550 	.word	0x08005550
  ldr r2, =_sbss
 8000a84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a88:	200001d0 	.word	0x200001d0

08000a8c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC3_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f002 f8e5 	bl	8002c70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe44 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 f8fd 	bl	8002cda <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af8:	f002 f8c5 	bl	8002c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000004 	.word	0x20000004
 8000b14:	2000000c 	.word	0x2000000c
 8000b18:	20000008 	.word	0x20000008

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	2000000c 	.word	0x2000000c
 8000b40:	200001cc 	.word	0x200001cc

08000b44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200001cc 	.word	0x200001cc

08000b5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09a      	sub	sp, #104	; 0x68
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d101      	bne.n	8000bb8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e1e3      	b.n	8000f80 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d176      	bne.n	8000cb8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d152      	bne.n	8000c78 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff fdc7 	bl	8000780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d13b      	bne.n	8000c78 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f001 f8af 	bl	8001d64 <ADC_Disable>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d12f      	bne.n	8000c78 <HAL_ADC_Init+0xe0>
 8000c18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d12b      	bne.n	8000c78 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c28:	f023 0302 	bic.w	r3, r3, #2
 8000c2c:	f043 0202 	orr.w	r2, r3, #2
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c42:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c52:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c54:	4b92      	ldr	r3, [pc, #584]	; (8000ea0 <HAL_ADC_Init+0x308>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_ADC_Init+0x30c>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	0c9a      	lsrs	r2, r3, #18
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c6a:	e002      	b.n	8000c72 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f9      	bne.n	8000c6c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c94:	d110      	bne.n	8000cb8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f023 0312 	bic.w	r3, r3, #18
 8000c9e:	f043 0210 	orr.w	r2, r3, #16
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f043 0201 	orr.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 8150 	bne.w	8000f66 <HAL_ADC_Init+0x3ce>
 8000cc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 814b 	bne.w	8000f66 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f040 8143 	bne.w	8000f66 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ce8:	f043 0202 	orr.w	r2, r3, #2
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cf8:	d004      	beq.n	8000d04 <HAL_ADC_Init+0x16c>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a6a      	ldr	r2, [pc, #424]	; (8000ea8 <HAL_ADC_Init+0x310>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d101      	bne.n	8000d08 <HAL_ADC_Init+0x170>
 8000d04:	4b69      	ldr	r3, [pc, #420]	; (8000eac <HAL_ADC_Init+0x314>)
 8000d06:	e000      	b.n	8000d0a <HAL_ADC_Init+0x172>
 8000d08:	4b69      	ldr	r3, [pc, #420]	; (8000eb0 <HAL_ADC_Init+0x318>)
 8000d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d14:	d102      	bne.n	8000d1c <HAL_ADC_Init+0x184>
 8000d16:	4b64      	ldr	r3, [pc, #400]	; (8000ea8 <HAL_ADC_Init+0x310>)
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e01a      	b.n	8000d52 <HAL_ADC_Init+0x1ba>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a61      	ldr	r2, [pc, #388]	; (8000ea8 <HAL_ADC_Init+0x310>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d103      	bne.n	8000d2e <HAL_ADC_Init+0x196>
 8000d26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e011      	b.n	8000d52 <HAL_ADC_Init+0x1ba>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a60      	ldr	r2, [pc, #384]	; (8000eb4 <HAL_ADC_Init+0x31c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d102      	bne.n	8000d3e <HAL_ADC_Init+0x1a6>
 8000d38:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <HAL_ADC_Init+0x320>)
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	e009      	b.n	8000d52 <HAL_ADC_Init+0x1ba>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5d      	ldr	r2, [pc, #372]	; (8000eb8 <HAL_ADC_Init+0x320>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d102      	bne.n	8000d4e <HAL_ADC_Init+0x1b6>
 8000d48:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <HAL_ADC_Init+0x31c>)
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e001      	b.n	8000d52 <HAL_ADC_Init+0x1ba>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d108      	bne.n	8000d72 <HAL_ADC_Init+0x1da>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_ADC_Init+0x1da>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <HAL_ADC_Init+0x1dc>
 8000d72:	2300      	movs	r3, #0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d11c      	bne.n	8000db2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d78:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d010      	beq.n	8000da0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d107      	bne.n	8000d9a <HAL_ADC_Init+0x202>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <HAL_ADC_Init+0x202>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_ADC_Init+0x204>
 8000d9a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d108      	bne.n	8000db2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7e5b      	ldrb	r3, [r3, #25]
 8000db6:	035b      	lsls	r3, r3, #13
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dbc:	2a01      	cmp	r2, #1
 8000dbe:	d002      	beq.n	8000dc6 <HAL_ADC_Init+0x22e>
 8000dc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc4:	e000      	b.n	8000dc8 <HAL_ADC_Init+0x230>
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d11b      	bne.n	8000e1e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7e5b      	ldrb	r3, [r3, #25]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d109      	bne.n	8000e02 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	3b01      	subs	r3, #1
 8000df4:	045a      	lsls	r2, r3, #17
 8000df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8000e00:	e00d      	b.n	8000e1e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e0a:	f043 0220 	orr.w	r2, r3, #32
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d054      	beq.n	8000ed0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <HAL_ADC_Init+0x31c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d004      	beq.n	8000e3a <HAL_ADC_Init+0x2a2>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_ADC_Init+0x320>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d140      	bne.n	8000ebc <HAL_ADC_Init+0x324>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000e42:	d02a      	beq.n	8000e9a <HAL_ADC_Init+0x302>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e4c:	d022      	beq.n	8000e94 <HAL_ADC_Init+0x2fc>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000e56:	d01a      	beq.n	8000e8e <HAL_ADC_Init+0x2f6>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000e60:	d012      	beq.n	8000e88 <HAL_ADC_Init+0x2f0>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000e6a:	d00a      	beq.n	8000e82 <HAL_ADC_Init+0x2ea>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000e74:	d002      	beq.n	8000e7c <HAL_ADC_Init+0x2e4>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	e023      	b.n	8000ec4 <HAL_ADC_Init+0x32c>
 8000e7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e80:	e020      	b.n	8000ec4 <HAL_ADC_Init+0x32c>
 8000e82:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e86:	e01d      	b.n	8000ec4 <HAL_ADC_Init+0x32c>
 8000e88:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e8c:	e01a      	b.n	8000ec4 <HAL_ADC_Init+0x32c>
 8000e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e92:	e017      	b.n	8000ec4 <HAL_ADC_Init+0x32c>
 8000e94:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000e98:	e014      	b.n	8000ec4 <HAL_ADC_Init+0x32c>
 8000e9a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e9e:	e011      	b.n	8000ec4 <HAL_ADC_Init+0x32c>
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	50000100 	.word	0x50000100
 8000eac:	50000300 	.word	0x50000300
 8000eb0:	50000700 	.word	0x50000700
 8000eb4:	50000400 	.word	0x50000400
 8000eb8:	50000500 	.word	0x50000500
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000eec:	f023 0302 	bic.w	r3, r3, #2
 8000ef0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7e1b      	ldrb	r3, [r3, #24]
 8000ef6:	039a      	lsls	r2, r3, #14
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4313      	orrs	r3, r2
 8000f02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f04:	4313      	orrs	r3, r2
 8000f06:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_ADC_Init+0x3f0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d10c      	bne.n	8000f3e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f023 010f 	bic.w	r1, r3, #15
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3c:	e007      	b.n	8000f4e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 020f 	bic.w	r2, r2, #15
 8000f4c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f023 0303 	bic.w	r3, r3, #3
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	641a      	str	r2, [r3, #64]	; 0x40
 8000f64:	e00a      	b.n	8000f7c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f023 0312 	bic.w	r3, r3, #18
 8000f6e:	f043 0210 	orr.w	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f76:	2301      	movs	r3, #1
 8000f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3768      	adds	r7, #104	; 0x68
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	fff0c007 	.word	0xfff0c007

08000f8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_ADC_IRQHandler+0x38>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 80bc 	beq.w	8001148 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80b6 	beq.w	8001148 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ffc:	d004      	beq.n	8001008 <HAL_ADC_IRQHandler+0x7c>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a90      	ldr	r2, [pc, #576]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d106      	bne.n	8001016 <HAL_ADC_IRQHandler+0x8a>
 8001008:	4b8f      	ldr	r3, [pc, #572]	; (8001248 <HAL_ADC_IRQHandler+0x2bc>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2b00      	cmp	r3, #0
 8001012:	d03e      	beq.n	8001092 <HAL_ADC_IRQHandler+0x106>
 8001014:	e005      	b.n	8001022 <HAL_ADC_IRQHandler+0x96>
 8001016:	4b8d      	ldr	r3, [pc, #564]	; (800124c <HAL_ADC_IRQHandler+0x2c0>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	2b00      	cmp	r3, #0
 8001020:	d037      	beq.n	8001092 <HAL_ADC_IRQHandler+0x106>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800102a:	d004      	beq.n	8001036 <HAL_ADC_IRQHandler+0xaa>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a84      	ldr	r2, [pc, #528]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d106      	bne.n	8001044 <HAL_ADC_IRQHandler+0xb8>
 8001036:	4b84      	ldr	r3, [pc, #528]	; (8001248 <HAL_ADC_IRQHandler+0x2bc>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	2b05      	cmp	r3, #5
 8001040:	d027      	beq.n	8001092 <HAL_ADC_IRQHandler+0x106>
 8001042:	e005      	b.n	8001050 <HAL_ADC_IRQHandler+0xc4>
 8001044:	4b81      	ldr	r3, [pc, #516]	; (800124c <HAL_ADC_IRQHandler+0x2c0>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	2b05      	cmp	r3, #5
 800104e:	d020      	beq.n	8001092 <HAL_ADC_IRQHandler+0x106>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001058:	d004      	beq.n	8001064 <HAL_ADC_IRQHandler+0xd8>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a79      	ldr	r2, [pc, #484]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d106      	bne.n	8001072 <HAL_ADC_IRQHandler+0xe6>
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <HAL_ADC_IRQHandler+0x2bc>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	2b09      	cmp	r3, #9
 800106e:	d010      	beq.n	8001092 <HAL_ADC_IRQHandler+0x106>
 8001070:	e005      	b.n	800107e <HAL_ADC_IRQHandler+0xf2>
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <HAL_ADC_IRQHandler+0x2c0>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	2b09      	cmp	r3, #9
 800107c:	d009      	beq.n	8001092 <HAL_ADC_IRQHandler+0x106>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001086:	d004      	beq.n	8001092 <HAL_ADC_IRQHandler+0x106>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a70      	ldr	r2, [pc, #448]	; (8001250 <HAL_ADC_IRQHandler+0x2c4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d104      	bne.n	800109c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	e00f      	b.n	80010bc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010a4:	d004      	beq.n	80010b0 <HAL_ADC_IRQHandler+0x124>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a66      	ldr	r2, [pc, #408]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d102      	bne.n	80010b6 <HAL_ADC_IRQHandler+0x12a>
 80010b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010b4:	e000      	b.n	80010b8 <HAL_ADC_IRQHandler+0x12c>
 80010b6:	4b66      	ldr	r3, [pc, #408]	; (8001250 <HAL_ADC_IRQHandler+0x2c4>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d137      	bne.n	800113a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d132      	bne.n	800113a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d02d      	beq.n	800113a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11a      	bne.n	8001122 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 020c 	bic.w	r2, r2, #12
 80010fa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d112      	bne.n	800113a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
 8001120:	e00b      	b.n	800113a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fd0e 	bl	8000b5c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	220c      	movs	r2, #12
 8001146:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_ADC_IRQHandler+0x1d0>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10b      	bne.n	8001174 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8138 	beq.w	80013d8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8132 	beq.w	80013d8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001188:	d004      	beq.n	8001194 <HAL_ADC_IRQHandler+0x208>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d106      	bne.n	80011a2 <HAL_ADC_IRQHandler+0x216>
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_ADC_IRQHandler+0x2bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03e      	beq.n	800121e <HAL_ADC_IRQHandler+0x292>
 80011a0:	e005      	b.n	80011ae <HAL_ADC_IRQHandler+0x222>
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_ADC_IRQHandler+0x2c0>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d037      	beq.n	800121e <HAL_ADC_IRQHandler+0x292>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_IRQHandler+0x236>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d106      	bne.n	80011d0 <HAL_ADC_IRQHandler+0x244>
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_ADC_IRQHandler+0x2bc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d027      	beq.n	800121e <HAL_ADC_IRQHandler+0x292>
 80011ce:	e005      	b.n	80011dc <HAL_ADC_IRQHandler+0x250>
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_ADC_IRQHandler+0x2c0>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d020      	beq.n	800121e <HAL_ADC_IRQHandler+0x292>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_IRQHandler+0x264>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d106      	bne.n	80011fe <HAL_ADC_IRQHandler+0x272>
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_ADC_IRQHandler+0x2bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d010      	beq.n	800121e <HAL_ADC_IRQHandler+0x292>
 80011fc:	e005      	b.n	800120a <HAL_ADC_IRQHandler+0x27e>
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_ADC_IRQHandler+0x2c0>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2b09      	cmp	r3, #9
 8001208:	d009      	beq.n	800121e <HAL_ADC_IRQHandler+0x292>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001212:	d004      	beq.n	800121e <HAL_ADC_IRQHandler+0x292>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_ADC_IRQHandler+0x2c4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d104      	bne.n	8001228 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	e018      	b.n	800125a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001230:	d004      	beq.n	800123c <HAL_ADC_IRQHandler+0x2b0>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a03      	ldr	r2, [pc, #12]	; (8001244 <HAL_ADC_IRQHandler+0x2b8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d10b      	bne.n	8001254 <HAL_ADC_IRQHandler+0x2c8>
 800123c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001240:	e009      	b.n	8001256 <HAL_ADC_IRQHandler+0x2ca>
 8001242:	bf00      	nop
 8001244:	50000100 	.word	0x50000100
 8001248:	50000300 	.word	0x50000300
 800124c:	50000700 	.word	0x50000700
 8001250:	50000400 	.word	0x50000400
 8001254:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_ADC_IRQHandler+0x514>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001260:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001264:	2b00      	cmp	r3, #0
 8001266:	f040 80b0 	bne.w	80013ca <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00d      	beq.n	8001290 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 80a3 	bne.w	80013ca <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 809d 	bne.w	80013ca <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8097 	beq.w	80013ca <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a4:	d004      	beq.n	80012b0 <HAL_ADC_IRQHandler+0x324>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7e      	ldr	r2, [pc, #504]	; (80014a4 <HAL_ADC_IRQHandler+0x518>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d106      	bne.n	80012be <HAL_ADC_IRQHandler+0x332>
 80012b0:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <HAL_ADC_IRQHandler+0x51c>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d03e      	beq.n	800133a <HAL_ADC_IRQHandler+0x3ae>
 80012bc:	e005      	b.n	80012ca <HAL_ADC_IRQHandler+0x33e>
 80012be:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <HAL_ADC_IRQHandler+0x520>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d037      	beq.n	800133a <HAL_ADC_IRQHandler+0x3ae>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d004      	beq.n	80012de <HAL_ADC_IRQHandler+0x352>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a72      	ldr	r2, [pc, #456]	; (80014a4 <HAL_ADC_IRQHandler+0x518>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d106      	bne.n	80012ec <HAL_ADC_IRQHandler+0x360>
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <HAL_ADC_IRQHandler+0x51c>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d027      	beq.n	800133a <HAL_ADC_IRQHandler+0x3ae>
 80012ea:	e005      	b.n	80012f8 <HAL_ADC_IRQHandler+0x36c>
 80012ec:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <HAL_ADC_IRQHandler+0x520>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d020      	beq.n	800133a <HAL_ADC_IRQHandler+0x3ae>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001300:	d004      	beq.n	800130c <HAL_ADC_IRQHandler+0x380>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a67      	ldr	r2, [pc, #412]	; (80014a4 <HAL_ADC_IRQHandler+0x518>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d106      	bne.n	800131a <HAL_ADC_IRQHandler+0x38e>
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <HAL_ADC_IRQHandler+0x51c>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2b07      	cmp	r3, #7
 8001316:	d010      	beq.n	800133a <HAL_ADC_IRQHandler+0x3ae>
 8001318:	e005      	b.n	8001326 <HAL_ADC_IRQHandler+0x39a>
 800131a:	4b64      	ldr	r3, [pc, #400]	; (80014ac <HAL_ADC_IRQHandler+0x520>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	2b07      	cmp	r3, #7
 8001324:	d009      	beq.n	800133a <HAL_ADC_IRQHandler+0x3ae>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800132e:	d004      	beq.n	800133a <HAL_ADC_IRQHandler+0x3ae>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_ADC_IRQHandler+0x514>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d104      	bne.n	8001344 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e00f      	b.n	8001364 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134c:	d004      	beq.n	8001358 <HAL_ADC_IRQHandler+0x3cc>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <HAL_ADC_IRQHandler+0x518>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d102      	bne.n	800135e <HAL_ADC_IRQHandler+0x3d2>
 8001358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800135c:	e000      	b.n	8001360 <HAL_ADC_IRQHandler+0x3d4>
 800135e:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <HAL_ADC_IRQHandler+0x514>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d12d      	bne.n	80013ca <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11a      	bne.n	80013b2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800138a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d112      	bne.n	80013ca <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f043 0201 	orr.w	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
 80013b0:	e00b      	b.n	80013ca <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f043 0210 	orr.w	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f8c4 	bl	8001558 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2260      	movs	r2, #96	; 0x60
 80013d6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d011      	beq.n	8001406 <HAL_ADC_IRQHandler+0x47a>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00c      	beq.n	8001406 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fbb9 	bl	8000b70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d012      	beq.n	8001436 <HAL_ADC_IRQHandler+0x4aa>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00d      	beq.n	8001436 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f8aa 	bl	8001580 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001434:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143c:	2b00      	cmp	r3, #0
 800143e:	d012      	beq.n	8001466 <HAL_ADC_IRQHandler+0x4da>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00d      	beq.n	8001466 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f89c 	bl	8001594 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d04f      	beq.n	8001510 <HAL_ADC_IRQHandler+0x584>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04a      	beq.n	8001510 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	2b01      	cmp	r3, #1
 8001480:	d102      	bne.n	8001488 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001482:	2301      	movs	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e02d      	b.n	80014e4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001490:	d004      	beq.n	800149c <HAL_ADC_IRQHandler+0x510>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_ADC_IRQHandler+0x518>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d109      	bne.n	80014b0 <HAL_ADC_IRQHandler+0x524>
 800149c:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <HAL_ADC_IRQHandler+0x51c>)
 800149e:	e008      	b.n	80014b2 <HAL_ADC_IRQHandler+0x526>
 80014a0:	50000400 	.word	0x50000400
 80014a4:	50000100 	.word	0x50000100
 80014a8:	50000300 	.word	0x50000300
 80014ac:	50000700 	.word	0x50000700
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_ADC_IRQHandler+0x5c8>)
 80014b2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d109      	bne.n	80014d4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10a      	bne.n	80014e4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80014ce:	2301      	movs	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e007      	b.n	80014e4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10e      	bne.n	8001508 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f043 0202 	orr.w	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fb3e 	bl	8000b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2210      	movs	r2, #16
 800150e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	2b00      	cmp	r3, #0
 8001518:	d018      	beq.n	800154c <HAL_ADC_IRQHandler+0x5c0>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f043 0208 	orr.w	r2, r3, #8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001544:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f810 	bl	800156c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	50000700 	.word	0x50000700

08001558 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b09b      	sub	sp, #108	; 0x6c
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x22>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e2ca      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x5b8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 82ae 	bne.w	8001b3e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d81c      	bhi.n	8001624 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	461a      	mov	r2, r3
 80015fe:	231f      	movs	r3, #31
 8001600:	4093      	lsls	r3, r2
 8001602:	43db      	mvns	r3, r3
 8001604:	4019      	ands	r1, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
 8001622:	e063      	b.n	80016ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b09      	cmp	r3, #9
 800162a:	d81e      	bhi.n	800166a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	3b1e      	subs	r3, #30
 8001640:	221f      	movs	r2, #31
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	4019      	ands	r1, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	3b1e      	subs	r3, #30
 800165c:	fa00 f203 	lsl.w	r2, r0, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
 8001668:	e040      	b.n	80016ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b0e      	cmp	r3, #14
 8001670:	d81e      	bhi.n	80016b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	3b3c      	subs	r3, #60	; 0x3c
 8001686:	221f      	movs	r2, #31
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	3b3c      	subs	r3, #60	; 0x3c
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
 80016ae:	e01d      	b.n	80016ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3b5a      	subs	r3, #90	; 0x5a
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	4019      	ands	r1, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	3b5a      	subs	r3, #90	; 0x5a
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 80e5 	bne.w	80018c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b09      	cmp	r3, #9
 8001702:	d91c      	bls.n	800173e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6999      	ldr	r1, [r3, #24]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3b1e      	subs	r3, #30
 8001716:	2207      	movs	r2, #7
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	4019      	ands	r1, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6898      	ldr	r0, [r3, #8]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	3b1e      	subs	r3, #30
 8001730:	fa00 f203 	lsl.w	r2, r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	e019      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6959      	ldr	r1, [r3, #20]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	2207      	movs	r2, #7
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	4019      	ands	r1, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	6898      	ldr	r0, [r3, #8]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	3b01      	subs	r3, #1
 8001790:	2b03      	cmp	r3, #3
 8001792:	d84f      	bhi.n	8001834 <HAL_ADC_ConfigChannel+0x28c>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <HAL_ADC_ConfigChannel+0x1f4>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017cf 	.word	0x080017cf
 80017a4:	080017f1 	.word	0x080017f1
 80017a8:	08001813 	.word	0x08001813
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b2:	4b9a      	ldr	r3, [pc, #616]	; (8001a1c <HAL_ADC_ConfigChannel+0x474>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	0691      	lsls	r1, r2, #26
 80017bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017be:	430a      	orrs	r2, r1
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017cc:	e07e      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017d4:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <HAL_ADC_ConfigChannel+0x474>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	0691      	lsls	r1, r2, #26
 80017de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e0:	430a      	orrs	r2, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017ee:	e06d      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017f6:	4b89      	ldr	r3, [pc, #548]	; (8001a1c <HAL_ADC_ConfigChannel+0x474>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	0691      	lsls	r1, r2, #26
 8001800:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001802:	430a      	orrs	r2, r1
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800180e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001810:	e05c      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001818:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_ADC_ConfigChannel+0x474>)
 800181a:	4013      	ands	r3, r2
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	0691      	lsls	r1, r2, #26
 8001822:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001824:	430a      	orrs	r2, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001830:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001832:	e04b      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	069b      	lsls	r3, r3, #26
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001856:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800185e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	069b      	lsls	r3, r3, #26
 8001868:	429a      	cmp	r2, r3
 800186a:	d107      	bne.n	800187c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	069b      	lsls	r3, r3, #26
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800189e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	069b      	lsls	r3, r3, #26
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d10a      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018c4:	e001      	b.n	80018ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018c6:	bf00      	nop
 80018c8:	e000      	b.n	80018cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x344>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x344>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_ADC_ConfigChannel+0x346>
 80018ec:	2300      	movs	r3, #0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8130 	bne.w	8001b54 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d00f      	beq.n	800191c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	400a      	ands	r2, r1
 8001916:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800191a:	e049      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	409a      	lsls	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b09      	cmp	r3, #9
 800193c:	d91c      	bls.n	8001978 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6999      	ldr	r1, [r3, #24]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	3b1b      	subs	r3, #27
 8001950:	2207      	movs	r2, #7
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	4019      	ands	r1, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6898      	ldr	r0, [r3, #8]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	3b1b      	subs	r3, #27
 800196a:	fa00 f203 	lsl.w	r2, r0, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	619a      	str	r2, [r3, #24]
 8001976:	e01b      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6959      	ldr	r1, [r3, #20]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	2207      	movs	r2, #7
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	4019      	ands	r1, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6898      	ldr	r0, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b8:	d004      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x41c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_ADC_ConfigChannel+0x478>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x420>
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_ADC_ConfigChannel+0x47c>)
 80019c6:	e000      	b.n	80019ca <HAL_ADC_ConfigChannel+0x422>
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_ADC_ConfigChannel+0x480>)
 80019ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b10      	cmp	r3, #16
 80019d2:	d105      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d015      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019e4:	2b11      	cmp	r3, #17
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019f8:	2b12      	cmp	r3, #18
 80019fa:	f040 80ab 	bne.w	8001b54 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 80a4 	bne.w	8001b54 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a14:	d10a      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x484>
 8001a16:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_ADC_ConfigChannel+0x478>)
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e022      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x4ba>
 8001a1c:	83fff000 	.word	0x83fff000
 8001a20:	50000100 	.word	0x50000100
 8001a24:	50000300 	.word	0x50000300
 8001a28:	50000700 	.word	0x50000700
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a4e      	ldr	r2, [pc, #312]	; (8001b6c <HAL_ADC_ConfigChannel+0x5c4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d103      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x496>
 8001a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e011      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x4ba>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a4b      	ldr	r2, [pc, #300]	; (8001b70 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d102      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x4a6>
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e009      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x4ba>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d102      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x4b6>
 8001a58:	4b45      	ldr	r3, [pc, #276]	; (8001b70 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e001      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x4ba>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d108      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x4da>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x4da>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x4dc>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d150      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d010      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x502>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x502>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_ADC_ConfigChannel+0x504>
 8001aaa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d13c      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d11d      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x54c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac0:	d118      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001acc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <HAL_ADC_ConfigChannel+0x5d4>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	0c9a      	lsrs	r2, r3, #18
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae4:	e002      	b.n	8001aec <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f9      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af2:	e02e      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b11      	cmp	r3, #17
 8001afa:	d10b      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x56c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b04:	d106      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b12:	e01e      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b12      	cmp	r3, #18
 8001b1a:	d11a      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b28:	e013      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f043 0220 	orr.w	r2, r3, #32
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b3c:	e00a      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0220 	orr.w	r2, r3, #32
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b50:	e000      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b52:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	376c      	adds	r7, #108	; 0x6c
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	50000100 	.word	0x50000100
 8001b70:	50000400 	.word	0x50000400
 8001b74:	50000500 	.word	0x50000500
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	431bde83 	.word	0x431bde83

08001b80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b099      	sub	sp, #100	; 0x64
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b98:	d102      	bne.n	8001ba0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b9a:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	e01a      	b.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	; (8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d103      	bne.n	8001bb2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001baa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	e011      	b.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a67      	ldr	r2, [pc, #412]	; (8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	e009      	b.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a64      	ldr	r2, [pc, #400]	; (8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d102      	bne.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001bcc:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	e001      	b.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b0      	b.n	8001d42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e0a9      	b.n	8001d42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 808d 	bne.w	8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 8086 	bne.w	8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c1c:	d004      	beq.n	8001c28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a4b      	ldr	r2, [pc, #300]	; (8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c28:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c2a:	e000      	b.n	8001c2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c2e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d040      	beq.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c4a:	035b      	lsls	r3, r3, #13
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c52:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d15c      	bne.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001c96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d14b      	bne.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ca4:	f023 030f 	bic.w	r3, r3, #15
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	6811      	ldr	r1, [r2, #0]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	6892      	ldr	r2, [r2, #8]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cb8:	e03c      	b.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d123      	bne.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d08:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d112      	bne.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d16:	f023 030f 	bic.w	r3, r3, #15
 8001d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d1c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d1e:	e009      	b.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d32:	e000      	b.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d34:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d42:	4618      	mov	r0, r3
 8001d44:	3764      	adds	r7, #100	; 0x64
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	50000100 	.word	0x50000100
 8001d54:	50000400 	.word	0x50000400
 8001d58:	50000500 	.word	0x50000500
 8001d5c:	50000300 	.word	0x50000300
 8001d60:	50000700 	.word	0x50000700

08001d64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <ADC_Disable+0x2c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <ADC_Disable+0x2c>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <ADC_Disable+0x2e>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d047      	beq.n	8001e26 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030d 	and.w	r3, r3, #13
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10f      	bne.n	8001dc4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0202 	orr.w	r2, r2, #2
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2203      	movs	r2, #3
 8001dba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001dbc:	f7fe fec2 	bl	8000b44 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dc2:	e029      	b.n	8001e18 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f043 0210 	orr.w	r2, r3, #16
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e023      	b.n	8001e28 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001de0:	f7fe feb0 	bl	8000b44 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d914      	bls.n	8001e18 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10d      	bne.n	8001e18 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f043 0210 	orr.w	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e007      	b.n	8001e28 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d0dc      	beq.n	8001de0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0ed      	b.n	800201e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fce6 	bl	8000820 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e64:	f7fe fe6e 	bl	8000b44 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e6a:	e012      	b.n	8001e92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e6c:	f7fe fe6a 	bl	8000b44 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d90b      	bls.n	8001e92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2205      	movs	r2, #5
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0c5      	b.n	800201e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0e5      	beq.n	8001e6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0202 	bic.w	r2, r2, #2
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb0:	f7fe fe48 	bl	8000b44 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eb6:	e012      	b.n	8001ede <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eb8:	f7fe fe44 	bl	8000b44 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b0a      	cmp	r3, #10
 8001ec4:	d90b      	bls.n	8001ede <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e09f      	b.n	800201e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e5      	bne.n	8001eb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7e1b      	ldrb	r3, [r3, #24]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d108      	bne.n	8001f06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e007      	b.n	8001f16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7e5b      	ldrb	r3, [r3, #25]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d108      	bne.n	8001f30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e007      	b.n	8001f40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7e9b      	ldrb	r3, [r3, #26]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0220 	orr.w	r2, r2, #32
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e007      	b.n	8001f6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0220 	bic.w	r2, r2, #32
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7edb      	ldrb	r3, [r3, #27]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0210 	bic.w	r2, r2, #16
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e007      	b.n	8001f94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0210 	orr.w	r2, r2, #16
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7f1b      	ldrb	r3, [r3, #28]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0208 	orr.w	r2, r2, #8
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e007      	b.n	8001fbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0208 	bic.w	r2, r2, #8
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7f5b      	ldrb	r3, [r3, #29]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0204 	orr.w	r2, r2, #4
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e007      	b.n	8001fe8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0204 	bic.w	r2, r2, #4
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	ea42 0103 	orr.w	r1, r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002026:	b480      	push	{r7}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d003      	beq.n	800204c <HAL_CAN_ConfigFilter+0x26>
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	2b02      	cmp	r3, #2
 8002048:	f040 80aa 	bne.w	80021a0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2201      	movs	r2, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d123      	bne.n	80020ce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	401a      	ands	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3248      	adds	r2, #72	; 0x48
 80020ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020c4:	6979      	ldr	r1, [r7, #20]
 80020c6:	3348      	adds	r3, #72	; 0x48
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d122      	bne.n	800211c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	431a      	orrs	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3248      	adds	r2, #72	; 0x48
 80020fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002110:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	3348      	adds	r3, #72	; 0x48
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002136:	e007      	b.n	8002148 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	431a      	orrs	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002162:	e007      	b.n	8002174 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	431a      	orrs	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002192:	f023 0201 	bic.w	r2, r3, #1
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e006      	b.n	80021ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d12e      	bne.n	800222c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021e6:	f7fe fcad 	bl	8000b44 <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021ec:	e012      	b.n	8002214 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021ee:	f7fe fca9 	bl	8000b44 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b0a      	cmp	r3, #10
 80021fa:	d90b      	bls.n	8002214 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2205      	movs	r2, #5
 800220c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e012      	b.n	800223a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e5      	bne.n	80021ee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e006      	b.n	800223a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002242:	b480      	push	{r7}
 8002244:	b089      	sub	sp, #36	; 0x24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002256:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d003      	beq.n	800226e <HAL_CAN_AddTxMessage+0x2c>
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	2b02      	cmp	r3, #2
 800226a:	f040 80ad 	bne.w	80023c8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8095 	beq.w	80023b8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	0e1b      	lsrs	r3, r3, #24
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002298:	2201      	movs	r2, #1
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	409a      	lsls	r2, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022b4:	68f9      	ldr	r1, [r7, #12]
 80022b6:	6809      	ldr	r1, [r1, #0]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3318      	adds	r3, #24
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	440b      	add	r3, r1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e00f      	b.n	80022e6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3318      	adds	r3, #24
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	440b      	add	r3, r1
 80022e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3318      	adds	r3, #24
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	440b      	add	r3, r1
 80022f6:	3304      	adds	r3, #4
 80022f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	7d1b      	ldrb	r3, [r3, #20]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d111      	bne.n	8002326 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3318      	adds	r3, #24
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6811      	ldr	r1, [r2, #0]
 8002316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3318      	adds	r3, #24
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	440b      	add	r3, r1
 8002322:	3304      	adds	r3, #4
 8002324:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3307      	adds	r3, #7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	061a      	lsls	r2, r3, #24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3306      	adds	r3, #6
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3305      	adds	r3, #5
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	4313      	orrs	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	3204      	adds	r2, #4
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	4610      	mov	r0, r2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6811      	ldr	r1, [r2, #0]
 800234e:	ea43 0200 	orr.w	r2, r3, r0
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	440b      	add	r3, r1
 8002358:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800235c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3303      	adds	r3, #3
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	061a      	lsls	r2, r3, #24
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3302      	adds	r3, #2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3301      	adds	r3, #1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	4313      	orrs	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	4610      	mov	r0, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	6811      	ldr	r1, [r2, #0]
 8002384:	ea43 0200 	orr.w	r2, r3, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	440b      	add	r3, r1
 800238e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002392:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3318      	adds	r3, #24
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	6811      	ldr	r1, [r2, #0]
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3318      	adds	r3, #24
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	440b      	add	r3, r1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e00e      	b.n	80023d6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e006      	b.n	80023d6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023e2:	b480      	push	{r7}
 80023e4:	b087      	sub	sp, #28
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d003      	beq.n	8002406 <HAL_CAN_GetRxMessage+0x24>
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b02      	cmp	r3, #2
 8002402:	f040 8103 	bne.w	800260c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10e      	bne.n	800242a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0f7      	b.n	800261a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0e8      	b.n	800261a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	331b      	adds	r3, #27
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0204 	and.w	r2, r3, #4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10c      	bne.n	8002480 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	331b      	adds	r3, #27
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0d5b      	lsrs	r3, r3, #21
 8002476:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e00b      	b.n	8002498 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	331b      	adds	r3, #27
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4413      	add	r3, r2
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	331b      	adds	r3, #27
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4413      	add	r3, r2
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0202 	and.w	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	331b      	adds	r3, #27
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	3304      	adds	r3, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2208      	movs	r2, #8
 80024ca:	611a      	str	r2, [r3, #16]
 80024cc:	e00b      	b.n	80024e6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	331b      	adds	r3, #27
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 020f 	and.w	r2, r3, #15
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	331b      	adds	r3, #27
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	331b      	adds	r3, #27
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	4413      	add	r3, r2
 8002520:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0a1a      	lsrs	r2, r3, #8
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	4413      	add	r3, r2
 8002550:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0c1a      	lsrs	r2, r3, #16
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	3302      	adds	r3, #2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e1a      	lsrs	r2, r3, #24
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	3303      	adds	r3, #3
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4413      	add	r3, r2
 8002584:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	3304      	adds	r3, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0a1a      	lsrs	r2, r3, #8
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	3305      	adds	r3, #5
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0c1a      	lsrs	r2, r3, #16
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3306      	adds	r3, #6
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0e1a      	lsrs	r2, r3, #24
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	3307      	adds	r3, #7
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	e007      	b.n	8002608 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e006      	b.n	800261a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d002      	beq.n	8002644 <HAL_CAN_ActivateNotification+0x1e>
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d109      	bne.n	8002658 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6959      	ldr	r1, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e006      	b.n	8002666 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08a      	sub	sp, #40	; 0x28
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d07c      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d023      	beq.n	800270a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f983 	bl	80029e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80026da:	e016      	b.n	800270a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e00c      	b.n	800270a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e002      	b.n	800270a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f989 	bl	8002a1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d024      	beq.n	800275e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f963 	bl	80029f4 <HAL_CAN_TxMailbox1CompleteCallback>
 800272e:	e016      	b.n	800275e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	e00c      	b.n	800275e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e002      	b.n	800275e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f969 	bl	8002a30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d024      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002770:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f943 	bl	8002a08 <HAL_CAN_TxMailbox2CompleteCallback>
 8002782:	e016      	b.n	80027b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	e00c      	b.n	80027b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e002      	b.n	80027b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f949 	bl	8002a44 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2210      	movs	r2, #16
 80027d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2208      	movs	r2, #8
 80027f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f930 	bl	8002a58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7fd fd0f 	bl	8000234 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002830:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2210      	movs	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2208      	movs	r2, #8
 8002854:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f912 	bl	8002a80 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8f9 	bl	8002a6c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2210      	movs	r2, #16
 8002894:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8fc 	bl	8002a94 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8f5 	bl	8002aa8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d07b      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d072      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292c:	2b00      	cmp	r3, #0
 800292e:	d043      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03e      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002940:	2b60      	cmp	r3, #96	; 0x60
 8002942:	d02b      	beq.n	800299c <HAL_CAN_IRQHandler+0x32a>
 8002944:	2b60      	cmp	r3, #96	; 0x60
 8002946:	d82e      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002948:	2b50      	cmp	r3, #80	; 0x50
 800294a:	d022      	beq.n	8002992 <HAL_CAN_IRQHandler+0x320>
 800294c:	2b50      	cmp	r3, #80	; 0x50
 800294e:	d82a      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d019      	beq.n	8002988 <HAL_CAN_IRQHandler+0x316>
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d826      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002958:	2b30      	cmp	r3, #48	; 0x30
 800295a:	d010      	beq.n	800297e <HAL_CAN_IRQHandler+0x30c>
 800295c:	2b30      	cmp	r3, #48	; 0x30
 800295e:	d822      	bhi.n	80029a6 <HAL_CAN_IRQHandler+0x334>
 8002960:	2b10      	cmp	r3, #16
 8002962:	d002      	beq.n	800296a <HAL_CAN_IRQHandler+0x2f8>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d005      	beq.n	8002974 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002968:	e01d      	b.n	80029a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002972:	e019      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800297c:	e014      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f043 0320 	orr.w	r3, r3, #32
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002986:	e00f      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002990:	e00a      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800299a:	e005      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a4:	e000      	b.n	80029a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80029a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2204      	movs	r2, #4
 80029be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f872 	bl	8002abc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60d3      	str	r3, [r2, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <__NVIC_EnableIRQ+0x38>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	db0a      	blt.n	8002b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	490c      	ldr	r1, [pc, #48]	; (8002bbc <__NVIC_SetPriority+0x4c>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b98:	e00a      	b.n	8002bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <__NVIC_SetPriority+0x50>)
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3b04      	subs	r3, #4
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	440b      	add	r3, r1
 8002bae:	761a      	strb	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	bf28      	it	cs
 8002be2:	2304      	movcs	r3, #4
 8002be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d902      	bls.n	8002bf4 <NVIC_EncodePriority+0x30>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3b03      	subs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <NVIC_EncodePriority+0x32>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	401a      	ands	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43d9      	mvns	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	4313      	orrs	r3, r2
         );
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c3c:	d301      	bcc.n	8002c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00f      	b.n	8002c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <SysTick_Config+0x40>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4a:	210f      	movs	r1, #15
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c50:	f7ff ff8e 	bl	8002b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <SysTick_Config+0x40>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <SysTick_Config+0x40>)
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff29 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c98:	f7ff ff3e 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f7ff ff8e 	bl	8002bc4 <NVIC_EncodePriority>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff5d 	bl	8002b70 <__NVIC_SetPriority>
}
 8002cb6:	bf00      	nop
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff31 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ffa2 	bl	8002c2c <SysTick_Config>
 8002ce8:	4603      	mov	r3, r0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e037      	b.n	8002d78 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8b4 	bl	8002ec8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}  
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d024      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x72>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01f      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0204 	bic.w	r2, r2, #4
 8002dce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	2104      	movs	r1, #4
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d06a      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002df0:	e065      	b.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2202      	movs	r2, #2
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d02c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0xdc>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d027      	beq.n	8002e5c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 020a 	bic.w	r2, r2, #10
 8002e28:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d035      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e5a:	e030      	b.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2208      	movs	r2, #8
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d028      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d023      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 020e 	bic.w	r2, r2, #14
 8002e84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f202 	lsl.w	r2, r1, r2
 8002e94:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
    }
  }
}  
 8002ebc:	e7ff      	b.n	8002ebe <HAL_DMA_IRQHandler+0x13e>
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <DMA_CalcBaseAndBitshift+0x60>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d80f      	bhi.n	8002efc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <DMA_CalcBaseAndBitshift+0x64>)
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <DMA_CalcBaseAndBitshift+0x6c>)
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002efa:	e00e      	b.n	8002f1a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <DMA_CalcBaseAndBitshift+0x70>)
 8002f04:	4413      	add	r3, r2
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <DMA_CalcBaseAndBitshift+0x68>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <DMA_CalcBaseAndBitshift+0x74>)
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40020407 	.word	0x40020407
 8002f2c:	bffdfff8 	.word	0xbffdfff8
 8002f30:	cccccccd 	.word	0xcccccccd
 8002f34:	40020000 	.word	0x40020000
 8002f38:	bffdfbf8 	.word	0xbffdfbf8
 8002f3c:	40020400 	.word	0x40020400

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4e:	e160      	b.n	8003212 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8152 	beq.w	800320c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d005      	beq.n	8002f80 <HAL_GPIO_Init+0x40>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d130      	bne.n	8002fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	f003 0201 	and.w	r2, r3, #1
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d017      	beq.n	800301e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d123      	bne.n	8003072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	08da      	lsrs	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3208      	adds	r2, #8
 800306c:	6939      	ldr	r1, [r7, #16]
 800306e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2203      	movs	r2, #3
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0203 	and.w	r2, r3, #3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80ac 	beq.w	800320c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b4:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <HAL_GPIO_Init+0x2f0>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4a5d      	ldr	r2, [pc, #372]	; (8003230 <HAL_GPIO_Init+0x2f0>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6193      	str	r3, [r2, #24]
 80030c0:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <HAL_GPIO_Init+0x2f0>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030cc:	4a59      	ldr	r2, [pc, #356]	; (8003234 <HAL_GPIO_Init+0x2f4>)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030f6:	d025      	beq.n	8003144 <HAL_GPIO_Init+0x204>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a4f      	ldr	r2, [pc, #316]	; (8003238 <HAL_GPIO_Init+0x2f8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d01f      	beq.n	8003140 <HAL_GPIO_Init+0x200>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a4e      	ldr	r2, [pc, #312]	; (800323c <HAL_GPIO_Init+0x2fc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d019      	beq.n	800313c <HAL_GPIO_Init+0x1fc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a4d      	ldr	r2, [pc, #308]	; (8003240 <HAL_GPIO_Init+0x300>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_GPIO_Init+0x1f8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a4c      	ldr	r2, [pc, #304]	; (8003244 <HAL_GPIO_Init+0x304>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00d      	beq.n	8003134 <HAL_GPIO_Init+0x1f4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a4b      	ldr	r2, [pc, #300]	; (8003248 <HAL_GPIO_Init+0x308>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <HAL_GPIO_Init+0x1f0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a4a      	ldr	r2, [pc, #296]	; (800324c <HAL_GPIO_Init+0x30c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_GPIO_Init+0x1ec>
 8003128:	2306      	movs	r3, #6
 800312a:	e00c      	b.n	8003146 <HAL_GPIO_Init+0x206>
 800312c:	2307      	movs	r3, #7
 800312e:	e00a      	b.n	8003146 <HAL_GPIO_Init+0x206>
 8003130:	2305      	movs	r3, #5
 8003132:	e008      	b.n	8003146 <HAL_GPIO_Init+0x206>
 8003134:	2304      	movs	r3, #4
 8003136:	e006      	b.n	8003146 <HAL_GPIO_Init+0x206>
 8003138:	2303      	movs	r3, #3
 800313a:	e004      	b.n	8003146 <HAL_GPIO_Init+0x206>
 800313c:	2302      	movs	r3, #2
 800313e:	e002      	b.n	8003146 <HAL_GPIO_Init+0x206>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_GPIO_Init+0x206>
 8003144:	2300      	movs	r3, #0
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	f002 0203 	and.w	r2, r2, #3
 800314c:	0092      	lsls	r2, r2, #2
 800314e:	4093      	lsls	r3, r2
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003156:	4937      	ldr	r1, [pc, #220]	; (8003234 <HAL_GPIO_Init+0x2f4>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_GPIO_Init+0x310>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003188:	4a31      	ldr	r2, [pc, #196]	; (8003250 <HAL_GPIO_Init+0x310>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_GPIO_Init+0x310>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	43db      	mvns	r3, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031b2:	4a27      	ldr	r2, [pc, #156]	; (8003250 <HAL_GPIO_Init+0x310>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_GPIO_Init+0x310>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_GPIO_Init+0x310>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_GPIO_Init+0x310>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_GPIO_Init+0x310>)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3301      	adds	r3, #1
 8003210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f ae97 	bne.w	8002f50 <HAL_GPIO_Init+0x10>
  }
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40021000 	.word	0x40021000
 8003234:	40010000 	.word	0x40010000
 8003238:	48000400 	.word	0x48000400
 800323c:	48000800 	.word	0x48000800
 8003240:	48000c00 	.word	0x48000c00
 8003244:	48001000 	.word	0x48001000
 8003248:	48001400 	.word	0x48001400
 800324c:	48001800 	.word	0x48001800
 8003250:	40010400 	.word	0x40010400

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003270:	e002      	b.n	8003278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800328a:	af00      	add	r7, sp, #0
 800328c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003290:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003294:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f001 b83a 	b.w	800431e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 816f 	beq.w	800359e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032c0:	4bb5      	ldr	r3, [pc, #724]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d00c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032cc:	4bb2      	ldr	r3, [pc, #712]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d15c      	bne.n	8003392 <HAL_RCC_OscConfig+0x10e>
 80032d8:	4baf      	ldr	r3, [pc, #700]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d155      	bne.n	8003392 <HAL_RCC_OscConfig+0x10e>
 80032e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_RCC_OscConfig+0x94>
 8003312:	4ba1      	ldr	r3, [pc, #644]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	e015      	b.n	8003344 <HAL_RCC_OscConfig+0xc0>
 8003318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800332c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003330:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003334:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003340:	4b95      	ldr	r3, [pc, #596]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003348:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800334c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003358:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8111 	beq.w	800359c <HAL_RCC_OscConfig+0x318>
 800337a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 8108 	bne.w	800359c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f000 bfc6 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003396:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12e>
 80033a4:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a7b      	ldr	r2, [pc, #492]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	e036      	b.n	8003420 <HAL_RCC_OscConfig+0x19c>
 80033b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x158>
 80033c2:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a74      	ldr	r2, [pc, #464]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b72      	ldr	r3, [pc, #456]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a71      	ldr	r2, [pc, #452]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e021      	b.n	8003420 <HAL_RCC_OscConfig+0x19c>
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x184>
 80033ee:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a69      	ldr	r2, [pc, #420]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b67      	ldr	r3, [pc, #412]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a66      	ldr	r2, [pc, #408]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0x19c>
 8003408:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a62      	ldr	r2, [pc, #392]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b60      	ldr	r3, [pc, #384]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5f      	ldr	r2, [pc, #380]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003424:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d059      	beq.n	80034e4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd fb88 	bl	8000b44 <HAL_GetTick>
 8003434:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343a:	f7fd fb83 	bl	8000b44 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d902      	bls.n	8003450 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	f000 bf67 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
 8003450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003454:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003464:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <HAL_RCC_OscConfig+0x1fe>
 800347c:	4b46      	ldr	r3, [pc, #280]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x22a>
 8003482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003486:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800349e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034b2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80034b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80034ba:	fa92 f2a2 	rbit	r2, r2
 80034be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80034c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f042 0220 	orr.w	r2, r2, #32
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f002 021f 	and.w	r2, r2, #31
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ab      	beq.n	800343a <HAL_RCC_OscConfig+0x1b6>
 80034e2:	e05c      	b.n	800359e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fb2e 	bl	8000b44 <HAL_GetTick>
 80034e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ee:	f7fd fb29 	bl	8000b44 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d902      	bls.n	8003504 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	f000 bf0d 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
 8003504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003508:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003518:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d102      	bne.n	8003536 <HAL_RCC_OscConfig+0x2b2>
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	e015      	b.n	8003562 <HAL_RCC_OscConfig+0x2de>
 8003536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800353a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800354a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003552:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800355e:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <HAL_RCC_OscConfig+0x314>)
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003566:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800356a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800356e:	fa92 f2a2 	rbit	r2, r2
 8003572:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003576:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800357a:	fab2 f282 	clz	r2, r2
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	f042 0220 	orr.w	r2, r2, #32
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	f002 021f 	and.w	r2, r2, #31
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f202 	lsl.w	r2, r1, r2
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ab      	bne.n	80034ee <HAL_RCC_OscConfig+0x26a>
 8003596:	e002      	b.n	800359e <HAL_RCC_OscConfig+0x31a>
 8003598:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 817f 	beq.w	80038b2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035b4:	4ba7      	ldr	r3, [pc, #668]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00c      	beq.n	80035da <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035c0:	4ba4      	ldr	r3, [pc, #656]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d173      	bne.n	80036b4 <HAL_RCC_OscConfig+0x430>
 80035cc:	4ba1      	ldr	r3, [pc, #644]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80035d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d8:	d16c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x430>
 80035da:	2302      	movs	r3, #2
 80035dc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80035ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d102      	bne.n	800360a <HAL_RCC_OscConfig+0x386>
 8003604:	4b93      	ldr	r3, [pc, #588]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e013      	b.n	8003632 <HAL_RCC_OscConfig+0x3ae>
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003614:	fa93 f3a3 	rbit	r3, r3
 8003618:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800361c:	2302      	movs	r3, #2
 800361e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003622:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800362e:	4b89      	ldr	r3, [pc, #548]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2202      	movs	r2, #2
 8003634:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003638:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800363c:	fa92 f2a2 	rbit	r2, r2
 8003640:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003644:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003648:	fab2 f282 	clz	r2, r2
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f042 0220 	orr.w	r2, r2, #32
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	f002 021f 	and.w	r2, r2, #31
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f202 	lsl.w	r2, r1, r2
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCC_OscConfig+0x3f6>
 8003664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d002      	beq.n	800367a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f000 be52 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b76      	ldr	r3, [pc, #472]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003686:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	21f8      	movs	r1, #248	; 0xf8
 8003690:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003698:	fa91 f1a1 	rbit	r1, r1
 800369c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80036a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036a4:	fab1 f181 	clz	r1, r1
 80036a8:	b2c9      	uxtb	r1, r1
 80036aa:	408b      	lsls	r3, r1
 80036ac:	4969      	ldr	r1, [pc, #420]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e0fe      	b.n	80038b2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8088 	beq.w	80037d6 <HAL_RCC_OscConfig+0x552>
 80036c6:	2301      	movs	r3, #1
 80036c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80036d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	461a      	mov	r2, r3
 80036ee:	2301      	movs	r3, #1
 80036f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fd fa27 	bl	8000b44 <HAL_GetTick>
 80036f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fc:	f7fd fa22 	bl	8000b44 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d902      	bls.n	8003712 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	f000 be06 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
 8003712:	2302      	movs	r3, #2
 8003714:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003724:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_RCC_OscConfig+0x4be>
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e013      	b.n	800376a <HAL_RCC_OscConfig+0x4e6>
 8003742:	2302      	movs	r3, #2
 8003744:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003754:	2302      	movs	r3, #2
 8003756:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800375a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2202      	movs	r2, #2
 800376c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003770:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003774:	fa92 f2a2 	rbit	r2, r2
 8003778:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800377c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f042 0220 	orr.w	r2, r2, #32
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f002 021f 	and.w	r2, r2, #31
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f202 	lsl.w	r2, r1, r2
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0af      	beq.n	80036fc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	21f8      	movs	r1, #248	; 0xf8
 80037b2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80037ba:	fa91 f1a1 	rbit	r1, r1
 80037be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80037c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037c6:	fab1 f181 	clz	r1, r1
 80037ca:	b2c9      	uxtb	r1, r1
 80037cc:	408b      	lsls	r3, r1
 80037ce:	4921      	ldr	r1, [pc, #132]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e06d      	b.n	80038b2 <HAL_RCC_OscConfig+0x62e>
 80037d6:	2301      	movs	r3, #1
 80037d8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80037e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	461a      	mov	r2, r3
 80037fe:	2300      	movs	r3, #0
 8003800:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fd f99f 	bl	8000b44 <HAL_GetTick>
 8003806:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380c:	f7fd f99a 	bl	8000b44 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d902      	bls.n	8003822 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	f000 bd7e 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
 8003822:	2302      	movs	r3, #2
 8003824:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_RCC_OscConfig+0x5d4>
 800384c:	4b01      	ldr	r3, [pc, #4]	; (8003854 <HAL_RCC_OscConfig+0x5d0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	e016      	b.n	8003880 <HAL_RCC_OscConfig+0x5fc>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	2302      	movs	r3, #2
 800385a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800386a:	2302      	movs	r3, #2
 800386c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003870:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800387c:	4bbf      	ldr	r3, [pc, #764]	; (8003b7c <HAL_RCC_OscConfig+0x8f8>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2202      	movs	r2, #2
 8003882:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003886:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800388a:	fa92 f2a2 	rbit	r2, r2
 800388e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003892:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1ac      	bne.n	800380c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8113 	beq.w	8003aee <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d07c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x74e>
 80038d8:	2301      	movs	r3, #1
 80038da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80038ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	4ba2      	ldr	r3, [pc, #648]	; (8003b80 <HAL_RCC_OscConfig+0x8fc>)
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	461a      	mov	r2, r3
 80038fe:	2301      	movs	r3, #1
 8003900:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7fd f91f 	bl	8000b44 <HAL_GetTick>
 8003906:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390c:	f7fd f91a 	bl	8000b44 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d902      	bls.n	8003922 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	f000 bcfe 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
 8003922:	2302      	movs	r3, #2
 8003924:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003934:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003942:	2202      	movs	r2, #2
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	fa93 f2a3 	rbit	r2, r3
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003962:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003966:	2202      	movs	r2, #2
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	fa93 f2a3 	rbit	r2, r3
 8003978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003980:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003982:	4b7e      	ldr	r3, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x8f8>)
 8003984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800398e:	2102      	movs	r1, #2
 8003990:	6019      	str	r1, [r3, #0]
 8003992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003996:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f1a3 	rbit	r1, r3
 80039a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039a8:	6019      	str	r1, [r3, #0]
  return result;
 80039aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2101      	movs	r1, #1
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d09d      	beq.n	800390c <HAL_RCC_OscConfig+0x688>
 80039d0:	e08d      	b.n	8003aee <HAL_RCC_OscConfig+0x86a>
 80039d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fa93 f2a3 	rbit	r2, r3
 80039ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039f4:	601a      	str	r2, [r3, #0]
  return result;
 80039f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b5d      	ldr	r3, [pc, #372]	; (8003b80 <HAL_RCC_OscConfig+0x8fc>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7fd f896 	bl	8000b44 <HAL_GetTick>
 8003a18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fd f891 	bl	8000b44 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	f000 bc75 	b.w	800431e <HAL_RCC_OscConfig+0x109a>
 8003a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	fa93 f2a3 	rbit	r2, r3
 8003a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a60:	2202      	movs	r2, #2
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	fa93 f2a3 	rbit	r2, r3
 8003a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a84:	2202      	movs	r2, #2
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	fa93 f2a3 	rbit	r2, r3
 8003a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x8f8>)
 8003aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003aac:	2102      	movs	r1, #2
 8003aae:	6019      	str	r1, [r3, #0]
 8003ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	fa93 f1a3 	rbit	r1, r3
 8003abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ac6:	6019      	str	r1, [r3, #0]
  return result;
 8003ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003acc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d197      	bne.n	8003a1e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 81a5 	beq.w	8003e4e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_RCC_OscConfig+0x8f8>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d116      	bne.n	8003b44 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_OscConfig+0x8f8>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <HAL_RCC_OscConfig+0x8f8>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b20:	61d3      	str	r3, [r2, #28]
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <HAL_RCC_OscConfig+0x8f8>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_RCC_OscConfig+0x900>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d121      	bne.n	8003b94 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <HAL_RCC_OscConfig+0x900>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <HAL_RCC_OscConfig+0x900>)
 8003b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5c:	f7fc fff2 	bl	8000b44 <HAL_GetTick>
 8003b60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	e010      	b.n	8003b88 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fc ffed 	bl	8000b44 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d908      	bls.n	8003b88 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e3d1      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	10908120 	.word	0x10908120
 8003b84:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <HAL_RCC_OscConfig+0xb3c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0e8      	beq.n	8003b66 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x92e>
 8003ba4:	4b87      	ldr	r3, [pc, #540]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a86      	ldr	r2, [pc, #536]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e035      	b.n	8003c1e <HAL_RCC_OscConfig+0x99a>
 8003bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x958>
 8003bc2:	4b80      	ldr	r3, [pc, #512]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a7f      	ldr	r2, [pc, #508]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6213      	str	r3, [r2, #32]
 8003bce:	4b7d      	ldr	r3, [pc, #500]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6213      	str	r3, [r2, #32]
 8003bda:	e020      	b.n	8003c1e <HAL_RCC_OscConfig+0x99a>
 8003bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0x982>
 8003bec:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a74      	ldr	r2, [pc, #464]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a71      	ldr	r2, [pc, #452]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0x99a>
 8003c06:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a6b      	ldr	r2, [pc, #428]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8081 	beq.w	8003d32 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c30:	f7fc ff88 	bl	8000b44 <HAL_GetTick>
 8003c34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00b      	b.n	8003c52 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fc ff83 	bl	8000b44 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e365      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
 8003c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	fa93 f2a3 	rbit	r2, r3
 8003c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c7e:	2202      	movs	r2, #2
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	fa93 f2a3 	rbit	r2, r3
 8003c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c98:	601a      	str	r2, [r3, #0]
  return result;
 8003c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ca2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	fab3 f383 	clz	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f043 0302 	orr.w	r3, r3, #2
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d102      	bne.n	8003cbe <HAL_RCC_OscConfig+0xa3a>
 8003cb8:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	e013      	b.n	8003ce6 <HAL_RCC_OscConfig+0xa62>
 8003cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f2a3 	rbit	r2, r3
 8003cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cdc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cee:	2102      	movs	r1, #2
 8003cf0:	6011      	str	r1, [r2, #0]
 8003cf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	fa92 f1a2 	rbit	r1, r2
 8003d00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d04:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d08:	6011      	str	r1, [r2, #0]
  return result;
 8003d0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d0e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f002 021f 	and.w	r2, r2, #31
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d084      	beq.n	8003c3a <HAL_RCC_OscConfig+0x9b6>
 8003d30:	e083      	b.n	8003e3a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fc ff07 	bl	8000b44 <HAL_GetTick>
 8003d36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fc ff02 	bl	8000b44 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e2e4      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
 8003d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	fa93 f2a3 	rbit	r2, r3
 8003d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d80:	2202      	movs	r2, #2
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	fa93 f2a3 	rbit	r2, r3
 8003d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d9a:	601a      	str	r2, [r3, #0]
  return result;
 8003d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003da4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xb44>
 8003dba:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <HAL_RCC_OscConfig+0xb40>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	e017      	b.n	8003df0 <HAL_RCC_OscConfig+0xb6c>
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dcc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	4bb3      	ldr	r3, [pc, #716]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003df4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003df8:	2102      	movs	r1, #2
 8003dfa:	6011      	str	r1, [r2, #0]
 8003dfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	fa92 f1a2 	rbit	r1, r2
 8003e0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e0e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e12:	6011      	str	r1, [r2, #0]
  return result;
 8003e14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e18:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	fab2 f282 	clz	r2, r2
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	f002 021f 	and.w	r2, r2, #31
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f202 	lsl.w	r2, r1, r2
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d180      	bne.n	8003d3c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e3a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b9e      	ldr	r3, [pc, #632]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4a9d      	ldr	r2, [pc, #628]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 825e 	beq.w	800431c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e60:	4b96      	ldr	r3, [pc, #600]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	f000 821f 	beq.w	80042ac <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	f040 8170 	bne.w	8004160 <HAL_RCC_OscConfig+0xedc>
 8003e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e92:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	fa93 f2a3 	rbit	r2, r3
 8003e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ea4:	601a      	str	r2, [r3, #0]
  return result;
 8003ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eaa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003eae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fc fe3d 	bl	8000b44 <HAL_GetTick>
 8003eca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ece:	e009      	b.n	8003ee4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fc fe38 	bl	8000b44 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e21c      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
 8003ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f08:	601a      	str	r2, [r3, #0]
  return result;
 8003f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <HAL_RCC_OscConfig+0xcaa>
 8003f28:	4b64      	ldr	r3, [pc, #400]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	e027      	b.n	8003f7e <HAL_RCC_OscConfig+0xcfa>
 8003f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f32:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f40:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f66:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	fa93 f2a3 	rbit	r2, r3
 8003f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f74:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f82:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f90:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	fa92 f1a2 	rbit	r1, r2
 8003f9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f9e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003fa2:	6011      	str	r1, [r2, #0]
  return result;
 8003fa4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fa8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	fab2 f282 	clz	r2, r2
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f042 0220 	orr.w	r2, r2, #32
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	f002 021f 	and.w	r2, r2, #31
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d182      	bne.n	8003ed0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fca:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	4937      	ldr	r1, [pc, #220]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a19      	ldr	r1, [r3, #32]
 8003ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	430b      	orrs	r3, r1
 8004006:	492d      	ldr	r1, [pc, #180]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
 800400c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004010:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	fa93 f2a3 	rbit	r2, r3
 8004028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004030:	601a      	str	r2, [r3, #0]
  return result;
 8004032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004036:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800403a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	461a      	mov	r2, r3
 800404e:	2301      	movs	r3, #1
 8004050:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fc fd77 	bl	8000b44 <HAL_GetTick>
 8004056:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405a:	e009      	b.n	8004070 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7fc fd72 	bl	8000b44 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e156      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
 8004070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004074:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004082:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	fa93 f2a3 	rbit	r2, r3
 800408c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004090:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004094:	601a      	str	r2, [r3, #0]
  return result;
 8004096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800409e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <HAL_RCC_OscConfig+0xe3c>
 80040b4:	4b01      	ldr	r3, [pc, #4]	; (80040bc <HAL_RCC_OscConfig+0xe38>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	e02a      	b.n	8004110 <HAL_RCC_OscConfig+0xe8c>
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	fa93 f2a3 	rbit	r2, r3
 80040dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	fa93 f2a3 	rbit	r2, r3
 8004102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004106:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	4b86      	ldr	r3, [pc, #536]	; (8004328 <HAL_RCC_OscConfig+0x10a4>)
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004114:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004118:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004122:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	fa92 f1a2 	rbit	r1, r2
 800412c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004130:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004134:	6011      	str	r1, [r2, #0]
  return result;
 8004136:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800413a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	fab2 f282 	clz	r2, r2
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	f042 0220 	orr.w	r2, r2, #32
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	f002 021f 	and.w	r2, r2, #31
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	f43f af7f 	beq.w	800405c <HAL_RCC_OscConfig+0xdd8>
 800415e:	e0dd      	b.n	800431c <HAL_RCC_OscConfig+0x1098>
 8004160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004164:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800416c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004172:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	fa93 f2a3 	rbit	r2, r3
 800417c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004180:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004184:	601a      	str	r2, [r3, #0]
  return result;
 8004186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800418e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004190:	fab3 f383 	clz	r3, r3
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800419a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	461a      	mov	r2, r3
 80041a2:	2300      	movs	r3, #0
 80041a4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7fc fccd 	bl	8000b44 <HAL_GetTick>
 80041aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ae:	e009      	b.n	80041c4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fc fcc8 	bl	8000b44 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e0ac      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
 80041c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	fa93 f2a3 	rbit	r2, r3
 80041e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041e8:	601a      	str	r2, [r3, #0]
  return result;
 80041ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d102      	bne.n	800420e <HAL_RCC_OscConfig+0xf8a>
 8004208:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_OscConfig+0x10a4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	e027      	b.n	800425e <HAL_RCC_OscConfig+0xfda>
 800420e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004212:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800421a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004220:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	fa93 f2a3 	rbit	r2, r3
 800422a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004238:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800423c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004246:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f2a3 	rbit	r2, r3
 8004250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004254:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	4b33      	ldr	r3, [pc, #204]	; (8004328 <HAL_RCC_OscConfig+0x10a4>)
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004262:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004266:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800426a:	6011      	str	r1, [r2, #0]
 800426c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004270:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	fa92 f1a2 	rbit	r1, r2
 800427a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800427e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004282:	6011      	str	r1, [r2, #0]
  return result;
 8004284:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004288:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	fab2 f282 	clz	r2, r2
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f042 0220 	orr.w	r2, r2, #32
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f002 021f 	and.w	r2, r2, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d182      	bne.n	80041b0 <HAL_RCC_OscConfig+0xf2c>
 80042aa:	e037      	b.n	800431c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e02e      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_OscConfig+0x10a4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <HAL_RCC_OscConfig+0x10a4>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042d4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80042d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d117      	bne.n	8004318 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80042e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004304:	f003 020f 	and.w	r2, r3, #15
 8004308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000

0800432c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b09e      	sub	sp, #120	; 0x78
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e162      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b90      	ldr	r3, [pc, #576]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b8d      	ldr	r3, [pc, #564]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 0207 	bic.w	r2, r3, #7
 800435a:	498b      	ldr	r1, [pc, #556]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b89      	ldr	r3, [pc, #548]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e14a      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004380:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	497f      	ldr	r1, [pc, #508]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80dc 	beq.w	8004558 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d13c      	bne.n	8004422 <HAL_RCC_ClockConfig+0xf6>
 80043a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xa6>
 80043cc:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	e00f      	b.n	80043f2 <HAL_RCC_ClockConfig+0xc6>
 80043d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	667b      	str	r3, [r7, #100]	; 0x64
 80043e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e4:	663b      	str	r3, [r7, #96]	; 0x60
 80043e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ee:	4b67      	ldr	r3, [pc, #412]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043fa:	fa92 f2a2 	rbit	r2, r2
 80043fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004402:	fab2 f282 	clz	r2, r2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f002 021f 	and.w	r2, r2, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d17b      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0f3      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d13c      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x178>
 800442a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <HAL_RCC_ClockConfig+0x128>
 800444e:	4b4f      	ldr	r3, [pc, #316]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	e00f      	b.n	8004474 <HAL_RCC_ClockConfig+0x148>
 8004454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
 8004462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004466:	643b      	str	r3, [r7, #64]	; 0x40
 8004468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004470:	4b46      	ldr	r3, [pc, #280]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004478:	63ba      	str	r2, [r7, #56]	; 0x38
 800447a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800447c:	fa92 f2a2 	rbit	r2, r2
 8004480:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004484:	fab2 f282 	clz	r2, r2
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	f042 0220 	orr.w	r2, r2, #32
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	f002 021f 	and.w	r2, r2, #31
 8004494:	2101      	movs	r1, #1
 8004496:	fa01 f202 	lsl.w	r2, r1, r2
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d13a      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b2      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
 80044a4:	2302      	movs	r3, #2
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d102      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	e00d      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1bc>
 80044cc:	2302      	movs	r3, #2
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	2302      	movs	r3, #2
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2202      	movs	r2, #2
 80044ea:	61ba      	str	r2, [r7, #24]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	fa92 f2a2 	rbit	r2, r2
 80044f2:	617a      	str	r2, [r7, #20]
  return result;
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	fab2 f282 	clz	r2, r2
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f042 0220 	orr.w	r2, r2, #32
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	f002 021f 	and.w	r2, r2, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f202 	lsl.w	r2, r1, r2
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e079      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004516:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f023 0203 	bic.w	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	491a      	ldr	r1, [pc, #104]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004528:	f7fc fb0c 	bl	8000b44 <HAL_GetTick>
 800452c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	e00a      	b.n	8004546 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004530:	f7fc fb08 	bl	8000b44 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e061      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_RCC_ClockConfig+0x260>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 020c 	and.w	r2, r3, #12
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	429a      	cmp	r2, r3
 8004556:	d1eb      	bne.n	8004530 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d214      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 0207 	bic.w	r2, r3, #7
 800456e:	4906      	ldr	r1, [pc, #24]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HAL_RCC_ClockConfig+0x25c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e040      	b.n	800460a <HAL_RCC_ClockConfig+0x2de>
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	491a      	ldr	r1, [pc, #104]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4912      	ldr	r1, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045ce:	f000 f829 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045d2:	4601      	mov	r1, r0
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCC_ClockConfig+0x2e8>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	22f0      	movs	r2, #240	; 0xf0
 80045de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	fa92 f2a2 	rbit	r2, r2
 80045e6:	60fa      	str	r2, [r7, #12]
  return result;
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	fab2 f282 	clz	r2, r2
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	40d3      	lsrs	r3, r2
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x2ec>)
 80045f4:	5cd3      	ldrb	r3, [r2, r3]
 80045f6:	fa21 f303 	lsr.w	r3, r1, r3
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_RCC_ClockConfig+0x2f0>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_RCC_ClockConfig+0x2f4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fa5a 	bl	8000abc <HAL_InitTick>
  
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3778      	adds	r7, #120	; 0x78
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	08005518 	.word	0x08005518
 800461c:	20000004 	.word	0x20000004
 8004620:	20000008 	.word	0x20000008

08004624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b08b      	sub	sp, #44	; 0x2c
 8004628:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800463e:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x30>
 800464e:	2b08      	cmp	r3, #8
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x36>
 8004652:	e03f      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8004656:	623b      	str	r3, [r7, #32]
      break;
 8004658:	e03f      	b.n	80046da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004660:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004664:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	fa92 f2a2 	rbit	r2, r2
 800466c:	607a      	str	r2, [r7, #4]
  return result;
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	fab2 f282 	clz	r2, r2
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	40d3      	lsrs	r3, r2
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800467a:	5cd3      	ldrb	r3, [r2, r3]
 800467c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	220f      	movs	r2, #15
 8004688:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	fa92 f2a2 	rbit	r2, r2
 8004690:	60fa      	str	r2, [r7, #12]
  return result;
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	fab2 f282 	clz	r2, r2
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	40d3      	lsrs	r3, r2
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800469e:	5cd3      	ldrb	r3, [r2, r3]
 80046a0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046ac:	4a0f      	ldr	r2, [pc, #60]	; (80046ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
 80046bc:	e007      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	623b      	str	r3, [r7, #32]
      break;
 80046d2:	e002      	b.n	80046da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80046d6:	623b      	str	r3, [r7, #32]
      break;
 80046d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046da:	6a3b      	ldr	r3, [r7, #32]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	372c      	adds	r7, #44	; 0x2c
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40021000 	.word	0x40021000
 80046ec:	007a1200 	.word	0x007a1200
 80046f0:	08005528 	.word	0x08005528
 80046f4:	08005538 	.word	0x08005538

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b092      	sub	sp, #72	; 0x48
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80d4 	beq.w	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471c:	4b4e      	ldr	r3, [pc, #312]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10e      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004728:	4b4b      	ldr	r3, [pc, #300]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4a4a      	ldr	r2, [pc, #296]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	61d3      	str	r3, [r2, #28]
 8004734:	4b48      	ldr	r3, [pc, #288]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b45      	ldr	r3, [pc, #276]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a41      	ldr	r2, [pc, #260]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fc f9f1 	bl	8000b44 <HAL_GetTick>
 8004762:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e008      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fc f9ed 	bl	8000b44 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b64      	cmp	r3, #100	; 0x64
 8004772:	d901      	bls.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e1d6      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4b38      	ldr	r3, [pc, #224]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004784:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8084 	beq.w	800489e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d07c      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a4:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	461a      	mov	r2, r3
 80047ce:	2301      	movs	r3, #1
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047f6:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d04b      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004806:	f7fc f99d 	bl	8000b44 <HAL_GetTick>
 800480a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fc f999 	bl	8000b44 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e180      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004824:	2302      	movs	r3, #2
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	2302      	movs	r3, #2
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	61fb      	str	r3, [r7, #28]
  return result;
 800483c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d108      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004852:	4b01      	ldr	r3, [pc, #4]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	e00d      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
 8004860:	10908100 	.word	0x10908100
 8004864:	2302      	movs	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	4b9a      	ldr	r3, [pc, #616]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2202      	movs	r2, #2
 8004876:	613a      	str	r2, [r7, #16]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	fa92 f2a2 	rbit	r2, r2
 800487e:	60fa      	str	r2, [r7, #12]
  return result;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	fab2 f282 	clz	r2, r2
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	f002 021f 	and.w	r2, r2, #31
 8004892:	2101      	movs	r1, #1
 8004894:	fa01 f202 	lsl.w	r2, r1, r2
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0b7      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800489e:	4b8f      	ldr	r3, [pc, #572]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	498c      	ldr	r1, [pc, #560]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4a87      	ldr	r2, [pc, #540]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d0:	4b82      	ldr	r3, [pc, #520]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f023 0203 	bic.w	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	497f      	ldr	r1, [pc, #508]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ee:	4b7b      	ldr	r3, [pc, #492]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4978      	ldr	r1, [pc, #480]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800490c:	4b73      	ldr	r3, [pc, #460]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	4970      	ldr	r1, [pc, #448]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492a:	4b6c      	ldr	r3, [pc, #432]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f023 0210 	bic.w	r2, r3, #16
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4969      	ldr	r1, [pc, #420]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004948:	4b64      	ldr	r3, [pc, #400]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	4961      	ldr	r1, [pc, #388]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004966:	4b5d      	ldr	r3, [pc, #372]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f023 0220 	bic.w	r2, r3, #32
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	495a      	ldr	r1, [pc, #360]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004984:	4b55      	ldr	r3, [pc, #340]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	4952      	ldr	r1, [pc, #328]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049a2:	4b4e      	ldr	r3, [pc, #312]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	494b      	ldr	r1, [pc, #300]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049c0:	4b46      	ldr	r3, [pc, #280]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4943      	ldr	r1, [pc, #268]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049de:	4b3f      	ldr	r3, [pc, #252]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	493c      	ldr	r1, [pc, #240]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049fc:	4b37      	ldr	r3, [pc, #220]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	4934      	ldr	r1, [pc, #208]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a1a:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	492d      	ldr	r1, [pc, #180]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a38:	4b28      	ldr	r3, [pc, #160]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	4925      	ldr	r1, [pc, #148]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a56:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	491e      	ldr	r1, [pc, #120]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	4916      	ldr	r1, [pc, #88]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	490f      	ldr	r1, [pc, #60]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	4907      	ldr	r1, [pc, #28]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004ace:	4b03      	ldr	r3, [pc, #12]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	e002      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae2:	4913      	ldr	r1, [pc, #76]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b00:	490b      	ldr	r1, [pc, #44]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	4904      	ldr	r1, [pc, #16]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3748      	adds	r7, #72	; 0x48
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000

08004b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e049      	b.n	8004bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fb febc 	bl	80008d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fab6 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d001      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e04f      	b.n	8004c9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01d      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x76>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d018      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x76>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_TIM_Base_Start_IT+0xc8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x76>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x76>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x76>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIM_Base_Start_IT+0x76>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d115      	bne.n	8004c86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b06      	cmp	r3, #6
 8004c6a:	d015      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0xb4>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c72:	d011      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	e008      	b.n	8004c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e000      	b.n	8004c9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800
 8004cb4:	40013400 	.word	0x40013400
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40015000 	.word	0x40015000
 8004cc0:	00010007 	.word	0x00010007

08004cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0202 	mvn.w	r2, #2
 8004cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f9ce 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f9c0 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f9d1 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0204 	mvn.w	r2, #4
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9a4 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f996 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f9a7 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0208 	mvn.w	r2, #8
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f97a 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f96c 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f97d 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d122      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d11b      	bne.n	8004e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0210 	mvn.w	r2, #16
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2208      	movs	r2, #8
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f950 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f942 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f953 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10e      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d107      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0201 	mvn.w	r2, #1
 8004e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fb f9dc 	bl	8000200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d10e      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e60:	2b80      	cmp	r3, #128	; 0x80
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fb06 	bl	8005480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e82:	d10e      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b80      	cmp	r3, #128	; 0x80
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 faf9 	bl	8005494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d10e      	bne.n	8004ece <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f901 	bl	80050d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0220 	mvn.w	r2, #32
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fab9 	bl	800546c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_ConfigClockSource+0x1c>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e0b6      	b.n	800508c <HAL_TIM_ConfigClockSource+0x18a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5a:	d03e      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0xd8>
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	f200 8087 	bhi.w	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f68:	f000 8086 	beq.w	8005078 <HAL_TIM_ConfigClockSource+0x176>
 8004f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f70:	d87f      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004f72:	2b70      	cmp	r3, #112	; 0x70
 8004f74:	d01a      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0xaa>
 8004f76:	2b70      	cmp	r3, #112	; 0x70
 8004f78:	d87b      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004f7a:	2b60      	cmp	r3, #96	; 0x60
 8004f7c:	d050      	beq.n	8005020 <HAL_TIM_ConfigClockSource+0x11e>
 8004f7e:	2b60      	cmp	r3, #96	; 0x60
 8004f80:	d877      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004f82:	2b50      	cmp	r3, #80	; 0x50
 8004f84:	d03c      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xfe>
 8004f86:	2b50      	cmp	r3, #80	; 0x50
 8004f88:	d873      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d058      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x13e>
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d86f      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004f92:	2b30      	cmp	r3, #48	; 0x30
 8004f94:	d064      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15e>
 8004f96:	2b30      	cmp	r3, #48	; 0x30
 8004f98:	d86b      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d060      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15e>
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d867      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d05c      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15e>
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d05a      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15e>
 8004faa:	e062      	b.n	8005072 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6899      	ldr	r1, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f000 f9aa 	bl	8005314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]
      break;
 8004fd8:	e04f      	b.n	800507a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6899      	ldr	r1, [r3, #8]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f000 f993 	bl	8005314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e03c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	461a      	mov	r2, r3
 800500e:	f000 f907 	bl	8005220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2150      	movs	r1, #80	; 0x50
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f960 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 800501e:	e02c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	461a      	mov	r2, r3
 800502e:	f000 f926 	bl	800527e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2160      	movs	r1, #96	; 0x60
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f950 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 800503e:	e01c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	461a      	mov	r2, r3
 800504e:	f000 f8e7 	bl	8005220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2140      	movs	r1, #64	; 0x40
 8005058:	4618      	mov	r0, r3
 800505a:	f000 f940 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 800505e:	e00c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 f937 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8005070:	e003      	b.n	800507a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
      break;
 8005076:	e000      	b.n	800507a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005078:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a42      	ldr	r2, [pc, #264]	; (8005200 <TIM_Base_SetConfig+0x11c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005102:	d00f      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a3f      	ldr	r2, [pc, #252]	; (8005204 <TIM_Base_SetConfig+0x120>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3e      	ldr	r2, [pc, #248]	; (8005208 <TIM_Base_SetConfig+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3d      	ldr	r2, [pc, #244]	; (800520c <TIM_Base_SetConfig+0x128>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <TIM_Base_SetConfig+0x12c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a31      	ldr	r2, [pc, #196]	; (8005200 <TIM_Base_SetConfig+0x11c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d01b      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2e      	ldr	r2, [pc, #184]	; (8005204 <TIM_Base_SetConfig+0x120>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d017      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <TIM_Base_SetConfig+0x124>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2c      	ldr	r2, [pc, #176]	; (800520c <TIM_Base_SetConfig+0x128>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <TIM_Base_SetConfig+0x130>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <TIM_Base_SetConfig+0x134>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2a      	ldr	r2, [pc, #168]	; (800521c <TIM_Base_SetConfig+0x138>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a25      	ldr	r2, [pc, #148]	; (8005210 <TIM_Base_SetConfig+0x12c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <TIM_Base_SetConfig+0x11c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <TIM_Base_SetConfig+0x100>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <TIM_Base_SetConfig+0x128>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x100>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <TIM_Base_SetConfig+0x130>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x100>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <TIM_Base_SetConfig+0x134>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x100>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a11      	ldr	r2, [pc, #68]	; (800521c <TIM_Base_SetConfig+0x138>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x100>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <TIM_Base_SetConfig+0x12c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d103      	bne.n	80051ec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	615a      	str	r2, [r3, #20]
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40013400 	.word	0x40013400
 8005210:	40015000 	.word	0x40015000
 8005214:	40014000 	.word	0x40014000
 8005218:	40014400 	.word	0x40014400
 800521c:	40014800 	.word	0x40014800

08005220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0201 	bic.w	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 030a 	bic.w	r3, r3, #10
 800525c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800527e:	b480      	push	{r7}
 8005280:	b087      	sub	sp, #28
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0210 	bic.w	r2, r3, #16
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	031b      	lsls	r3, r3, #12
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f043 0307 	orr.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	431a      	orrs	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e06d      	b.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a30      	ldr	r2, [pc, #192]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2f      	ldr	r2, [pc, #188]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2d      	ldr	r2, [pc, #180]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01d      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e8:	d018      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1a      	ldr	r2, [pc, #104]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00e      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a16      	ldr	r2, [pc, #88]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a11      	ldr	r2, [pc, #68]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10c      	bne.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40015000 	.word	0x40015000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40014000 	.word	0x40014000

0800546c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4d0d      	ldr	r5, [pc, #52]	; (80054e0 <__libc_init_array+0x38>)
 80054ac:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054ae:	1b64      	subs	r4, r4, r5
 80054b0:	10a4      	asrs	r4, r4, #2
 80054b2:	2600      	movs	r6, #0
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	4d0b      	ldr	r5, [pc, #44]	; (80054e8 <__libc_init_array+0x40>)
 80054ba:	4c0c      	ldr	r4, [pc, #48]	; (80054ec <__libc_init_array+0x44>)
 80054bc:	f000 f820 	bl	8005500 <_init>
 80054c0:	1b64      	subs	r4, r4, r5
 80054c2:	10a4      	asrs	r4, r4, #2
 80054c4:	2600      	movs	r6, #0
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08005548 	.word	0x08005548
 80054e4:	08005548 	.word	0x08005548
 80054e8:	08005548 	.word	0x08005548
 80054ec:	0800554c 	.word	0x0800554c

080054f0 <memset>:
 80054f0:	4402      	add	r2, r0
 80054f2:	4603      	mov	r3, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
