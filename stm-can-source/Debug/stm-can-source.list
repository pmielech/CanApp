
stm-can-source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bdc  08005bdc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005bdc  08005bdc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bdc  08005bdc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000027c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd02  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219d  00000000  00000000  0002fd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00031ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  00032d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213a2  00000000  00000000  00033a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011281  00000000  00000000  00054dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d000c  00000000  00000000  0006604b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136057  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b9c  00000000  00000000  001360a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005b94 	.word	0x08005b94

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005b94 	.word	0x08005b94

080001d4 <ucHeartbeat_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t ucHeartbeat_message(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	heartbeat[0] = 0;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <ucHeartbeat_message+0x1c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	701a      	strb	r2, [r3, #0]
	return HAL_CAN_AddTxMessage(&hcan, &heartbeat_msgTxHeader, heartbeat, &TxMailbox);
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <ucHeartbeat_message+0x20>)
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <ucHeartbeat_message+0x1c>)
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <ucHeartbeat_message+0x24>)
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <ucHeartbeat_message+0x28>)
 80001e6:	f002 faf4 	bl	80027d2 <HAL_CAN_AddTxMessage>
 80001ea:	4603      	mov	r3, r0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000280 	.word	0x20000280
 80001f4:	20000268 	.word	0x20000268
 80001f8:	20000250 	.word	0x20000250
 80001fc:	200000c0 	.word	0x200000c0

08000200 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4a08      	ldr	r2, [pc, #32]	; (800022c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800020c:	4293      	cmp	r3, r2
 800020e:	d109      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x24>
	  can_status += ucHeartbeat_message();
 8000210:	f7ff ffe0 	bl	80001d4 <ucHeartbeat_message>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4413      	add	r3, r2
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000222:	701a      	strb	r2, [r3, #0]
  }

}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000180 	.word	0x20000180
 8000230:	2000027c 	.word	0x2000027c

08000234 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	;

}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <HAL_CAN_RxFifo1FullCallback>:

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]

	;
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr

0800025c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	can_status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000264:	4b32      	ldr	r3, [pc, #200]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000266:	4a33      	ldr	r2, [pc, #204]	; (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000268:	2100      	movs	r1, #0
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f002 fb81 	bl	8002972 <HAL_CAN_GetRxMessage>
 8000270:	4603      	mov	r3, r0
 8000272:	461a      	mov	r2, r3
 8000274:	4b30      	ldr	r3, [pc, #192]	; (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000276:	701a      	strb	r2, [r3, #0]

	switch(RxHeader.StdId){
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000280:	d011      	beq.n	80002a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8000282:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000286:	d810      	bhi.n	80002aa <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
 8000288:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 800028c:	d002      	beq.n	8000294 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 800028e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400

	case 0x500:
		break;

	default:
		break;
 8000292:	e00a      	b.n	80002aa <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, RxData[0]);
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	2120      	movs	r1, #32
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f003 fb22 	bl	80038e8 <HAL_GPIO_WritePin>
		break;
 80002a4:	e002      	b.n	80002ac <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		break;
 80002a6:	bf00      	nop
 80002a8:	e000      	b.n	80002ac <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		break;
 80002aa:	bf00      	nop

	}

	TxHeader.DLC = RxHeader.DLC;
 80002ac:	4b21      	ldr	r3, [pc, #132]	; (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	4a22      	ldr	r2, [pc, #136]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80002b2:	6113      	str	r3, [r2, #16]
	TxHeader.ExtId = 0;
 80002b4:	4b21      	ldr	r3, [pc, #132]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80002ba:	4b20      	ldr	r3, [pc, #128]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = RxHeader.StdId + nodeId;
 80002c6:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80002cc:	7812      	ldrb	r2, [r2, #0]
 80002ce:	4413      	add	r3, r2
 80002d0:	4a1a      	ldr	r2, [pc, #104]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80002d2:	6013      	str	r3, [r2, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	751a      	strb	r2, [r3, #20]
	for(int i=0; i < TxHeader.DLC; i++){
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e00b      	b.n	80002f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
		TxData[i] = RxData[i];
 80002e0:	4a13      	ldr	r2, [pc, #76]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	4413      	add	r3, r2
 80002e6:	7819      	ldrb	r1, [r3, #0]
 80002e8:	4a16      	ldr	r2, [pc, #88]	; (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	4413      	add	r3, r2
 80002ee:	460a      	mov	r2, r1
 80002f0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < TxHeader.DLC; i++){
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3301      	adds	r3, #1
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80002fa:	691a      	ldr	r2, [r3, #16]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d8ee      	bhi.n	80002e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
	}
	can_status += HAL_CAN_AddTxMessage(hcan, &TxHeader, &TxData[0], &TxMailbox);
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f002 fa62 	bl	80027d2 <HAL_CAN_AddTxMessage>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4413      	add	r3, r2
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800031c:	701a      	strb	r2, [r3, #0]
	memset(RxData, 0, 8);
 800031e:	2208      	movs	r2, #8
 8000320:	2100      	movs	r1, #0
 8000322:	4803      	ldr	r0, [pc, #12]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000324:	f005 fc2e 	bl	8005b84 <memset>

}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000274 	.word	0x20000274
 8000334:	20000234 	.word	0x20000234
 8000338:	2000027c 	.word	0x2000027c
 800033c:	2000021c 	.word	0x2000021c
 8000340:	20000000 	.word	0x20000000
 8000344:	2000026c 	.word	0x2000026c
 8000348:	20000268 	.word	0x20000268

0800034c <vCan_messages_init>:

void vCan_messages_init(){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

	heartbeat_msgTxHeader.DLC = 0x00;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <vCan_messages_init+0x60>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
	heartbeat_msgTxHeader.ExtId = 0;
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <vCan_messages_init+0x60>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
	heartbeat_msgTxHeader.IDE = CAN_ID_STD;
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <vCan_messages_init+0x60>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
	heartbeat_msgTxHeader.RTR = CAN_RTR_DATA;
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <vCan_messages_init+0x60>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
	heartbeat_msgTxHeader.StdId = 0x400 + nodeId;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <vCan_messages_init+0x64>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000370:	461a      	mov	r2, r3
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <vCan_messages_init+0x60>)
 8000374:	601a      	str	r2, [r3, #0]
	heartbeat_msgTxHeader.TransmitGlobalTime = DISABLE;
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <vCan_messages_init+0x60>)
 8000378:	2200      	movs	r2, #0
 800037a:	751a      	strb	r2, [r3, #20]

	TxHeader.DLC = 0x00;
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <vCan_messages_init+0x68>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <vCan_messages_init+0x68>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <vCan_messages_init+0x68>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <vCan_messages_init+0x68>)
 8000390:	2200      	movs	r2, #0
 8000392:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x00;
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <vCan_messages_init+0x68>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <vCan_messages_init+0x68>)
 800039c:	2200      	movs	r2, #0
 800039e:	751a      	strb	r2, [r3, #20]

}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000250 	.word	0x20000250
 80003b0:	20000000 	.word	0x20000000
 80003b4:	2000021c 	.word	0x2000021c

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 fc4a 	bl	8000c54 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f840 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 fa50 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c8:	f000 fa30 	bl	800082c <MX_DMA_Init>
  MX_CAN_Init();
 80003cc:	f000 f914 	bl	80005f8 <MX_CAN_Init>
  MX_TIM16_Init();
 80003d0:	f000 fa04 	bl	80007dc <MX_TIM16_Init>
  MX_ADC1_Init();
 80003d4:	f000 f89e 	bl	8000514 <MX_ADC1_Init>
  MX_TIM3_Init();
 80003d8:	f000 f960 	bl	800069c <MX_TIM3_Init>
  MX_TIM15_Init();
 80003dc:	f000 f9ac 	bl	8000738 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  can_status += HAL_CAN_Start(&hcan);
 80003e0:	4812      	ldr	r0, [pc, #72]	; (800042c <main+0x74>)
 80003e2:	f002 f9b2 	bl	800274a <HAL_CAN_Start>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <main+0x78>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4413      	add	r3, r2
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <main+0x78>)
 80003f4:	701a      	strb	r2, [r3, #0]
  can_status += HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003f6:	2102      	movs	r1, #2
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <main+0x74>)
 80003fa:	f002 fbdc 	bl	8002bb6 <HAL_CAN_ActivateNotification>
 80003fe:	4603      	mov	r3, r0
 8000400:	461a      	mov	r2, r3
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <main+0x78>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4413      	add	r3, r2
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <main+0x78>)
 800040c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 800040e:	4809      	ldr	r0, [pc, #36]	; (8000434 <main+0x7c>)
 8000410:	f004 ff32 	bl	8005278 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8000414:	4808      	ldr	r0, [pc, #32]	; (8000438 <main+0x80>)
 8000416:	f004 ff2f 	bl	8005278 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, ADC_SAMPLES * 2 * 2);
 800041a:	2228      	movs	r2, #40	; 0x28
 800041c:	4907      	ldr	r1, [pc, #28]	; (800043c <main+0x84>)
 800041e:	4808      	ldr	r0, [pc, #32]	; (8000440 <main+0x88>)
 8000420:	f000 fe96 	bl	8001150 <HAL_ADC_Start_DMA>

  vCan_messages_init();
 8000424:	f7ff ff92 	bl	800034c <vCan_messages_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000428:	e7fe      	b.n	8000428 <main+0x70>
 800042a:	bf00      	nop
 800042c:	200000c0 	.word	0x200000c0
 8000430:	2000027c 	.word	0x2000027c
 8000434:	20000180 	.word	0x20000180
 8000438:	20000134 	.word	0x20000134
 800043c:	200001cc 	.word	0x200001cc
 8000440:	2000002c 	.word	0x2000002c

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b0a6      	sub	sp, #152	; 0x98
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f005 fb96 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2258      	movs	r2, #88	; 0x58
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f005 fb88 	bl	8005b84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000474:	2302      	movs	r3, #2
 8000476:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047c:	2310      	movs	r3, #16
 800047e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800048c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000490:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 fa38 	bl	8003918 <HAL_RCC_OscConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ae:	f000 fa0b 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
 80004b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b6:	2302      	movs	r3, #2
 80004b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004cc:	2102      	movs	r1, #2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 fa76 	bl	80049c0 <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004da:	f000 f9f5 	bl	80008c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <SystemClock_Config+0xcc>)
 80004e0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80004e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f004 fc48 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000502:	f000 f9e1 	bl	80008c8 <Error_Handler>
  }
}
 8000506:	bf00      	nop
 8000508:	3798      	adds	r7, #152	; 0x98
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	00e00080 	.word	0x00e00080

08000514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
 8000534:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000536:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000544:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <MX_ADC1_Init+0xe0>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000552:	2201      	movs	r2, #1
 8000554:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000556:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000568:	f44f 7260 	mov.w	r2, #896	; 0x380
 800056c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000576:	2201      	movs	r2, #1
 8000578:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <MX_ADC1_Init+0xe0>)
 800057c:	2201      	movs	r2, #1
 800057e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000584:	2204      	movs	r2, #4
 8000586:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_ADC1_Init+0xe0>)
 800058a:	2200      	movs	r2, #0
 800058c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000590:	2200      	movs	r2, #0
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4817      	ldr	r0, [pc, #92]	; (80005f4 <MX_ADC1_Init+0xe0>)
 8000596:	f000 fbe1 	bl	8000d5c <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005a0:	f000 f992 	bl	80008c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4619      	mov	r1, r3
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <MX_ADC1_Init+0xe0>)
 80005b0:	f001 fce4 	bl	8001f7c <HAL_ADCEx_MultiModeConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80005ba:	f000 f985 	bl	80008c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005be:	2310      	movs	r3, #16
 80005c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80005ca:	2307      	movs	r3, #7
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <MX_ADC1_Init+0xe0>)
 80005dc:	f001 f9e2 	bl	80019a4 <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80005e6:	f000 f96f 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_CAN_Init+0x9c>)
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <MX_CAN_Init+0xa0>)
 8000602:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <MX_CAN_Init+0x9c>)
 8000606:	2212      	movs	r2, #18
 8000608:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_CAN_Init+0x9c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_CAN_Init+0x9c>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_CAN_Init+0x9c>)
 8000618:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_CAN_Init+0x9c>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_CAN_Init+0x9c>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_CAN_Init+0x9c>)
 800062c:	2200      	movs	r2, #0
 800062e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_CAN_Init+0x9c>)
 8000632:	2200      	movs	r2, #0
 8000634:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_CAN_Init+0x9c>)
 8000638:	2200      	movs	r2, #0
 800063a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_CAN_Init+0x9c>)
 800063e:	2200      	movs	r2, #0
 8000640:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_CAN_Init+0x9c>)
 8000644:	2200      	movs	r2, #0
 8000646:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <MX_CAN_Init+0x9c>)
 800064a:	f001 feb9 	bl	80023c0 <HAL_CAN_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000654:	f000 f938 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef can_filter_config;

  can_filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  can_filter_config.FilterBank = 10;
 800065c:	230a      	movs	r3, #10
 800065e:	617b      	str	r3, [r7, #20]
  can_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  can_filter_config.FilterIdHigh = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
  can_filter_config.FilterIdLow = 0x0000;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
  can_filter_config.FilterMaskIdHigh = 0;			// decides which bits in id should be compared
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  can_filter_config.FilterMaskIdLow = 0x0000;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  can_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  can_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  can_filter_config.SlaveStartFilterBank = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &can_filter_config);
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <MX_CAN_Init+0x9c>)
 8000686:	f001 ff96 	bl	80025b6 <HAL_CAN_ConfigFilter>



  /* USER CODE END CAN_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000c0 	.word	0x200000c0
 8000698:	40006400 	.word	0x40006400

0800069c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_TIM3_Init+0x94>)
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <MX_TIM3_Init+0x98>)
 80006be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_TIM3_Init+0x94>)
 80006c2:	2247      	movs	r2, #71	; 0x47
 80006c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_TIM3_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_TIM3_Init+0x94>)
 80006ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_TIM3_Init+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_TIM3_Init+0x94>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <MX_TIM3_Init+0x94>)
 80006e2:	f004 fd71 	bl	80051c8 <HAL_TIM_Base_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006ec:	f000 f8ec 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_TIM3_Init+0x94>)
 80006fe:	f004 ff4a 	bl	8005596 <HAL_TIM_ConfigClockSource>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000708:	f000 f8de 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800070c:	2320      	movs	r3, #32
 800070e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_TIM3_Init+0x94>)
 800071a:	f005 f965 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000724:	f000 f8d0 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000e8 	.word	0x200000e8
 8000734:	40000400 	.word	0x40000400

08000738 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_TIM15_Init+0x9c>)
 8000758:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <MX_TIM15_Init+0xa0>)
 800075a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2000;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_TIM15_Init+0x9c>)
 800075e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000762:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_TIM15_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 36000;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM15_Init+0x9c>)
 800076c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000770:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM15_Init+0x9c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_TIM15_Init+0x9c>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM15_Init+0x9c>)
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <MX_TIM15_Init+0x9c>)
 8000786:	f004 fd1f 	bl	80051c8 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8000790:	f000 f89a 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_TIM15_Init+0x9c>)
 80007a2:	f004 fef8 	bl	8005596 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80007ac:	f000 f88c 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_TIM15_Init+0x9c>)
 80007be:	f005 f913 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80007c8:	f000 f87e 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000134 	.word	0x20000134
 80007d8:	40014000 	.word	0x40014000

080007dc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_TIM16_Init+0x48>)
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <MX_TIM16_Init+0x4c>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6000-1;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_TIM16_Init+0x48>)
 80007e8:	f241 726f 	movw	r2, #5999	; 0x176f
 80007ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_TIM16_Init+0x48>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6000-1;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_TIM16_Init+0x48>)
 80007f6:	f241 726f 	movw	r2, #5999	; 0x176f
 80007fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_TIM16_Init+0x48>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_TIM16_Init+0x48>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_TIM16_Init+0x48>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_TIM16_Init+0x48>)
 8000810:	f004 fcda 	bl	80051c8 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800081a:	f000 f855 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000180 	.word	0x20000180
 8000828:	40014400 	.word	0x40014400

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_DMA_Init+0x38>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <MX_DMA_Init+0x38>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_DMA_Init+0x38>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	200b      	movs	r0, #11
 8000850:	f002 fcd7 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000854:	200b      	movs	r0, #11
 8000856:	f002 fcf0 	bl	800323a <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x5c>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <MX_GPIO_Init+0x5c>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000886:	6153      	str	r3, [r2, #20]
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_GPIO_Init+0x5c>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2120      	movs	r1, #32
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f003 f824 	bl	80038e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTERNAL_LED_Pin */
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f002 fe8c 	bl	80035d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x44>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800092c:	d13b      	bne.n	80009a6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_ADC_MspInit+0x94>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <HAL_ADC_MspInit+0x94>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <HAL_ADC_MspInit+0x94>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <HAL_ADC_MspInit+0x9c>)
 800094a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 8000960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000964:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 8000968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 8000970:	2220      	movs	r2, #32
 8000972:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 800097c:	f002 fc77 	bl	800326e <HAL_DMA_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000986:	f7ff ff9f 	bl	80008c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 800098e:	639a      	str	r2, [r3, #56]	; 0x38
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_ADC_MspInit+0x98>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2012      	movs	r0, #18
 800099c:	f002 fc31 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80009a0:	2012      	movs	r0, #18
 80009a2:	f002 fc4a 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	2000007c 	.word	0x2000007c
 80009b8:	40020008 	.word	0x40020008

080009bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <HAL_CAN_MspInit+0xb0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d141      	bne.n	8000a62 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <HAL_CAN_MspInit+0xb4>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_CAN_MspInit+0xb4>)
 80009e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_CAN_MspInit+0xb4>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <HAL_CAN_MspInit+0xb4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_CAN_MspInit+0xb4>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_CAN_MspInit+0xb4>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a20:	2309      	movs	r3, #9
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f002 fdd1 	bl	80035d4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2014      	movs	r0, #20
 8000a38:	f002 fbe3 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000a3c:	2014      	movs	r0, #20
 8000a3e:	f002 fbfc 	bl	800323a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2015      	movs	r0, #21
 8000a48:	f002 fbdb 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000a4c:	2015      	movs	r0, #21
 8000a4e:	f002 fbf4 	bl	800323a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2016      	movs	r0, #22
 8000a58:	f002 fbd3 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000a5c:	2016      	movs	r0, #22
 8000a5e:	f002 fbec 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40006400 	.word	0x40006400
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <HAL_TIM_Base_MspInit+0x8c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10c      	bne.n	8000aa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a9e:	e02a      	b.n	8000af6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <HAL_TIM_Base_MspInit+0x94>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
}
 8000ac2:	e018      	b.n	8000af6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_TIM_Base_MspInit+0x98>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d113      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_TIM_Base_MspInit+0x90>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2019      	movs	r0, #25
 8000aec:	f002 fb89 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000af0:	2019      	movs	r0, #25
 8000af2:	f002 fba2 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40000400 	.word	0x40000400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40014000 	.word	0x40014000
 8000b0c:	40014400 	.word	0x40014400

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f8c0 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <DMA1_Channel1_IRQHandler+0x10>)
 8000b6a:	f002 fc26 	bl	80033ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000007c 	.word	0x2000007c

08000b78 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <ADC1_2_IRQHandler+0x10>)
 8000b7e:	f000 fc03 	bl	8001388 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000002c 	.word	0x2000002c

08000b8c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000b92:	f002 f836 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000c0 	.word	0x200000c0

08000ba0 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <CAN_RX1_IRQHandler+0x10>)
 8000ba6:	f002 f82c 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000c0 	.word	0x200000c0

08000bb4 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <CAN_SCE_IRQHandler+0x10>)
 8000bba:	f002 f822 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000c0 	.word	0x200000c0

08000bc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bce:	f004 fbc3 	bl	8005358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000180 	.word	0x20000180

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f004 ff85 	bl	8005b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fbc1 	bl	80003b8 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c44:	08005be4 	.word	0x08005be4
  ldr r2, =_sbss
 8000c48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c4c:	2000028c 	.word	0x2000028c

08000c50 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC3_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x28>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x28>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f002 fac1 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fe30 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fad9 	bl	8003256 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f002 faa1 	bl	8003202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	2000000c 	.word	0x2000000c
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2000000c 	.word	0x2000000c
 8000d04:	20000288 	.word	0x20000288

08000d08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000288 	.word	0x20000288

08000d20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b09a      	sub	sp, #104	; 0x68
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e1e3      	b.n	8001144 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d176      	bne.n	8000e7c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d152      	bne.n	8000e3c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fdb3 	bl	800091c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d13b      	bne.n	8000e3c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f001 fa95 	bl	80022f4 <ADC_Disable>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d12f      	bne.n	8000e3c <HAL_ADC_Init+0xe0>
 8000ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d12b      	bne.n	8000e3c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dec:	f023 0302 	bic.w	r3, r3, #2
 8000df0:	f043 0202 	orr.w	r2, r3, #2
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e06:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e16:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e18:	4b92      	ldr	r3, [pc, #584]	; (8001064 <HAL_ADC_Init+0x308>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a92      	ldr	r2, [pc, #584]	; (8001068 <HAL_ADC_Init+0x30c>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	0c9a      	lsrs	r2, r3, #18
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e2e:	e002      	b.n	8000e36 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f9      	bne.n	8000e30 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e58:	d110      	bne.n	8000e7c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f023 0312 	bic.w	r3, r3, #18
 8000e62:	f043 0210 	orr.w	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f043 0201 	orr.w	r2, r3, #1
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f040 8150 	bne.w	800112a <HAL_ADC_Init+0x3ce>
 8000e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 814b 	bne.w	800112a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 8143 	bne.w	800112a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000eac:	f043 0202 	orr.w	r2, r3, #2
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ebc:	d004      	beq.n	8000ec8 <HAL_ADC_Init+0x16c>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a6a      	ldr	r2, [pc, #424]	; (800106c <HAL_ADC_Init+0x310>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d101      	bne.n	8000ecc <HAL_ADC_Init+0x170>
 8000ec8:	4b69      	ldr	r3, [pc, #420]	; (8001070 <HAL_ADC_Init+0x314>)
 8000eca:	e000      	b.n	8000ece <HAL_ADC_Init+0x172>
 8000ecc:	4b69      	ldr	r3, [pc, #420]	; (8001074 <HAL_ADC_Init+0x318>)
 8000ece:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed8:	d102      	bne.n	8000ee0 <HAL_ADC_Init+0x184>
 8000eda:	4b64      	ldr	r3, [pc, #400]	; (800106c <HAL_ADC_Init+0x310>)
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e01a      	b.n	8000f16 <HAL_ADC_Init+0x1ba>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a61      	ldr	r2, [pc, #388]	; (800106c <HAL_ADC_Init+0x310>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d103      	bne.n	8000ef2 <HAL_ADC_Init+0x196>
 8000eea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	e011      	b.n	8000f16 <HAL_ADC_Init+0x1ba>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a60      	ldr	r2, [pc, #384]	; (8001078 <HAL_ADC_Init+0x31c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d102      	bne.n	8000f02 <HAL_ADC_Init+0x1a6>
 8000efc:	4b5f      	ldr	r3, [pc, #380]	; (800107c <HAL_ADC_Init+0x320>)
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e009      	b.n	8000f16 <HAL_ADC_Init+0x1ba>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a5d      	ldr	r2, [pc, #372]	; (800107c <HAL_ADC_Init+0x320>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d102      	bne.n	8000f12 <HAL_ADC_Init+0x1b6>
 8000f0c:	4b5a      	ldr	r3, [pc, #360]	; (8001078 <HAL_ADC_Init+0x31c>)
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e001      	b.n	8000f16 <HAL_ADC_Init+0x1ba>
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <HAL_ADC_Init+0x1da>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_Init+0x1da>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f36:	2300      	movs	r3, #0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d11c      	bne.n	8000f76 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d010      	beq.n	8000f64 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d107      	bne.n	8000f5e <HAL_ADC_Init+0x202>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x202>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_ADC_Init+0x204>
 8000f5e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d108      	bne.n	8000f76 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f74:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7e5b      	ldrb	r3, [r3, #25]
 8000f7a:	035b      	lsls	r3, r3, #13
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f80:	2a01      	cmp	r2, #1
 8000f82:	d002      	beq.n	8000f8a <HAL_ADC_Init+0x22e>
 8000f84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f88:	e000      	b.n	8000f8c <HAL_ADC_Init+0x230>
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d11b      	bne.n	8000fe2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7e5b      	ldrb	r3, [r3, #25]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	045a      	lsls	r2, r3, #17
 8000fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8000fc4:	e00d      	b.n	8000fe2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fce:	f043 0220 	orr.w	r2, r3, #32
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f043 0201 	orr.w	r2, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d054      	beq.n	8001094 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_ADC_Init+0x31c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d004      	beq.n	8000ffe <HAL_ADC_Init+0x2a2>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a20      	ldr	r2, [pc, #128]	; (800107c <HAL_ADC_Init+0x320>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d140      	bne.n	8001080 <HAL_ADC_Init+0x324>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001006:	d02a      	beq.n	800105e <HAL_ADC_Init+0x302>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001010:	d022      	beq.n	8001058 <HAL_ADC_Init+0x2fc>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800101a:	d01a      	beq.n	8001052 <HAL_ADC_Init+0x2f6>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001024:	d012      	beq.n	800104c <HAL_ADC_Init+0x2f0>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800102e:	d00a      	beq.n	8001046 <HAL_ADC_Init+0x2ea>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001038:	d002      	beq.n	8001040 <HAL_ADC_Init+0x2e4>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	e023      	b.n	8001088 <HAL_ADC_Init+0x32c>
 8001040:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001044:	e020      	b.n	8001088 <HAL_ADC_Init+0x32c>
 8001046:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800104a:	e01d      	b.n	8001088 <HAL_ADC_Init+0x32c>
 800104c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001050:	e01a      	b.n	8001088 <HAL_ADC_Init+0x32c>
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	e017      	b.n	8001088 <HAL_ADC_Init+0x32c>
 8001058:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800105c:	e014      	b.n	8001088 <HAL_ADC_Init+0x32c>
 800105e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001062:	e011      	b.n	8001088 <HAL_ADC_Init+0x32c>
 8001064:	20000004 	.word	0x20000004
 8001068:	431bde83 	.word	0x431bde83
 800106c:	50000100 	.word	0x50000100
 8001070:	50000300 	.word	0x50000300
 8001074:	50000700 	.word	0x50000700
 8001078:	50000400 	.word	0x50000400
 800107c:	50000500 	.word	0x50000500
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800108c:	4313      	orrs	r3, r2
 800108e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001090:	4313      	orrs	r3, r2
 8001092:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d114      	bne.n	80010cc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010b0:	f023 0302 	bic.w	r3, r3, #2
 80010b4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7e1b      	ldrb	r3, [r3, #24]
 80010ba:	039a      	lsls	r2, r3, #14
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4313      	orrs	r3, r2
 80010c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010c8:	4313      	orrs	r3, r2
 80010ca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_ADC_Init+0x3f0>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010dc:	430b      	orrs	r3, r1
 80010de:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10c      	bne.n	8001102 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f023 010f 	bic.w	r1, r3, #15
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	1e5a      	subs	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001100:	e007      	b.n	8001112 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 020f 	bic.w	r2, r2, #15
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f023 0303 	bic.w	r3, r3, #3
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
 8001128:	e00a      	b.n	8001140 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f023 0312 	bic.w	r3, r3, #18
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800113a:	2301      	movs	r3, #1
 800113c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001140:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001144:	4618      	mov	r0, r3
 8001146:	3768      	adds	r7, #104	; 0x68
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	fff0c007 	.word	0xfff0c007

08001150 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 80f7 	bne.w	800135e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_ADC_Start_DMA+0x2e>
 800117a:	2302      	movs	r3, #2
 800117c:	e0f2      	b.n	8001364 <HAL_ADC_Start_DMA+0x214>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118e:	d004      	beq.n	800119a <HAL_ADC_Start_DMA+0x4a>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a75      	ldr	r2, [pc, #468]	; (800136c <HAL_ADC_Start_DMA+0x21c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d109      	bne.n	80011ae <HAL_ADC_Start_DMA+0x5e>
 800119a:	4b75      	ldr	r3, [pc, #468]	; (8001370 <HAL_ADC_Start_DMA+0x220>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	e008      	b.n	80011c0 <HAL_ADC_Start_DMA+0x70>
 80011ae:	4b71      	ldr	r3, [pc, #452]	; (8001374 <HAL_ADC_Start_DMA+0x224>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf0c      	ite	eq
 80011ba:	2301      	moveq	r3, #1
 80011bc:	2300      	movne	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80c5 	beq.w	8001350 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f001 f830 	bl	800222c <ADC_Enable>
 80011cc:	4603      	mov	r3, r0
 80011ce:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 80b7 	bne.w	8001346 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f4:	d004      	beq.n	8001200 <HAL_ADC_Start_DMA+0xb0>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a5c      	ldr	r2, [pc, #368]	; (800136c <HAL_ADC_Start_DMA+0x21c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d106      	bne.n	800120e <HAL_ADC_Start_DMA+0xbe>
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_ADC_Start_DMA+0x220>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	2b00      	cmp	r3, #0
 800120a:	d010      	beq.n	800122e <HAL_ADC_Start_DMA+0xde>
 800120c:	e005      	b.n	800121a <HAL_ADC_Start_DMA+0xca>
 800120e:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_ADC_Start_DMA+0x224>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <HAL_ADC_Start_DMA+0xde>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001222:	d004      	beq.n	800122e <HAL_ADC_Start_DMA+0xde>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a53      	ldr	r2, [pc, #332]	; (8001378 <HAL_ADC_Start_DMA+0x228>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d115      	bne.n	800125a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d036      	beq.n	80012b6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001250:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001258:	e02d      	b.n	80012b6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800126e:	d004      	beq.n	800127a <HAL_ADC_Start_DMA+0x12a>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a3d      	ldr	r2, [pc, #244]	; (800136c <HAL_ADC_Start_DMA+0x21c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10a      	bne.n	8001290 <HAL_ADC_Start_DMA+0x140>
 800127a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e008      	b.n	80012a2 <HAL_ADC_Start_DMA+0x152>
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <HAL_ADC_Start_DMA+0x228>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf14      	ite	ne
 800129c:	2301      	movne	r3, #1
 800129e:	2300      	moveq	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c2:	d106      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f023 0206 	bic.w	r2, r3, #6
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	645a      	str	r2, [r3, #68]	; 0x44
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e4:	4a25      	ldr	r2, [pc, #148]	; (800137c <HAL_ADC_Start_DMA+0x22c>)
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	4a24      	ldr	r2, [pc, #144]	; (8001380 <HAL_ADC_Start_DMA+0x230>)
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	4a23      	ldr	r2, [pc, #140]	; (8001384 <HAL_ADC_Start_DMA+0x234>)
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	221c      	movs	r2, #28
 80012fe:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0210 	orr.w	r2, r2, #16
 800130e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3340      	adds	r3, #64	; 0x40
 800132a:	4619      	mov	r1, r3
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f001 ffe4 	bl	80032fc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0204 	orr.w	r2, r2, #4
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	e00d      	b.n	8001362 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800134e:	e008      	b.n	8001362 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800135c:	e001      	b.n	8001362 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800135e:	2302      	movs	r3, #2
 8001360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	50000100 	.word	0x50000100
 8001370:	50000300 	.word	0x50000300
 8001374:	50000700 	.word	0x50000700
 8001378:	50000400 	.word	0x50000400
 800137c:	08002161 	.word	0x08002161
 8001380:	080021db 	.word	0x080021db
 8001384:	080021f7 	.word	0x080021f7

08001388 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x38>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10b      	bne.n	80013d8 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80bc 	beq.w	8001544 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80b6 	beq.w	8001544 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f8:	d004      	beq.n	8001404 <HAL_ADC_IRQHandler+0x7c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a90      	ldr	r2, [pc, #576]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d106      	bne.n	8001412 <HAL_ADC_IRQHandler+0x8a>
 8001404:	4b8f      	ldr	r3, [pc, #572]	; (8001644 <HAL_ADC_IRQHandler+0x2bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2b00      	cmp	r3, #0
 800140e:	d03e      	beq.n	800148e <HAL_ADC_IRQHandler+0x106>
 8001410:	e005      	b.n	800141e <HAL_ADC_IRQHandler+0x96>
 8001412:	4b8d      	ldr	r3, [pc, #564]	; (8001648 <HAL_ADC_IRQHandler+0x2c0>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b00      	cmp	r3, #0
 800141c:	d037      	beq.n	800148e <HAL_ADC_IRQHandler+0x106>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001426:	d004      	beq.n	8001432 <HAL_ADC_IRQHandler+0xaa>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a84      	ldr	r2, [pc, #528]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d106      	bne.n	8001440 <HAL_ADC_IRQHandler+0xb8>
 8001432:	4b84      	ldr	r3, [pc, #528]	; (8001644 <HAL_ADC_IRQHandler+0x2bc>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2b05      	cmp	r3, #5
 800143c:	d027      	beq.n	800148e <HAL_ADC_IRQHandler+0x106>
 800143e:	e005      	b.n	800144c <HAL_ADC_IRQHandler+0xc4>
 8001440:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_ADC_IRQHandler+0x2c0>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	2b05      	cmp	r3, #5
 800144a:	d020      	beq.n	800148e <HAL_ADC_IRQHandler+0x106>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001454:	d004      	beq.n	8001460 <HAL_ADC_IRQHandler+0xd8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a79      	ldr	r2, [pc, #484]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d106      	bne.n	800146e <HAL_ADC_IRQHandler+0xe6>
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <HAL_ADC_IRQHandler+0x2bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	2b09      	cmp	r3, #9
 800146a:	d010      	beq.n	800148e <HAL_ADC_IRQHandler+0x106>
 800146c:	e005      	b.n	800147a <HAL_ADC_IRQHandler+0xf2>
 800146e:	4b76      	ldr	r3, [pc, #472]	; (8001648 <HAL_ADC_IRQHandler+0x2c0>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2b09      	cmp	r3, #9
 8001478:	d009      	beq.n	800148e <HAL_ADC_IRQHandler+0x106>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001482:	d004      	beq.n	800148e <HAL_ADC_IRQHandler+0x106>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a70      	ldr	r2, [pc, #448]	; (800164c <HAL_ADC_IRQHandler+0x2c4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d104      	bne.n	8001498 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	e00f      	b.n	80014b8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a0:	d004      	beq.n	80014ac <HAL_ADC_IRQHandler+0x124>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d102      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x12a>
 80014ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014b0:	e000      	b.n	80014b4 <HAL_ADC_IRQHandler+0x12c>
 80014b2:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_ADC_IRQHandler+0x2c4>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d137      	bne.n	8001536 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d132      	bne.n	8001536 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d02d      	beq.n	8001536 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11a      	bne.n	800151e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 020c 	bic.w	r2, r2, #12
 80014f6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d112      	bne.n	8001536 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
 800151c:	e00b      	b.n	8001536 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f043 0210 	orr.w	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe fe7c 	bl	8000234 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	220c      	movs	r2, #12
 8001542:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f003 0320 	and.w	r3, r3, #32
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <HAL_ADC_IRQHandler+0x1d0>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10b      	bne.n	8001570 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8138 	beq.w	80017d4 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8132 	beq.w	80017d4 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001584:	d004      	beq.n	8001590 <HAL_ADC_IRQHandler+0x208>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d106      	bne.n	800159e <HAL_ADC_IRQHandler+0x216>
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <HAL_ADC_IRQHandler+0x2bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03e      	beq.n	800161a <HAL_ADC_IRQHandler+0x292>
 800159c:	e005      	b.n	80015aa <HAL_ADC_IRQHandler+0x222>
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_ADC_IRQHandler+0x2c0>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d037      	beq.n	800161a <HAL_ADC_IRQHandler+0x292>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b2:	d004      	beq.n	80015be <HAL_ADC_IRQHandler+0x236>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d106      	bne.n	80015cc <HAL_ADC_IRQHandler+0x244>
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_ADC_IRQHandler+0x2bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d027      	beq.n	800161a <HAL_ADC_IRQHandler+0x292>
 80015ca:	e005      	b.n	80015d8 <HAL_ADC_IRQHandler+0x250>
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_ADC_IRQHandler+0x2c0>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d020      	beq.n	800161a <HAL_ADC_IRQHandler+0x292>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e0:	d004      	beq.n	80015ec <HAL_ADC_IRQHandler+0x264>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_IRQHandler+0x272>
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_ADC_IRQHandler+0x2bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d010      	beq.n	800161a <HAL_ADC_IRQHandler+0x292>
 80015f8:	e005      	b.n	8001606 <HAL_ADC_IRQHandler+0x27e>
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_ADC_IRQHandler+0x2c0>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2b09      	cmp	r3, #9
 8001604:	d009      	beq.n	800161a <HAL_ADC_IRQHandler+0x292>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800160e:	d004      	beq.n	800161a <HAL_ADC_IRQHandler+0x292>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_ADC_IRQHandler+0x2c4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d104      	bne.n	8001624 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	e018      	b.n	8001656 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800162c:	d004      	beq.n	8001638 <HAL_ADC_IRQHandler+0x2b0>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a03      	ldr	r2, [pc, #12]	; (8001640 <HAL_ADC_IRQHandler+0x2b8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_IRQHandler+0x2c8>
 8001638:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800163c:	e009      	b.n	8001652 <HAL_ADC_IRQHandler+0x2ca>
 800163e:	bf00      	nop
 8001640:	50000100 	.word	0x50000100
 8001644:	50000300 	.word	0x50000300
 8001648:	50000700 	.word	0x50000700
 800164c:	50000400 	.word	0x50000400
 8001650:	4b92      	ldr	r3, [pc, #584]	; (800189c <HAL_ADC_IRQHandler+0x514>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 80b0 	bne.w	80017c6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00d      	beq.n	800168c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80a3 	bne.w	80017c6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 809d 	bne.w	80017c6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8097 	beq.w	80017c6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a0:	d004      	beq.n	80016ac <HAL_ADC_IRQHandler+0x324>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7e      	ldr	r2, [pc, #504]	; (80018a0 <HAL_ADC_IRQHandler+0x518>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d106      	bne.n	80016ba <HAL_ADC_IRQHandler+0x332>
 80016ac:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_ADC_IRQHandler+0x51c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03e      	beq.n	8001736 <HAL_ADC_IRQHandler+0x3ae>
 80016b8:	e005      	b.n	80016c6 <HAL_ADC_IRQHandler+0x33e>
 80016ba:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <HAL_ADC_IRQHandler+0x520>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d037      	beq.n	8001736 <HAL_ADC_IRQHandler+0x3ae>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ce:	d004      	beq.n	80016da <HAL_ADC_IRQHandler+0x352>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a72      	ldr	r2, [pc, #456]	; (80018a0 <HAL_ADC_IRQHandler+0x518>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d106      	bne.n	80016e8 <HAL_ADC_IRQHandler+0x360>
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <HAL_ADC_IRQHandler+0x51c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d027      	beq.n	8001736 <HAL_ADC_IRQHandler+0x3ae>
 80016e6:	e005      	b.n	80016f4 <HAL_ADC_IRQHandler+0x36c>
 80016e8:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_ADC_IRQHandler+0x520>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d020      	beq.n	8001736 <HAL_ADC_IRQHandler+0x3ae>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fc:	d004      	beq.n	8001708 <HAL_ADC_IRQHandler+0x380>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a67      	ldr	r2, [pc, #412]	; (80018a0 <HAL_ADC_IRQHandler+0x518>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d106      	bne.n	8001716 <HAL_ADC_IRQHandler+0x38e>
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_ADC_IRQHandler+0x51c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2b07      	cmp	r3, #7
 8001712:	d010      	beq.n	8001736 <HAL_ADC_IRQHandler+0x3ae>
 8001714:	e005      	b.n	8001722 <HAL_ADC_IRQHandler+0x39a>
 8001716:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <HAL_ADC_IRQHandler+0x520>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	2b07      	cmp	r3, #7
 8001720:	d009      	beq.n	8001736 <HAL_ADC_IRQHandler+0x3ae>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172a:	d004      	beq.n	8001736 <HAL_ADC_IRQHandler+0x3ae>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5a      	ldr	r2, [pc, #360]	; (800189c <HAL_ADC_IRQHandler+0x514>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d104      	bne.n	8001740 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e00f      	b.n	8001760 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001748:	d004      	beq.n	8001754 <HAL_ADC_IRQHandler+0x3cc>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <HAL_ADC_IRQHandler+0x518>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <HAL_ADC_IRQHandler+0x3d2>
 8001754:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001758:	e000      	b.n	800175c <HAL_ADC_IRQHandler+0x3d4>
 800175a:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_ADC_IRQHandler+0x514>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d12d      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d11a      	bne.n	80017ae <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001786:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d112      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
 80017ac:	e00b      	b.n	80017c6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f043 0210 	orr.w	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f8c4 	bl	8001954 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2260      	movs	r2, #96	; 0x60
 80017d2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d011      	beq.n	8001802 <HAL_ADC_IRQHandler+0x47a>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00c      	beq.n	8001802 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fa9d 	bl	8000d34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d012      	beq.n	8001832 <HAL_ADC_IRQHandler+0x4aa>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8aa 	bl	800197c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001838:	2b00      	cmp	r3, #0
 800183a:	d012      	beq.n	8001862 <HAL_ADC_IRQHandler+0x4da>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f89c 	bl	8001990 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001860:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b00      	cmp	r3, #0
 800186a:	d04f      	beq.n	800190c <HAL_ADC_IRQHandler+0x584>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d04a      	beq.n	800190c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800187e:	2301      	movs	r3, #1
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e02d      	b.n	80018e0 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800188c:	d004      	beq.n	8001898 <HAL_ADC_IRQHandler+0x510>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a03      	ldr	r2, [pc, #12]	; (80018a0 <HAL_ADC_IRQHandler+0x518>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d109      	bne.n	80018ac <HAL_ADC_IRQHandler+0x524>
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_ADC_IRQHandler+0x51c>)
 800189a:	e008      	b.n	80018ae <HAL_ADC_IRQHandler+0x526>
 800189c:	50000400 	.word	0x50000400
 80018a0:	50000100 	.word	0x50000100
 80018a4:	50000300 	.word	0x50000300
 80018a8:	50000700 	.word	0x50000700
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_ADC_IRQHandler+0x5c8>)
 80018ae:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10a      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80018ca:	2301      	movs	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e007      	b.n	80018e0 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10e      	bne.n	8001904 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f043 0202 	orr.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fa22 	bl	8000d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2210      	movs	r2, #16
 800190a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001912:	2b00      	cmp	r3, #0
 8001914:	d018      	beq.n	8001948 <HAL_ADC_IRQHandler+0x5c0>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f043 0208 	orr.w	r2, r3, #8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001940:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f810 	bl	8001968 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	50000700 	.word	0x50000700

08001954 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b09b      	sub	sp, #108	; 0x6c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x22>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e2ca      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x5b8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 82ae 	bne.w	8001f3a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d81c      	bhi.n	8001a20 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	461a      	mov	r2, r3
 80019fa:	231f      	movs	r3, #31
 80019fc:	4093      	lsls	r3, r2
 80019fe:	43db      	mvns	r3, r3
 8001a00:	4019      	ands	r1, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1e:	e063      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d81e      	bhi.n	8001a66 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	3b1e      	subs	r3, #30
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4019      	ands	r1, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	3b1e      	subs	r3, #30
 8001a58:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
 8001a64:	e040      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b0e      	cmp	r3, #14
 8001a6c:	d81e      	bhi.n	8001aac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	3b3c      	subs	r3, #60	; 0x3c
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4019      	ands	r1, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	3b3c      	subs	r3, #60	; 0x3c
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8001aaa:	e01d      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	3b5a      	subs	r3, #90	; 0x5a
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	4019      	ands	r1, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	3b5a      	subs	r3, #90	; 0x5a
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80e5 	bne.w	8001cc2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d91c      	bls.n	8001b3a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6999      	ldr	r1, [r3, #24]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b1e      	subs	r3, #30
 8001b12:	2207      	movs	r2, #7
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4019      	ands	r1, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6898      	ldr	r0, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	619a      	str	r2, [r3, #24]
 8001b38:	e019      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6959      	ldr	r1, [r3, #20]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4019      	ands	r1, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6898      	ldr	r0, [r3, #8]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d84f      	bhi.n	8001c30 <HAL_ADC_ConfigChannel+0x28c>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001bcb 	.word	0x08001bcb
 8001ba0:	08001bed 	.word	0x08001bed
 8001ba4:	08001c0f 	.word	0x08001c0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bae:	4b9a      	ldr	r3, [pc, #616]	; (8001e18 <HAL_ADC_ConfigChannel+0x474>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	0691      	lsls	r1, r2, #26
 8001bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bc6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bc8:	e07e      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bd0:	4b91      	ldr	r3, [pc, #580]	; (8001e18 <HAL_ADC_ConfigChannel+0x474>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	0691      	lsls	r1, r2, #26
 8001bda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001be8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bea:	e06d      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <HAL_ADC_ConfigChannel+0x474>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	0691      	lsls	r1, r2, #26
 8001bfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c0a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c0c:	e05c      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c14:	4b80      	ldr	r3, [pc, #512]	; (8001e18 <HAL_ADC_ConfigChannel+0x474>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	0691      	lsls	r1, r2, #26
 8001c1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c20:	430a      	orrs	r2, r1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c2c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c2e:	e04b      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	069b      	lsls	r3, r3, #26
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c52:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	069b      	lsls	r3, r3, #26
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c76:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c9a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10a      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cbe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001cc0:	e001      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001cc2:	bf00      	nop
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001cc6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x344>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x344>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_ConfigChannel+0x346>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 8130 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d00f      	beq.n	8001d18 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	400a      	ands	r2, r1
 8001d12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d16:	e049      	b.n	8001dac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	409a      	lsls	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b09      	cmp	r3, #9
 8001d38:	d91c      	bls.n	8001d74 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6999      	ldr	r1, [r3, #24]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b1b      	subs	r3, #27
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	4019      	ands	r1, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6898      	ldr	r0, [r3, #8]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	3b1b      	subs	r3, #27
 8001d66:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	e01b      	b.n	8001dac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6959      	ldr	r1, [r3, #20]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	2207      	movs	r2, #7
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4019      	ands	r1, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6898      	ldr	r0, [r3, #8]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	fa00 f203 	lsl.w	r2, r0, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db4:	d004      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0x41c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <HAL_ADC_ConfigChannel+0x478>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x420>
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_ADC_ConfigChannel+0x47c>)
 8001dc2:	e000      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x422>
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_ADC_ConfigChannel+0x480>)
 8001dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d015      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	f040 80ab 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 80a4 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e10:	d10a      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x484>
 8001e12:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_ADC_ConfigChannel+0x478>)
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e022      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x4ba>
 8001e18:	83fff000 	.word	0x83fff000
 8001e1c:	50000100 	.word	0x50000100
 8001e20:	50000300 	.word	0x50000300
 8001e24:	50000700 	.word	0x50000700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <HAL_ADC_ConfigChannel+0x5c4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d103      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x496>
 8001e32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e011      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x4ba>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x4a6>
 8001e44:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e009      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x4ba>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d102      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x4b6>
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e001      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x4ba>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d108      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x4da>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x4da>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x4dc>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d150      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x502>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x502>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x504>
 8001ea6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d13c      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d11d      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x54c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ebc:	d118      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_ADC_ConfigChannel+0x5d4>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	0c9a      	lsrs	r2, r3, #18
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee0:	e002      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f9      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eee:	e02e      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b11      	cmp	r3, #17
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x56c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f0e:	e01e      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	d11a      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f22:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f24:	e013      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0220 	orr.w	r2, r3, #32
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f38:	e00a      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f4c:	e000      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f4e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	376c      	adds	r7, #108	; 0x6c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	50000100 	.word	0x50000100
 8001f6c:	50000400 	.word	0x50000400
 8001f70:	50000500 	.word	0x50000500
 8001f74:	20000004 	.word	0x20000004
 8001f78:	431bde83 	.word	0x431bde83

08001f7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b099      	sub	sp, #100	; 0x64
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f94:	d102      	bne.n	8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f96:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	e01a      	b.n	8001fd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	; (800214c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d103      	bne.n	8001fae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001fa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	e011      	b.n	8001fd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a67      	ldr	r2, [pc, #412]	; (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d102      	bne.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	e009      	b.n	8001fd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a64      	ldr	r2, [pc, #400]	; (8002154 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d102      	bne.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001fc8:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e001      	b.n	8001fd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0b0      	b.n	800213e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e0a9      	b.n	800213e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f040 808d 	bne.w	800211c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 8086 	bne.w	800211c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002018:	d004      	beq.n	8002024 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002026:	e000      	b.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800202a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d040      	beq.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002046:	035b      	lsls	r3, r3, #13
 8002048:	430b      	orrs	r3, r1
 800204a:	431a      	orrs	r2, r3
 800204c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800204e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d15c      	bne.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002092:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d14b      	bne.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020a0:	f023 030f 	bic.w	r3, r3, #15
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	6811      	ldr	r1, [r2, #0]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	6892      	ldr	r2, [r2, #8]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b4:	e03c      	b.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d123      	bne.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002104:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d112      	bne.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800210a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002112:	f023 030f 	bic.w	r3, r3, #15
 8002116:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002118:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800211a:	e009      	b.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800212e:	e000      	b.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002130:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800213a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800213e:	4618      	mov	r0, r3
 8002140:	3764      	adds	r7, #100	; 0x64
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	50000100 	.word	0x50000100
 8002150:	50000400 	.word	0x50000400
 8002154:	50000500 	.word	0x50000500
 8002158:	50000300 	.word	0x50000300
 800215c:	50000700 	.word	0x50000700

08002160 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002176:	2b00      	cmp	r3, #0
 8002178:	d126      	bne.n	80021c8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002190:	2b00      	cmp	r3, #0
 8002192:	d115      	bne.n	80021c0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002198:	2b00      	cmp	r3, #0
 800219a:	d111      	bne.n	80021c0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7fe f837 	bl	8000234 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021c6:	e004      	b.n	80021d2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7fe fd99 	bl	8000d20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f043 0204 	orr.w	r2, r3, #4
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f7fe fd93 	bl	8000d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d108      	bne.n	8002258 <ADC_Enable+0x2c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <ADC_Enable+0x2c>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <ADC_Enable+0x2e>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d143      	bne.n	80022e6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <ADC_Enable+0xc4>)
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00d      	beq.n	8002288 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f043 0210 	orr.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e02f      	b.n	80022e8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002298:	f7fe fd36 	bl	8000d08 <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229e:	e01b      	b.n	80022d8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022a0:	f7fe fd32 	bl	8000d08 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d914      	bls.n	80022d8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d00d      	beq.n	80022d8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d1dc      	bne.n	80022a0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	8000003f 	.word	0x8000003f

080022f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d108      	bne.n	8002320 <ADC_Disable+0x2c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <ADC_Disable+0x2c>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <ADC_Disable+0x2e>
 8002320:	2300      	movs	r3, #0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d047      	beq.n	80023b6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030d 	and.w	r3, r3, #13
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10f      	bne.n	8002354 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0202 	orr.w	r2, r2, #2
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2203      	movs	r2, #3
 800234a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800234c:	f7fe fcdc 	bl	8000d08 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002352:	e029      	b.n	80023a8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e023      	b.n	80023b8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002370:	f7fe fcca 	bl	8000d08 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d914      	bls.n	80023a8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10d      	bne.n	80023a8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f043 0210 	orr.w	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e007      	b.n	80023b8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d0dc      	beq.n	8002370 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0ed      	b.n	80025ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe faec 	bl	80009bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f4:	f7fe fc88 	bl	8000d08 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023fa:	e012      	b.n	8002422 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023fc:	f7fe fc84 	bl	8000d08 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b0a      	cmp	r3, #10
 8002408:	d90b      	bls.n	8002422 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2205      	movs	r2, #5
 800241a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0c5      	b.n	80025ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0e5      	beq.n	80023fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0202 	bic.w	r2, r2, #2
 800243e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7fe fc62 	bl	8000d08 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002446:	e012      	b.n	800246e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002448:	f7fe fc5e 	bl	8000d08 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d90b      	bls.n	800246e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e09f      	b.n	80025ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e5      	bne.n	8002448 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d108      	bne.n	8002496 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e007      	b.n	80024a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7e5b      	ldrb	r3, [r3, #25]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d108      	bne.n	80024c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e007      	b.n	80024d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7e9b      	ldrb	r3, [r3, #26]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d108      	bne.n	80024ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e007      	b.n	80024fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0220 	bic.w	r2, r2, #32
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7edb      	ldrb	r3, [r3, #27]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0210 	bic.w	r2, r2, #16
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e007      	b.n	8002524 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0210 	orr.w	r2, r2, #16
 8002522:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7f1b      	ldrb	r3, [r3, #28]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d108      	bne.n	800253e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0208 	orr.w	r2, r2, #8
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e007      	b.n	800254e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0208 	bic.w	r2, r2, #8
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7f5b      	ldrb	r3, [r3, #29]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0204 	orr.w	r2, r2, #4
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	ea42 0103 	orr.w	r1, r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025cc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d003      	beq.n	80025dc <HAL_CAN_ConfigFilter+0x26>
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80aa 	bne.w	8002730 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2201      	movs	r2, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d123      	bne.n	800265e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	401a      	ands	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002638:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3248      	adds	r2, #72	; 0x48
 800263e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002652:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	3348      	adds	r3, #72	; 0x48
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d122      	bne.n	80026ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002686:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3248      	adds	r2, #72	; 0x48
 800268c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a2:	6979      	ldr	r1, [r7, #20]
 80026a4:	3348      	adds	r3, #72	; 0x48
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026c6:	e007      	b.n	80026d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026f2:	e007      	b.n	8002704 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d107      	bne.n	800271c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	431a      	orrs	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002722:	f023 0201 	bic.w	r2, r3, #1
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e006      	b.n	800273e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d12e      	bne.n	80027bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002776:	f7fe fac7 	bl	8000d08 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800277c:	e012      	b.n	80027a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800277e:	f7fe fac3 	bl	8000d08 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b0a      	cmp	r3, #10
 800278a:	d90b      	bls.n	80027a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2205      	movs	r2, #5
 800279c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e012      	b.n	80027ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e5      	bne.n	800277e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e006      	b.n	80027ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b089      	sub	sp, #36	; 0x24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027f0:	7ffb      	ldrb	r3, [r7, #31]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d003      	beq.n	80027fe <HAL_CAN_AddTxMessage+0x2c>
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f040 80ad 	bne.w	8002958 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8095 	beq.w	8002948 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	0e1b      	lsrs	r3, r3, #24
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002828:	2201      	movs	r2, #1
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	409a      	lsls	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	6809      	ldr	r1, [r1, #0]
 8002848:	431a      	orrs	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3318      	adds	r3, #24
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	440b      	add	r3, r1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e00f      	b.n	8002876 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002860:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800286a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3318      	adds	r3, #24
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	440b      	add	r3, r1
 8002874:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3318      	adds	r3, #24
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	440b      	add	r3, r1
 8002886:	3304      	adds	r3, #4
 8002888:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	7d1b      	ldrb	r3, [r3, #20]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d111      	bne.n	80028b6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3318      	adds	r3, #24
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	4413      	add	r3, r2
 800289e:	3304      	adds	r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	6811      	ldr	r1, [r2, #0]
 80028a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3318      	adds	r3, #24
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	440b      	add	r3, r1
 80028b2:	3304      	adds	r3, #4
 80028b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3307      	adds	r3, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	061a      	lsls	r2, r3, #24
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3306      	adds	r3, #6
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3305      	adds	r3, #5
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4313      	orrs	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	3204      	adds	r2, #4
 80028d6:	7812      	ldrb	r2, [r2, #0]
 80028d8:	4610      	mov	r0, r2
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6811      	ldr	r1, [r2, #0]
 80028de:	ea43 0200 	orr.w	r2, r3, r0
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80028ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3303      	adds	r3, #3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	061a      	lsls	r2, r3, #24
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3302      	adds	r3, #2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3301      	adds	r3, #1
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	4313      	orrs	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	4610      	mov	r0, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	6811      	ldr	r1, [r2, #0]
 8002914:	ea43 0200 	orr.w	r2, r3, r0
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	440b      	add	r3, r1
 800291e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002922:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3318      	adds	r3, #24
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4413      	add	r3, r2
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	6811      	ldr	r1, [r2, #0]
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3318      	adds	r3, #24
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	440b      	add	r3, r1
 8002942:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e00e      	b.n	8002966 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e006      	b.n	8002966 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002972:	b480      	push	{r7}
 8002974:	b087      	sub	sp, #28
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002986:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d003      	beq.n	8002996 <HAL_CAN_GetRxMessage+0x24>
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b02      	cmp	r3, #2
 8002992:	f040 8103 	bne.w	8002b9c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10e      	bne.n	80029ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d116      	bne.n	80029d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0f7      	b.n	8002baa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0e8      	b.n	8002baa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	331b      	adds	r3, #27
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0204 	and.w	r2, r3, #4
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	331b      	adds	r3, #27
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	4413      	add	r3, r2
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0d5b      	lsrs	r3, r3, #21
 8002a06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	331b      	adds	r3, #27
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	08db      	lsrs	r3, r3, #3
 8002a20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	331b      	adds	r3, #27
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	4413      	add	r3, r2
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0202 	and.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	331b      	adds	r3, #27
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	611a      	str	r2, [r3, #16]
 8002a5c:	e00b      	b.n	8002a76 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	331b      	adds	r3, #27
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 020f 	and.w	r2, r3, #15
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	331b      	adds	r3, #27
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	4413      	add	r3, r2
 8002a82:	3304      	adds	r3, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	331b      	adds	r3, #27
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0a1a      	lsrs	r2, r3, #8
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0c1a      	lsrs	r2, r3, #16
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	3302      	adds	r3, #2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e1a      	lsrs	r2, r3, #24
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	3303      	adds	r3, #3
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0a1a      	lsrs	r2, r3, #8
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3305      	adds	r3, #5
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0c1a      	lsrs	r2, r3, #16
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	3306      	adds	r3, #6
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e1a      	lsrs	r2, r3, #24
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	3307      	adds	r3, #7
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0220 	orr.w	r2, r2, #32
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	e007      	b.n	8002b98 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0220 	orr.w	r2, r2, #32
 8002b96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e006      	b.n	8002baa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d002      	beq.n	8002bd4 <HAL_CAN_ActivateNotification+0x1e>
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d109      	bne.n	8002be8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6959      	ldr	r1, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e006      	b.n	8002bf6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07c      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f983 	bl	8002f70 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c6a:	e016      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7e:	e00c      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e002      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f989 	bl	8002fac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d024      	beq.n	8002cee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f963 	bl	8002f84 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cbe:	e016      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e00c      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	e002      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f969 	bl	8002fc0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d024      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f943 	bl	8002f98 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d12:	e016      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	e00c      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	e002      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f949 	bl	8002fd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2210      	movs	r2, #16
 8002d64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f930 	bl	8002fe8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fd fa5b 	bl	800025c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2208      	movs	r2, #8
 8002de4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fa2e 	bl	8000248 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8f9 	bl	8002ffc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8f2 	bl	8003010 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2208      	movs	r2, #8
 8002e46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f8eb 	bl	8003024 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d07b      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d072      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d043      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03e      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d02b      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x32a>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d82e      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d022      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x320>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d82a      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d019      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x316>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d826      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ee8:	2b30      	cmp	r3, #48	; 0x30
 8002eea:	d010      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x30c>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d822      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d002      	beq.n	8002efa <HAL_CAN_IRQHandler+0x2f8>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d005      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ef8:	e01d      	b.n	8002f36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f02:	e019      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f0c:	e014      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f16:	e00f      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f20:	e00a      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f2a:	e005      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f34:	e000      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f868 	bl	8003038 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003068:	4013      	ands	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307e:	4a04      	ldr	r2, [pc, #16]	; (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	60d3      	str	r3, [r2, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <__NVIC_GetPriorityGrouping+0x18>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0307 	and.w	r3, r3, #7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	db0b      	blt.n	80030da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 021f 	and.w	r2, r3, #31
 80030c8:	4907      	ldr	r1, [pc, #28]	; (80030e8 <__NVIC_EnableIRQ+0x38>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	fa00 f202 	lsl.w	r2, r0, r2
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	; (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	; (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b8:	d301      	bcc.n	80031be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00f      	b.n	80031de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <SysTick_Config+0x40>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c6:	210f      	movs	r1, #15
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031cc:	f7ff ff8e 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SysTick_Config+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <SysTick_Config+0x40>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff29 	bl	800304c <__NVIC_SetPriorityGrouping>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003214:	f7ff ff3e 	bl	8003094 <__NVIC_GetPriorityGrouping>
 8003218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff8e 	bl	8003140 <NVIC_EncodePriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff5d 	bl	80030ec <__NVIC_SetPriority>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff31 	bl	80030b0 <__NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffa2 	bl	80031a8 <SysTick_Config>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e037      	b.n	80032f4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800329a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800329e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f940 	bl	800355c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}  
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_DMA_Start_IT+0x20>
 8003318:	2302      	movs	r3, #2
 800331a:	e04a      	b.n	80033b2 <HAL_DMA_Start_IT+0xb6>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800332a:	2b01      	cmp	r3, #1
 800332c:	d13a      	bne.n	80033a4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8d4 	bl	8003500 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 020e 	orr.w	r2, r2, #14
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e00f      	b.n	8003392 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 020a 	orr.w	r2, r2, #10
 8003380:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0204 	bic.w	r2, r2, #4
 8003390:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e005      	b.n	80033b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2204      	movs	r2, #4
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d024      	beq.n	800342c <HAL_DMA_IRQHandler+0x72>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01f      	beq.n	800342c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0204 	bic.w	r2, r2, #4
 8003408:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2104      	movs	r1, #4
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d06a      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800342a:	e065      	b.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2202      	movs	r2, #2
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02c      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdc>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d027      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 020a 	bic.w	r2, r2, #10
 8003462:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	2102      	movs	r1, #2
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d035      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003494:	e030      	b.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2208      	movs	r2, #8
 800349c:	409a      	lsls	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d028      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 020e 	bic.w	r2, r2, #14
 80034be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f202 	lsl.w	r2, r1, r2
 80034ce:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
    }
  }
}  
 80034f6:	e7ff      	b.n	80034f8 <HAL_DMA_IRQHandler+0x13e>
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b10      	cmp	r3, #16
 800352c:	d108      	bne.n	8003540 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800353e:	e007      	b.n	8003550 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <DMA_CalcBaseAndBitshift+0x60>)
 800356c:	429a      	cmp	r2, r3
 800356e:	d80f      	bhi.n	8003590 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <DMA_CalcBaseAndBitshift+0x64>)
 8003578:	4413      	add	r3, r2
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <DMA_CalcBaseAndBitshift+0x68>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	009a      	lsls	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a0f      	ldr	r2, [pc, #60]	; (80035c8 <DMA_CalcBaseAndBitshift+0x6c>)
 800358c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800358e:	e00e      	b.n	80035ae <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <DMA_CalcBaseAndBitshift+0x70>)
 8003598:	4413      	add	r3, r2
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <DMA_CalcBaseAndBitshift+0x68>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	009a      	lsls	r2, r3, #2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <DMA_CalcBaseAndBitshift+0x74>)
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40020407 	.word	0x40020407
 80035c0:	bffdfff8 	.word	0xbffdfff8
 80035c4:	cccccccd 	.word	0xcccccccd
 80035c8:	40020000 	.word	0x40020000
 80035cc:	bffdfbf8 	.word	0xbffdfbf8
 80035d0:	40020400 	.word	0x40020400

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e2:	e160      	b.n	80038a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8152 	beq.w	80038a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d005      	beq.n	8003614 <HAL_GPIO_Init+0x40>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d130      	bne.n	8003676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364a:	2201      	movs	r2, #1
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f003 0201 	and.w	r2, r3, #1
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b03      	cmp	r3, #3
 8003680:	d017      	beq.n	80036b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	2203      	movs	r2, #3
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d123      	bne.n	8003706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	08da      	lsrs	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	08da      	lsrs	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3208      	adds	r2, #8
 8003700:	6939      	ldr	r1, [r7, #16]
 8003702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	2203      	movs	r2, #3
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80ac 	beq.w	80038a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003748:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <HAL_GPIO_Init+0x2f0>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4a5d      	ldr	r2, [pc, #372]	; (80038c4 <HAL_GPIO_Init+0x2f0>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6193      	str	r3, [r2, #24]
 8003754:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <HAL_GPIO_Init+0x2f0>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003760:	4a59      	ldr	r2, [pc, #356]	; (80038c8 <HAL_GPIO_Init+0x2f4>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800378a:	d025      	beq.n	80037d8 <HAL_GPIO_Init+0x204>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a4f      	ldr	r2, [pc, #316]	; (80038cc <HAL_GPIO_Init+0x2f8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01f      	beq.n	80037d4 <HAL_GPIO_Init+0x200>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a4e      	ldr	r2, [pc, #312]	; (80038d0 <HAL_GPIO_Init+0x2fc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d019      	beq.n	80037d0 <HAL_GPIO_Init+0x1fc>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a4d      	ldr	r2, [pc, #308]	; (80038d4 <HAL_GPIO_Init+0x300>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_GPIO_Init+0x1f8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a4c      	ldr	r2, [pc, #304]	; (80038d8 <HAL_GPIO_Init+0x304>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00d      	beq.n	80037c8 <HAL_GPIO_Init+0x1f4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a4b      	ldr	r2, [pc, #300]	; (80038dc <HAL_GPIO_Init+0x308>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <HAL_GPIO_Init+0x1f0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <HAL_GPIO_Init+0x30c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_GPIO_Init+0x1ec>
 80037bc:	2306      	movs	r3, #6
 80037be:	e00c      	b.n	80037da <HAL_GPIO_Init+0x206>
 80037c0:	2307      	movs	r3, #7
 80037c2:	e00a      	b.n	80037da <HAL_GPIO_Init+0x206>
 80037c4:	2305      	movs	r3, #5
 80037c6:	e008      	b.n	80037da <HAL_GPIO_Init+0x206>
 80037c8:	2304      	movs	r3, #4
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x206>
 80037cc:	2303      	movs	r3, #3
 80037ce:	e004      	b.n	80037da <HAL_GPIO_Init+0x206>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x206>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_GPIO_Init+0x206>
 80037d8:	2300      	movs	r3, #0
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	f002 0203 	and.w	r2, r2, #3
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	4093      	lsls	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ea:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_GPIO_Init+0x2f4>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f8:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <HAL_GPIO_Init+0x310>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800381c:	4a31      	ldr	r2, [pc, #196]	; (80038e4 <HAL_GPIO_Init+0x310>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003822:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <HAL_GPIO_Init+0x310>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003846:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <HAL_GPIO_Init+0x310>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_GPIO_Init+0x310>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003870:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <HAL_GPIO_Init+0x310>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_GPIO_Init+0x310>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <HAL_GPIO_Init+0x310>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f ae97 	bne.w	80035e4 <HAL_GPIO_Init+0x10>
  }
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010000 	.word	0x40010000
 80038cc:	48000400 	.word	0x48000400
 80038d0:	48000800 	.word	0x48000800
 80038d4:	48000c00 	.word	0x48000c00
 80038d8:	48001000 	.word	0x48001000
 80038dc:	48001400 	.word	0x48001400
 80038e0:	48001800 	.word	0x48001800
 80038e4:	40010400 	.word	0x40010400

080038e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
 80038f4:	4613      	mov	r3, r2
 80038f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038f8:	787b      	ldrb	r3, [r7, #1]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003904:	e002      	b.n	800390c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800391e:	af00      	add	r7, sp, #0
 8003920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003924:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003928:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800392a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f001 b83a 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003942:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 816f 	beq.w	8003c32 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003954:	4bb5      	ldr	r3, [pc, #724]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	2b04      	cmp	r3, #4
 800395e:	d00c      	beq.n	800397a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003960:	4bb2      	ldr	r3, [pc, #712]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d15c      	bne.n	8003a26 <HAL_RCC_OscConfig+0x10e>
 800396c:	4baf      	ldr	r3, [pc, #700]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d155      	bne.n	8003a26 <HAL_RCC_OscConfig+0x10e>
 800397a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800397e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800398e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <HAL_RCC_OscConfig+0x94>
 80039a6:	4ba1      	ldr	r3, [pc, #644]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	e015      	b.n	80039d8 <HAL_RCC_OscConfig+0xc0>
 80039ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80039c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80039c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80039d4:	4b95      	ldr	r3, [pc, #596]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039dc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80039e0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80039ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80039f0:	fab2 f282 	clz	r2, r2
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	f042 0220 	orr.w	r2, r2, #32
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f002 021f 	and.w	r2, r2, #31
 8003a00:	2101      	movs	r1, #1
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8111 	beq.w	8003c30 <HAL_RCC_OscConfig+0x318>
 8003a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 8108 	bne.w	8003c30 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f000 bfc6 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_OscConfig+0x12e>
 8003a38:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a7b      	ldr	r2, [pc, #492]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e036      	b.n	8003ab4 <HAL_RCC_OscConfig+0x19c>
 8003a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x158>
 8003a56:	4b75      	ldr	r3, [pc, #468]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a74      	ldr	r2, [pc, #464]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b72      	ldr	r3, [pc, #456]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a71      	ldr	r2, [pc, #452]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e021      	b.n	8003ab4 <HAL_RCC_OscConfig+0x19c>
 8003a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x184>
 8003a82:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a69      	ldr	r2, [pc, #420]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a66      	ldr	r2, [pc, #408]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x19c>
 8003a9c:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a62      	ldr	r2, [pc, #392]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b60      	ldr	r3, [pc, #384]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5f      	ldr	r2, [pc, #380]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d059      	beq.n	8003b78 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd f920 	bl	8000d08 <HAL_GetTick>
 8003ac8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ace:	f7fd f91b 	bl	8000d08 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d902      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	f000 bf67 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
 8003ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003af8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afc:	fab3 f383 	clz	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d102      	bne.n	8003b16 <HAL_RCC_OscConfig+0x1fe>
 8003b10:	4b46      	ldr	r3, [pc, #280]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x22a>
 8003b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b1a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b46:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003b4a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003b56:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b5a:	fab2 f282 	clz	r2, r2
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f042 0220 	orr.w	r2, r2, #32
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f002 021f 	and.w	r2, r2, #31
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ab      	beq.n	8003ace <HAL_RCC_OscConfig+0x1b6>
 8003b76:	e05c      	b.n	8003c32 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fd f8c6 	bl	8000d08 <HAL_GetTick>
 8003b7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b82:	f7fd f8c1 	bl	8000d08 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d902      	bls.n	8003b98 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	f000 bf0d 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
 8003b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003bac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_OscConfig+0x2b2>
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2de>
 8003bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003be6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <HAL_RCC_OscConfig+0x314>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bfa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003bfe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003c02:	fa92 f2a2 	rbit	r2, r2
 8003c06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003c0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c0e:	fab2 f282 	clz	r2, r2
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	f042 0220 	orr.w	r2, r2, #32
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	f002 021f 	and.w	r2, r2, #31
 8003c1e:	2101      	movs	r1, #1
 8003c20:	fa01 f202 	lsl.w	r2, r1, r2
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ab      	bne.n	8003b82 <HAL_RCC_OscConfig+0x26a>
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_OscConfig+0x31a>
 8003c2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 817f 	beq.w	8003f46 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c48:	4ba7      	ldr	r3, [pc, #668]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c54:	4ba4      	ldr	r3, [pc, #656]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d173      	bne.n	8003d48 <HAL_RCC_OscConfig+0x430>
 8003c60:	4ba1      	ldr	r3, [pc, #644]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6c:	d16c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x430>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003c80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d102      	bne.n	8003c9e <HAL_RCC_OscConfig+0x386>
 8003c98:	4b93      	ldr	r3, [pc, #588]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	e013      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3ae>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003cb6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003cc2:	4b89      	ldr	r3, [pc, #548]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003ccc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003cd0:	fa92 f2a2 	rbit	r2, r2
 8003cd4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003cd8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cdc:	fab2 f282 	clz	r2, r2
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f042 0220 	orr.w	r2, r2, #32
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f002 021f 	and.w	r2, r2, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCC_OscConfig+0x3f6>
 8003cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d002      	beq.n	8003d0e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f000 be52 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	21f8      	movs	r1, #248	; 0xf8
 8003d24:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003d2c:	fa91 f1a1 	rbit	r1, r1
 8003d30:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003d34:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d38:	fab1 f181 	clz	r1, r1
 8003d3c:	b2c9      	uxtb	r1, r1
 8003d3e:	408b      	lsls	r3, r1
 8003d40:	4969      	ldr	r1, [pc, #420]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	e0fe      	b.n	8003f46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8088 	beq.w	8003e6a <HAL_RCC_OscConfig+0x552>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003d6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	461a      	mov	r2, r3
 8003d82:	2301      	movs	r3, #1
 8003d84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fc ffbf 	bl	8000d08 <HAL_GetTick>
 8003d8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fc ffba 	bl	8000d08 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d902      	bls.n	8003da6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	f000 be06 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
 8003da6:	2302      	movs	r3, #2
 8003da8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003db8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x4be>
 8003dd0:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	e013      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e6>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003de8:	2302      	movs	r3, #2
 8003dea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003dee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003e04:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003e08:	fa92 f2a2 	rbit	r2, r2
 8003e0c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003e10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e14:	fab2 f282 	clz	r2, r2
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	f042 0220 	orr.w	r2, r2, #32
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	f002 021f 	and.w	r2, r2, #31
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0af      	beq.n	8003d90 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e30:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	21f8      	movs	r1, #248	; 0xf8
 8003e46:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003e4e:	fa91 f1a1 	rbit	r1, r1
 8003e52:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003e56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e5a:	fab1 f181 	clz	r1, r1
 8003e5e:	b2c9      	uxtb	r1, r1
 8003e60:	408b      	lsls	r3, r1
 8003e62:	4921      	ldr	r1, [pc, #132]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]
 8003e68:	e06d      	b.n	8003f46 <HAL_RCC_OscConfig+0x62e>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003e7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	461a      	mov	r2, r3
 8003e92:	2300      	movs	r3, #0
 8003e94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fc ff37 	bl	8000d08 <HAL_GetTick>
 8003e9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea0:	f7fc ff32 	bl	8000d08 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d902      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	f000 bd7e 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003ec8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d105      	bne.n	8003eec <HAL_RCC_OscConfig+0x5d4>
 8003ee0:	4b01      	ldr	r3, [pc, #4]	; (8003ee8 <HAL_RCC_OscConfig+0x5d0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	e016      	b.n	8003f14 <HAL_RCC_OscConfig+0x5fc>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	2302      	movs	r3, #2
 8003eee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003efe:	2302      	movs	r3, #2
 8003f00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f10:	4bbf      	ldr	r3, [pc, #764]	; (8004210 <HAL_RCC_OscConfig+0x8f8>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2202      	movs	r2, #2
 8003f16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003f1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003f26:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f2a:	fab2 f282 	clz	r2, r2
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f042 0220 	orr.w	r2, r2, #32
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	f002 021f 	and.w	r2, r2, #31
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ac      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8113 	beq.w	8004182 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d07c      	beq.n	8004066 <HAL_RCC_OscConfig+0x74e>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003f7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f82:	fab3 f383 	clz	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4ba2      	ldr	r3, [pc, #648]	; (8004214 <HAL_RCC_OscConfig+0x8fc>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	461a      	mov	r2, r3
 8003f92:	2301      	movs	r3, #1
 8003f94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fc feb7 	bl	8000d08 <HAL_GetTick>
 8003f9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fc feb2 	bl	8000d08 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d902      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	f000 bcfe 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc0:	fa93 f2a3 	rbit	r2, r3
 8003fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	fa93 f2a3 	rbit	r2, r3
 8003fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004002:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fa93 f2a3 	rbit	r2, r3
 800400c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004010:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004014:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	4b7e      	ldr	r3, [pc, #504]	; (8004210 <HAL_RCC_OscConfig+0x8f8>)
 8004018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004022:	2102      	movs	r1, #2
 8004024:	6019      	str	r1, [r3, #0]
 8004026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	fa93 f1a3 	rbit	r1, r3
 8004034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004038:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800403c:	6019      	str	r1, [r3, #0]
  return result;
 800403e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004042:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d09d      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x688>
 8004064:	e08d      	b.n	8004182 <HAL_RCC_OscConfig+0x86a>
 8004066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004076:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	fa93 f2a3 	rbit	r2, r3
 8004080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004084:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004088:	601a      	str	r2, [r3, #0]
  return result;
 800408a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004092:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004094:	fab3 f383 	clz	r3, r3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	4b5d      	ldr	r3, [pc, #372]	; (8004214 <HAL_RCC_OscConfig+0x8fc>)
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	461a      	mov	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a8:	f7fc fe2e 	bl	8000d08 <HAL_GetTick>
 80040ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fc fe29 	bl	8000d08 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d902      	bls.n	80040c8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	f000 bc75 	b.w	80049b2 <HAL_RCC_OscConfig+0x109a>
 80040c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80040d0:	2202      	movs	r2, #2
 80040d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	fa93 f2a3 	rbit	r2, r3
 80040e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040f4:	2202      	movs	r2, #2
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	fa93 f2a3 	rbit	r2, r3
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004114:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004120:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	fa93 f2a3 	rbit	r2, r3
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004132:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	4b36      	ldr	r3, [pc, #216]	; (8004210 <HAL_RCC_OscConfig+0x8f8>)
 8004136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004140:	2102      	movs	r1, #2
 8004142:	6019      	str	r1, [r3, #0]
 8004144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004148:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	fa93 f1a3 	rbit	r1, r3
 8004152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004156:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800415a:	6019      	str	r1, [r3, #0]
  return result;
 800415c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004160:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2101      	movs	r1, #1
 8004178:	fa01 f303 	lsl.w	r3, r1, r3
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d197      	bne.n	80040b2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 81a5 	beq.w	80044e2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <HAL_RCC_OscConfig+0x8f8>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d116      	bne.n	80041d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_OscConfig+0x8f8>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <HAL_RCC_OscConfig+0x8f8>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	61d3      	str	r3, [r2, #28]
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <HAL_RCC_OscConfig+0x8f8>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80041be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_RCC_OscConfig+0x900>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d121      	bne.n	8004228 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCC_OscConfig+0x900>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0b      	ldr	r2, [pc, #44]	; (8004218 <HAL_RCC_OscConfig+0x900>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f0:	f7fc fd8a 	bl	8000d08 <HAL_GetTick>
 80041f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	e010      	b.n	800421c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fc fd85 	bl	8000d08 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d908      	bls.n	800421c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e3d1      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
 8004214:	10908120 	.word	0x10908120
 8004218:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4b8d      	ldr	r3, [pc, #564]	; (8004454 <HAL_RCC_OscConfig+0xb3c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0e8      	beq.n	80041fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x92e>
 8004238:	4b87      	ldr	r3, [pc, #540]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4a86      	ldr	r2, [pc, #536]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6213      	str	r3, [r2, #32]
 8004244:	e035      	b.n	80042b2 <HAL_RCC_OscConfig+0x99a>
 8004246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800424a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x958>
 8004256:	4b80      	ldr	r3, [pc, #512]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	4a7f      	ldr	r2, [pc, #508]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6213      	str	r3, [r2, #32]
 8004262:	4b7d      	ldr	r3, [pc, #500]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4a7c      	ldr	r2, [pc, #496]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	6213      	str	r3, [r2, #32]
 800426e:	e020      	b.n	80042b2 <HAL_RCC_OscConfig+0x99a>
 8004270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004274:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b05      	cmp	r3, #5
 800427e:	d10c      	bne.n	800429a <HAL_RCC_OscConfig+0x982>
 8004280:	4b75      	ldr	r3, [pc, #468]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4a74      	ldr	r2, [pc, #464]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004286:	f043 0304 	orr.w	r3, r3, #4
 800428a:	6213      	str	r3, [r2, #32]
 800428c:	4b72      	ldr	r3, [pc, #456]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	4a71      	ldr	r2, [pc, #452]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6213      	str	r3, [r2, #32]
 8004298:	e00b      	b.n	80042b2 <HAL_RCC_OscConfig+0x99a>
 800429a:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	4a6e      	ldr	r2, [pc, #440]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6213      	str	r3, [r2, #32]
 80042a6:	4b6c      	ldr	r3, [pc, #432]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4a6b      	ldr	r2, [pc, #428]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8081 	beq.w	80043c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c4:	f7fc fd20 	bl	8000d08 <HAL_GetTick>
 80042c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00b      	b.n	80042e6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fc fd1b 	bl	8000d08 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e365      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
 80042e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80042ee:	2202      	movs	r2, #2
 80042f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	fa93 f2a3 	rbit	r2, r3
 8004300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004304:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004312:	2202      	movs	r2, #2
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	fa93 f2a3 	rbit	r2, r3
 8004324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004328:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800432c:	601a      	str	r2, [r3, #0]
  return result;
 800432e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004332:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004336:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f043 0302 	orr.w	r3, r3, #2
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d102      	bne.n	8004352 <HAL_RCC_OscConfig+0xa3a>
 800434c:	4b42      	ldr	r3, [pc, #264]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	e013      	b.n	800437a <HAL_RCC_OscConfig+0xa62>
 8004352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004356:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800435a:	2202      	movs	r2, #2
 800435c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004362:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	fa93 f2a3 	rbit	r2, r3
 800436c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004370:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	4b38      	ldr	r3, [pc, #224]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800437e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004382:	2102      	movs	r1, #2
 8004384:	6011      	str	r1, [r2, #0]
 8004386:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800438a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	fa92 f1a2 	rbit	r1, r2
 8004394:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004398:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800439c:	6011      	str	r1, [r2, #0]
  return result;
 800439e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043a2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	fab2 f282 	clz	r2, r2
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	f002 021f 	and.w	r2, r2, #31
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f202 	lsl.w	r2, r1, r2
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d084      	beq.n	80042ce <HAL_RCC_OscConfig+0x9b6>
 80043c4:	e083      	b.n	80044ce <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fc fc9f 	bl	8000d08 <HAL_GetTick>
 80043ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fc fc9a 	bl	8000d08 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e2e4      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
 80043e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80043f0:	2202      	movs	r2, #2
 80043f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	fa93 f2a3 	rbit	r2, r3
 8004402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004406:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004410:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004414:	2202      	movs	r2, #2
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800441c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	fa93 f2a3 	rbit	r2, r3
 8004426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800442e:	601a      	str	r2, [r3, #0]
  return result;
 8004430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004434:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004438:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d106      	bne.n	800445c <HAL_RCC_OscConfig+0xb44>
 800444e:	4b02      	ldr	r3, [pc, #8]	; (8004458 <HAL_RCC_OscConfig+0xb40>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	e017      	b.n	8004484 <HAL_RCC_OscConfig+0xb6c>
 8004454:	40007000 	.word	0x40007000
 8004458:	40021000 	.word	0x40021000
 800445c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004460:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004464:	2202      	movs	r2, #2
 8004466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	fa93 f2a3 	rbit	r2, r3
 8004476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	4bb3      	ldr	r3, [pc, #716]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004488:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800448c:	2102      	movs	r1, #2
 800448e:	6011      	str	r1, [r2, #0]
 8004490:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004494:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	fa92 f1a2 	rbit	r1, r2
 800449e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044a2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80044a6:	6011      	str	r1, [r2, #0]
  return result;
 80044a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044ac:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	fab2 f282 	clz	r2, r2
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	f002 021f 	and.w	r2, r2, #31
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f202 	lsl.w	r2, r1, r2
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d180      	bne.n	80043d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044ce:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4b9e      	ldr	r3, [pc, #632]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4a9d      	ldr	r2, [pc, #628]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 825e 	beq.w	80049b0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f4:	4b96      	ldr	r3, [pc, #600]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	f000 821f 	beq.w	8004940 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004506:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 8170 	bne.w	80047f4 <HAL_RCC_OscConfig+0xedc>
 8004514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004518:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800451c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004526:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	fa93 f2a3 	rbit	r2, r3
 8004530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004534:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004538:	601a      	str	r2, [r3, #0]
  return result;
 800453a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800453e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004542:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800454e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	461a      	mov	r2, r3
 8004556:	2300      	movs	r3, #0
 8004558:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fc fbd5 	bl	8000d08 <HAL_GetTick>
 800455e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004562:	e009      	b.n	8004578 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fc fbd0 	bl	8000d08 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e21c      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
 8004578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800458a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	fa93 f2a3 	rbit	r2, r3
 8004594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004598:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800459c:	601a      	str	r2, [r3, #0]
  return result;
 800459e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_OscConfig+0xcaa>
 80045bc:	4b64      	ldr	r3, [pc, #400]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e027      	b.n	8004612 <HAL_RCC_OscConfig+0xcfa>
 80045c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	fa93 f2a3 	rbit	r2, r3
 80045de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80045f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	fa93 f2a3 	rbit	r2, r3
 8004604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004608:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004616:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800461a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800461e:	6011      	str	r1, [r2, #0]
 8004620:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004624:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	fa92 f1a2 	rbit	r1, r2
 800462e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004632:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004636:	6011      	str	r1, [r2, #0]
  return result;
 8004638:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800463c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	fab2 f282 	clz	r2, r2
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f042 0220 	orr.w	r2, r2, #32
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f002 021f 	and.w	r2, r2, #31
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d182      	bne.n	8004564 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800465e:	4b3c      	ldr	r3, [pc, #240]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f023 020f 	bic.w	r2, r3, #15
 8004666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800466a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	4937      	ldr	r1, [pc, #220]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 8004674:	4313      	orrs	r3, r2
 8004676:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a19      	ldr	r1, [r3, #32]
 800468c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004690:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	430b      	orrs	r3, r1
 800469a:	492d      	ldr	r1, [pc, #180]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
 80046a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80046a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	fa93 f2a3 	rbit	r2, r3
 80046bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80046c4:	601a      	str	r2, [r3, #0]
  return result;
 80046c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80046ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	461a      	mov	r2, r3
 80046e2:	2301      	movs	r3, #1
 80046e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fc fb0f 	bl	8000d08 <HAL_GetTick>
 80046ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ee:	e009      	b.n	8004704 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fc fb0a 	bl	8000d08 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e156      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
 8004704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004708:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800470c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004716:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	fa93 f2a3 	rbit	r2, r3
 8004720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004724:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004728:	601a      	str	r2, [r3, #0]
  return result;
 800472a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800472e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004732:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004734:	fab3 f383 	clz	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCC_OscConfig+0xe3c>
 8004748:	4b01      	ldr	r3, [pc, #4]	; (8004750 <HAL_RCC_OscConfig+0xe38>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	e02a      	b.n	80047a4 <HAL_RCC_OscConfig+0xe8c>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004758:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800475c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004766:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	fa93 f2a3 	rbit	r2, r3
 8004770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004774:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800477e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	fa93 f2a3 	rbit	r2, r3
 8004796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800479a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	4b86      	ldr	r3, [pc, #536]	; (80049bc <HAL_RCC_OscConfig+0x10a4>)
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80047ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	fa92 f1a2 	rbit	r1, r2
 80047c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047c4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80047c8:	6011      	str	r1, [r2, #0]
  return result;
 80047ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047ce:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f042 0220 	orr.w	r2, r2, #32
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	f002 021f 	and.w	r2, r2, #31
 80047e4:	2101      	movs	r1, #1
 80047e6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f43f af7f 	beq.w	80046f0 <HAL_RCC_OscConfig+0xdd8>
 80047f2:	e0dd      	b.n	80049b0 <HAL_RCC_OscConfig+0x1098>
 80047f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80047fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004806:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	fa93 f2a3 	rbit	r2, r3
 8004810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004814:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004818:	601a      	str	r2, [r3, #0]
  return result;
 800481a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800481e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004822:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004824:	fab3 f383 	clz	r3, r3
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800482e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	461a      	mov	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fc fa65 	bl	8000d08 <HAL_GetTick>
 800483e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	e009      	b.n	8004858 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004844:	f7fc fa60 	bl	8000d08 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e0ac      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
 8004858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800486a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	fa93 f2a3 	rbit	r2, r3
 8004874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004878:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800487c:	601a      	str	r2, [r3, #0]
  return result;
 800487e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004882:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004886:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d102      	bne.n	80048a2 <HAL_RCC_OscConfig+0xf8a>
 800489c:	4b47      	ldr	r3, [pc, #284]	; (80049bc <HAL_RCC_OscConfig+0x10a4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	e027      	b.n	80048f2 <HAL_RCC_OscConfig+0xfda>
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80048aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	fa93 f2a3 	rbit	r2, r3
 80048be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048cc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80048d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	fa93 f2a3 	rbit	r2, r3
 80048e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_RCC_OscConfig+0x10a4>)
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048fe:	6011      	str	r1, [r2, #0]
 8004900:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004904:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	fa92 f1a2 	rbit	r1, r2
 800490e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004912:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004916:	6011      	str	r1, [r2, #0]
  return result;
 8004918:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800491c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	fab2 f282 	clz	r2, r2
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	f042 0220 	orr.w	r2, r2, #32
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	f002 021f 	and.w	r2, r2, #31
 8004932:	2101      	movs	r1, #1
 8004934:	fa01 f202 	lsl.w	r2, r1, r2
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d182      	bne.n	8004844 <HAL_RCC_OscConfig+0xf2c>
 800493e:	e037      	b.n	80049b0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004944:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e02e      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_RCC_OscConfig+0x10a4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800495c:	4b17      	ldr	r3, [pc, #92]	; (80049bc <HAL_RCC_OscConfig+0x10a4>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004964:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004968:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800496c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004970:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	429a      	cmp	r2, r3
 800497a:	d117      	bne.n	80049ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800497c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004980:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004988:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004990:	429a      	cmp	r2, r3
 8004992:	d10b      	bne.n	80049ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000

080049c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b09e      	sub	sp, #120	; 0x78
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e162      	b.n	8004c9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b90      	ldr	r3, [pc, #576]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d910      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b8d      	ldr	r3, [pc, #564]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 0207 	bic.w	r2, r3, #7
 80049ee:	498b      	ldr	r1, [pc, #556]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b89      	ldr	r3, [pc, #548]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e14a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a14:	4b82      	ldr	r3, [pc, #520]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	497f      	ldr	r1, [pc, #508]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80dc 	beq.w	8004bec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d13c      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xf6>
 8004a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xa6>
 8004a60:	4b6f      	ldr	r3, [pc, #444]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	e00f      	b.n	8004a86 <HAL_RCC_ClockConfig+0xc6>
 8004a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	667b      	str	r3, [r7, #100]	; 0x64
 8004a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a78:	663b      	str	r3, [r7, #96]	; 0x60
 8004a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a82:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a8e:	fa92 f2a2 	rbit	r2, r2
 8004a92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a96:	fab2 f282 	clz	r2, r2
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	f042 0220 	orr.w	r2, r2, #32
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	f002 021f 	and.w	r2, r2, #31
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d17b      	bne.n	8004baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0f3      	b.n	8004c9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d13c      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x178>
 8004abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ac2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d102      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x128>
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	e00f      	b.n	8004b08 <HAL_RCC_ClockConfig+0x148>
 8004ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	647b      	str	r3, [r7, #68]	; 0x44
 8004af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004afa:	643b      	str	r3, [r7, #64]	; 0x40
 8004afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b04:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b10:	fa92 f2a2 	rbit	r2, r2
 8004b14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b18:	fab2 f282 	clz	r2, r2
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f042 0220 	orr.w	r2, r2, #32
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	f002 021f 	and.w	r2, r2, #31
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d13a      	bne.n	8004baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b2      	b.n	8004c9e <HAL_RCC_ClockConfig+0x2de>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d102      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x1a0>
 8004b5a:	4b31      	ldr	r3, [pc, #196]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	e00d      	b.n	8004b7c <HAL_RCC_ClockConfig+0x1bc>
 8004b60:	2302      	movs	r3, #2
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	fa93 f3a3 	rbit	r3, r3
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	61ba      	str	r2, [r7, #24]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	fa92 f2a2 	rbit	r2, r2
 8004b86:	617a      	str	r2, [r7, #20]
  return result;
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	fab2 f282 	clz	r2, r2
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	f042 0220 	orr.w	r2, r2, #32
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	f002 021f 	and.w	r2, r2, #31
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e079      	b.n	8004c9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f023 0203 	bic.w	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	491a      	ldr	r1, [pc, #104]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bbc:	f7fc f8a4 	bl	8000d08 <HAL_GetTick>
 8004bc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	e00a      	b.n	8004bda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc4:	f7fc f8a0 	bl	8000d08 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e061      	b.n	8004c9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_RCC_ClockConfig+0x260>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 020c 	and.w	r2, r3, #12
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d1eb      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d214      	bcs.n	8004c24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 0207 	bic.w	r2, r3, #7
 8004c02:	4906      	ldr	r1, [pc, #24]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <HAL_RCC_ClockConfig+0x25c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e040      	b.n	8004c9e <HAL_RCC_ClockConfig+0x2de>
 8004c1c:	40022000 	.word	0x40022000
 8004c20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	491a      	ldr	r1, [pc, #104]	; (8004ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c4e:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4912      	ldr	r1, [pc, #72]	; (8004ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c62:	f000 f829 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c66:	4601      	mov	r1, r0
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c70:	22f0      	movs	r2, #240	; 0xf0
 8004c72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	fa92 f2a2 	rbit	r2, r2
 8004c7a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	fab2 f282 	clz	r2, r2
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	40d3      	lsrs	r3, r2
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x2ec>)
 8004c88:	5cd3      	ldrb	r3, [r2, r3]
 8004c8a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c8e:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <HAL_RCC_ClockConfig+0x2f0>)
 8004c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <HAL_RCC_ClockConfig+0x2f4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb fff2 	bl	8000c80 <HAL_InitTick>
  
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3778      	adds	r7, #120	; 0x78
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	08005bac 	.word	0x08005bac
 8004cb0:	20000004 	.word	0x20000004
 8004cb4:	20000008 	.word	0x20000008

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b08b      	sub	sp, #44	; 0x2c
 8004cbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x30>
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x36>
 8004ce6:	e03f      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004cea:	623b      	str	r3, [r7, #32]
      break;
 8004cec:	e03f      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004cf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004cf8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	fa92 f2a2 	rbit	r2, r2
 8004d00:	607a      	str	r2, [r7, #4]
  return result;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	fab2 f282 	clz	r2, r2
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	40d3      	lsrs	r3, r2
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d0e:	5cd3      	ldrb	r3, [r2, r3]
 8004d10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	220f      	movs	r2, #15
 8004d1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	fa92 f2a2 	rbit	r2, r2
 8004d24:	60fa      	str	r2, [r7, #12]
  return result;
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	fab2 f282 	clz	r2, r2
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	40d3      	lsrs	r3, r2
 8004d30:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d32:	5cd3      	ldrb	r3, [r2, r3]
 8004d34:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d40:	4a0f      	ldr	r2, [pc, #60]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d50:	e007      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d52:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	fb02 f303 	mul.w	r3, r2, r3
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	623b      	str	r3, [r7, #32]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d6a:	623b      	str	r3, [r7, #32]
      break;
 8004d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	372c      	adds	r7, #44	; 0x2c
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	007a1200 	.word	0x007a1200
 8004d84:	08005bbc 	.word	0x08005bbc
 8004d88:	08005bcc 	.word	0x08005bcc

08004d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b092      	sub	sp, #72	; 0x48
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80d4 	beq.w	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db0:	4b4e      	ldr	r3, [pc, #312]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10e      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbc:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	4a4a      	ldr	r2, [pc, #296]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	61d3      	str	r3, [r2, #28]
 8004dc8:	4b48      	ldr	r3, [pc, #288]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b45      	ldr	r3, [pc, #276]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d118      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de6:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a41      	ldr	r2, [pc, #260]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df2:	f7fb ff89 	bl	8000d08 <HAL_GetTick>
 8004df6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	e008      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfa:	f7fb ff85 	bl	8000d08 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b64      	cmp	r3, #100	; 0x64
 8004e06:	d901      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e1d6      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e18:	4b34      	ldr	r3, [pc, #208]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8084 	beq.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d07c      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e38:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	fa93 f3a3 	rbit	r3, r3
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	461a      	mov	r2, r3
 8004e62:	2301      	movs	r3, #1
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	461a      	mov	r2, r3
 8004e86:	2300      	movs	r3, #0
 8004e88:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e8a:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d04b      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9a:	f7fb ff35 	bl	8000d08 <HAL_GetTick>
 8004e9e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea2:	f7fb ff31 	bl	8000d08 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e180      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	fa93 f3a3 	rbit	r3, r3
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	623b      	str	r3, [r7, #32]
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	fa93 f3a3 	rbit	r3, r3
 8004ece:	61fb      	str	r3, [r7, #28]
  return result;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	fab3 f383 	clz	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d108      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004ee6:	4b01      	ldr	r3, [pc, #4]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	e00d      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40007000 	.word	0x40007000
 8004ef4:	10908100 	.word	0x10908100
 8004ef8:	2302      	movs	r3, #2
 8004efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	4b9a      	ldr	r3, [pc, #616]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2202      	movs	r2, #2
 8004f0a:	613a      	str	r2, [r7, #16]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	fa92 f2a2 	rbit	r2, r2
 8004f12:	60fa      	str	r2, [r7, #12]
  return result;
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	fab2 f282 	clz	r2, r2
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	f002 021f 	and.w	r2, r2, #31
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0b7      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f32:	4b8f      	ldr	r3, [pc, #572]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	498c      	ldr	r1, [pc, #560]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b88      	ldr	r3, [pc, #544]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	4a87      	ldr	r2, [pc, #540]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f64:	4b82      	ldr	r3, [pc, #520]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	f023 0203 	bic.w	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	497f      	ldr	r1, [pc, #508]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f82:	4b7b      	ldr	r3, [pc, #492]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4978      	ldr	r1, [pc, #480]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fa0:	4b73      	ldr	r3, [pc, #460]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	4970      	ldr	r1, [pc, #448]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fbe:	4b6c      	ldr	r3, [pc, #432]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f023 0210 	bic.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4969      	ldr	r1, [pc, #420]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004fdc:	4b64      	ldr	r3, [pc, #400]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	4961      	ldr	r1, [pc, #388]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ffa:	4b5d      	ldr	r3, [pc, #372]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f023 0220 	bic.w	r2, r3, #32
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	495a      	ldr	r1, [pc, #360]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005008:	4313      	orrs	r3, r2
 800500a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005018:	4b55      	ldr	r3, [pc, #340]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	4952      	ldr	r1, [pc, #328]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005026:	4313      	orrs	r3, r2
 8005028:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005036:	4b4e      	ldr	r3, [pc, #312]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	494b      	ldr	r1, [pc, #300]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005044:	4313      	orrs	r3, r2
 8005046:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005054:	4b46      	ldr	r3, [pc, #280]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4943      	ldr	r1, [pc, #268]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005062:	4313      	orrs	r3, r2
 8005064:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005072:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	493c      	ldr	r1, [pc, #240]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005090:	4b37      	ldr	r3, [pc, #220]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	4934      	ldr	r1, [pc, #208]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80050ae:	4b30      	ldr	r3, [pc, #192]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	492d      	ldr	r1, [pc, #180]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050cc:	4b28      	ldr	r3, [pc, #160]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	4925      	ldr	r1, [pc, #148]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80050ea:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	491e      	ldr	r1, [pc, #120]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	4916      	ldr	r1, [pc, #88]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	490f      	ldr	r1, [pc, #60]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	4907      	ldr	r1, [pc, #28]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005162:	4b03      	ldr	r3, [pc, #12]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005176:	4913      	ldr	r1, [pc, #76]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005178:	4313      	orrs	r3, r2
 800517a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005194:	490b      	ldr	r1, [pc, #44]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005196:	4313      	orrs	r3, r2
 8005198:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3748      	adds	r7, #72	; 0x48
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e049      	b.n	800526e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fb fc40 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 fab6 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d001      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e04f      	b.n	8005330 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a23      	ldr	r2, [pc, #140]	; (800533c <HAL_TIM_Base_Start_IT+0xc4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01d      	beq.n	80052ee <HAL_TIM_Base_Start_IT+0x76>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ba:	d018      	beq.n	80052ee <HAL_TIM_Base_Start_IT+0x76>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <HAL_TIM_Base_Start_IT+0xc8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_TIM_Base_Start_IT+0x76>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <HAL_TIM_Base_Start_IT+0xcc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIM_Base_Start_IT+0x76>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <HAL_TIM_Base_Start_IT+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIM_Base_Start_IT+0x76>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_TIM_Base_Start_IT+0xd4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIM_Base_Start_IT+0x76>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a19      	ldr	r2, [pc, #100]	; (8005350 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d115      	bne.n	800531a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <HAL_TIM_Base_Start_IT+0xdc>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d015      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xb4>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005306:	d011      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	e008      	b.n	800532c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e000      	b.n	800532e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40013400 	.word	0x40013400
 800534c:	40014000 	.word	0x40014000
 8005350:	40015000 	.word	0x40015000
 8005354:	00010007 	.word	0x00010007

08005358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b02      	cmp	r3, #2
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0202 	mvn.w	r2, #2
 8005384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f9ce 	bl	800573c <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9c0 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f9d1 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0204 	mvn.w	r2, #4
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9a4 	bl	800573c <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f996 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f9a7 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b08      	cmp	r3, #8
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b08      	cmp	r3, #8
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0208 	mvn.w	r2, #8
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f97a 	bl	800573c <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f96c 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f97d 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b10      	cmp	r3, #16
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b10      	cmp	r3, #16
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0210 	mvn.w	r2, #16
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2208      	movs	r2, #8
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f950 	bl	800573c <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f942 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f953 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0201 	mvn.w	r2, #1
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fa fe92 	bl	8000200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d10e      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d107      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fb06 	bl	8005b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005516:	d10e      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d107      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 faf9 	bl	8005b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d10e      	bne.n	8005562 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d107      	bne.n	8005562 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800555a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f901 	bl	8005764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b20      	cmp	r3, #32
 800556e:	d10e      	bne.n	800558e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b20      	cmp	r3, #32
 800557c:	d107      	bne.n	800558e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f06f 0220 	mvn.w	r2, #32
 8005586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fab9 	bl	8005b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_ConfigClockSource+0x1c>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e0b6      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x18a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ee:	d03e      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xd8>
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f4:	f200 8087 	bhi.w	8005706 <HAL_TIM_ConfigClockSource+0x170>
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fc:	f000 8086 	beq.w	800570c <HAL_TIM_ConfigClockSource+0x176>
 8005600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005604:	d87f      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
 8005606:	2b70      	cmp	r3, #112	; 0x70
 8005608:	d01a      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0xaa>
 800560a:	2b70      	cmp	r3, #112	; 0x70
 800560c:	d87b      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
 800560e:	2b60      	cmp	r3, #96	; 0x60
 8005610:	d050      	beq.n	80056b4 <HAL_TIM_ConfigClockSource+0x11e>
 8005612:	2b60      	cmp	r3, #96	; 0x60
 8005614:	d877      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
 8005616:	2b50      	cmp	r3, #80	; 0x50
 8005618:	d03c      	beq.n	8005694 <HAL_TIM_ConfigClockSource+0xfe>
 800561a:	2b50      	cmp	r3, #80	; 0x50
 800561c:	d873      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d058      	beq.n	80056d4 <HAL_TIM_ConfigClockSource+0x13e>
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d86f      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
 8005626:	2b30      	cmp	r3, #48	; 0x30
 8005628:	d064      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x15e>
 800562a:	2b30      	cmp	r3, #48	; 0x30
 800562c:	d86b      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
 800562e:	2b20      	cmp	r3, #32
 8005630:	d060      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x15e>
 8005632:	2b20      	cmp	r3, #32
 8005634:	d867      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d05c      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x15e>
 800563a:	2b10      	cmp	r3, #16
 800563c:	d05a      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x15e>
 800563e:	e062      	b.n	8005706 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6899      	ldr	r1, [r3, #8]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f000 f9aa 	bl	80059a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005662:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]
      break;
 800566c:	e04f      	b.n	800570e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6899      	ldr	r1, [r3, #8]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f000 f993 	bl	80059a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005690:	609a      	str	r2, [r3, #8]
      break;
 8005692:	e03c      	b.n	800570e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6859      	ldr	r1, [r3, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f000 f907 	bl	80058b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2150      	movs	r1, #80	; 0x50
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f960 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 80056b2:	e02c      	b.n	800570e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	461a      	mov	r2, r3
 80056c2:	f000 f926 	bl	8005912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2160      	movs	r1, #96	; 0x60
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f950 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 80056d2:	e01c      	b.n	800570e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	461a      	mov	r2, r3
 80056e2:	f000 f8e7 	bl	80058b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2140      	movs	r1, #64	; 0x40
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f940 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 80056f2:	e00c      	b.n	800570e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f000 f937 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 8005704:	e003      	b.n	800570e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	73fb      	strb	r3, [r7, #15]
      break;
 800570a:	e000      	b.n	800570e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800570c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a42      	ldr	r2, [pc, #264]	; (8005894 <TIM_Base_SetConfig+0x11c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d013      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005796:	d00f      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a3f      	ldr	r2, [pc, #252]	; (8005898 <TIM_Base_SetConfig+0x120>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00b      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3e      	ldr	r2, [pc, #248]	; (800589c <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a3d      	ldr	r2, [pc, #244]	; (80058a0 <TIM_Base_SetConfig+0x128>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <TIM_Base_SetConfig+0x12c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d108      	bne.n	80057ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a31      	ldr	r2, [pc, #196]	; (8005894 <TIM_Base_SetConfig+0x11c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d01f      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d8:	d01b      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2e      	ldr	r2, [pc, #184]	; (8005898 <TIM_Base_SetConfig+0x120>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d017      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2d      	ldr	r2, [pc, #180]	; (800589c <TIM_Base_SetConfig+0x124>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2c      	ldr	r2, [pc, #176]	; (80058a0 <TIM_Base_SetConfig+0x128>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <TIM_Base_SetConfig+0x130>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2b      	ldr	r2, [pc, #172]	; (80058ac <TIM_Base_SetConfig+0x134>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <TIM_Base_SetConfig+0x138>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a25      	ldr	r2, [pc, #148]	; (80058a4 <TIM_Base_SetConfig+0x12c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d108      	bne.n	8005824 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a12      	ldr	r2, [pc, #72]	; (8005894 <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <TIM_Base_SetConfig+0x100>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <TIM_Base_SetConfig+0x128>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x100>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <TIM_Base_SetConfig+0x130>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x100>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a12      	ldr	r2, [pc, #72]	; (80058ac <TIM_Base_SetConfig+0x134>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x100>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <TIM_Base_SetConfig+0x138>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x100>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <TIM_Base_SetConfig+0x12c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d103      	bne.n	8005880 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	615a      	str	r2, [r3, #20]
}
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40013400 	.word	0x40013400
 80058a4:	40015000 	.word	0x40015000
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800

080058b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0201 	bic.w	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 030a 	bic.w	r3, r3, #10
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0210 	bic.w	r2, r3, #16
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800593c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	031b      	lsls	r3, r3, #12
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800594e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	f043 0307 	orr.w	r3, r3, #7
 8005994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e06d      	b.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a30      	ldr	r2, [pc, #192]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d01d      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7c:	d018      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00e      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a15      	ldr	r2, [pc, #84]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10c      	bne.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40015000 	.word	0x40015000
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40014000 	.word	0x40014000

08005b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <__libc_init_array>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4d0d      	ldr	r5, [pc, #52]	; (8005b74 <__libc_init_array+0x38>)
 8005b40:	4c0d      	ldr	r4, [pc, #52]	; (8005b78 <__libc_init_array+0x3c>)
 8005b42:	1b64      	subs	r4, r4, r5
 8005b44:	10a4      	asrs	r4, r4, #2
 8005b46:	2600      	movs	r6, #0
 8005b48:	42a6      	cmp	r6, r4
 8005b4a:	d109      	bne.n	8005b60 <__libc_init_array+0x24>
 8005b4c:	4d0b      	ldr	r5, [pc, #44]	; (8005b7c <__libc_init_array+0x40>)
 8005b4e:	4c0c      	ldr	r4, [pc, #48]	; (8005b80 <__libc_init_array+0x44>)
 8005b50:	f000 f820 	bl	8005b94 <_init>
 8005b54:	1b64      	subs	r4, r4, r5
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	2600      	movs	r6, #0
 8005b5a:	42a6      	cmp	r6, r4
 8005b5c:	d105      	bne.n	8005b6a <__libc_init_array+0x2e>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b64:	4798      	blx	r3
 8005b66:	3601      	adds	r6, #1
 8005b68:	e7ee      	b.n	8005b48 <__libc_init_array+0xc>
 8005b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6e:	4798      	blx	r3
 8005b70:	3601      	adds	r6, #1
 8005b72:	e7f2      	b.n	8005b5a <__libc_init_array+0x1e>
 8005b74:	08005bdc 	.word	0x08005bdc
 8005b78:	08005bdc 	.word	0x08005bdc
 8005b7c:	08005bdc 	.word	0x08005bdc
 8005b80:	08005be0 	.word	0x08005be0

08005b84 <memset>:
 8005b84:	4402      	add	r2, r0
 8005b86:	4603      	mov	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr
